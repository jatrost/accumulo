/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.accumulo.core.data.thrift;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

@SuppressWarnings("serial")
public class TKey implements TBase<TKey,TKey._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("TKey");
  
  private static final TField ROW_FIELD_DESC = new TField("row", TType.STRING, (short) 1);
  private static final TField COL_FAMILY_FIELD_DESC = new TField("colFamily", TType.STRING, (short) 2);
  private static final TField COL_QUALIFIER_FIELD_DESC = new TField("colQualifier", TType.STRING, (short) 3);
  private static final TField COL_VISIBILITY_FIELD_DESC = new TField("colVisibility", TType.STRING, (short) 4);
  private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short) 5);
  
  public byte[] row;
  public byte[] colFamily;
  public byte[] colQualifier;
  public byte[] colVisibility;
  public long timestamp;
  
  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ROW((short) 1, "row"), COL_FAMILY((short) 2, "colFamily"), COL_QUALIFIER((short) 3, "colQualifier"), COL_VISIBILITY((short) 4, "colVisibility"), TIMESTAMP(
        (short) 5, "timestamp");
    
    private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
    
    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
    
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // ROW
          return ROW;
        case 2: // COL_FAMILY
          return COL_FAMILY;
        case 3: // COL_QUALIFIER
          return COL_QUALIFIER;
        case 4: // COL_VISIBILITY
          return COL_VISIBILITY;
        case 5: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }
    
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
    
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
    
    private final short _thriftId;
    private final String _fieldName;
    
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
    
    public short getThriftFieldId() {
      return _thriftId;
    }
    
    public String getFieldName() {
      return _fieldName;
    }
  }
  
  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private java.util.BitSet __isset_bit_vector = new java.util.BitSet(1);
  
  public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROW, new FieldMetaData("row", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.COL_FAMILY, new FieldMetaData("colFamily", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.COL_QUALIFIER, new FieldMetaData("colQualifier", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.COL_VISIBILITY, new FieldMetaData("colVisibility", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(TKey.class, metaDataMap);
  }
  
  public TKey() {}
  
  public TKey(byte[] row, byte[] colFamily, byte[] colQualifier, byte[] colVisibility, long timestamp) {
    this();
    this.row = row;
    this.colFamily = colFamily;
    this.colQualifier = colQualifier;
    this.colVisibility = colVisibility;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }
  
  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TKey(TKey other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetRow()) {
      this.row = new byte[other.row.length];
      System.arraycopy(other.row, 0, row, 0, other.row.length);
    }
    if (other.isSetColFamily()) {
      this.colFamily = new byte[other.colFamily.length];
      System.arraycopy(other.colFamily, 0, colFamily, 0, other.colFamily.length);
    }
    if (other.isSetColQualifier()) {
      this.colQualifier = new byte[other.colQualifier.length];
      System.arraycopy(other.colQualifier, 0, colQualifier, 0, other.colQualifier.length);
    }
    if (other.isSetColVisibility()) {
      this.colVisibility = new byte[other.colVisibility.length];
      System.arraycopy(other.colVisibility, 0, colVisibility, 0, other.colVisibility.length);
    }
    this.timestamp = other.timestamp;
  }
  
  public TKey deepCopy() {
    return new TKey(this);
  }
  
  @Deprecated
  public TKey clone() {
    return new TKey(this);
  }
  
  public byte[] getRow() {
    return this.row;
  }
  
  public TKey setRow(byte[] row) {
    this.row = row;
    return this;
  }
  
  public void unsetRow() {
    this.row = null;
  }
  
  /** Returns true if field row is set (has been asigned a value) and false otherwise */
  public boolean isSetRow() {
    return this.row != null;
  }
  
  public void setRowIsSet(boolean value) {
    if (!value) {
      this.row = null;
    }
  }
  
  public byte[] getColFamily() {
    return this.colFamily;
  }
  
  public TKey setColFamily(byte[] colFamily) {
    this.colFamily = colFamily;
    return this;
  }
  
  public void unsetColFamily() {
    this.colFamily = null;
  }
  
  /** Returns true if field colFamily is set (has been asigned a value) and false otherwise */
  public boolean isSetColFamily() {
    return this.colFamily != null;
  }
  
  public void setColFamilyIsSet(boolean value) {
    if (!value) {
      this.colFamily = null;
    }
  }
  
  public byte[] getColQualifier() {
    return this.colQualifier;
  }
  
  public TKey setColQualifier(byte[] colQualifier) {
    this.colQualifier = colQualifier;
    return this;
  }
  
  public void unsetColQualifier() {
    this.colQualifier = null;
  }
  
  /** Returns true if field colQualifier is set (has been asigned a value) and false otherwise */
  public boolean isSetColQualifier() {
    return this.colQualifier != null;
  }
  
  public void setColQualifierIsSet(boolean value) {
    if (!value) {
      this.colQualifier = null;
    }
  }
  
  public byte[] getColVisibility() {
    return this.colVisibility;
  }
  
  public TKey setColVisibility(byte[] colVisibility) {
    this.colVisibility = colVisibility;
    return this;
  }
  
  public void unsetColVisibility() {
    this.colVisibility = null;
  }
  
  /** Returns true if field colVisibility is set (has been asigned a value) and false otherwise */
  public boolean isSetColVisibility() {
    return this.colVisibility != null;
  }
  
  public void setColVisibilityIsSet(boolean value) {
    if (!value) {
      this.colVisibility = null;
    }
  }
  
  public long getTimestamp() {
    return this.timestamp;
  }
  
  public TKey setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }
  
  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }
  
  /** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }
  
  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }
  
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case ROW:
        if (value == null) {
          unsetRow();
        } else {
          setRow((byte[]) value);
        }
        break;
      
      case COL_FAMILY:
        if (value == null) {
          unsetColFamily();
        } else {
          setColFamily((byte[]) value);
        }
        break;
      
      case COL_QUALIFIER:
        if (value == null) {
          unsetColQualifier();
        } else {
          setColQualifier((byte[]) value);
        }
        break;
      
      case COL_VISIBILITY:
        if (value == null) {
          unsetColVisibility();
        } else {
          setColVisibility((byte[]) value);
        }
        break;
      
      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((Long) value);
        }
        break;
    
    }
  }
  
  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }
  
  public Object getFieldValue(_Fields field) {
    switch (field) {
      case ROW:
        return getRow();
        
      case COL_FAMILY:
        return getColFamily();
        
      case COL_QUALIFIER:
        return getColQualifier();
        
      case COL_VISIBILITY:
        return getColVisibility();
        
      case TIMESTAMP:
        return new Long(getTimestamp());
        
    }
    throw new IllegalStateException();
  }
  
  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }
  
  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
      case ROW:
        return isSetRow();
      case COL_FAMILY:
        return isSetColFamily();
      case COL_QUALIFIER:
        return isSetColQualifier();
      case COL_VISIBILITY:
        return isSetColVisibility();
      case TIMESTAMP:
        return isSetTimestamp();
    }
    throw new IllegalStateException();
  }
  
  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }
  
  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TKey)
      return this.equals((TKey) that);
    return false;
  }
  
  public boolean equals(TKey that) {
    if (that == null)
      return false;
    
    boolean this_present_row = true && this.isSetRow();
    boolean that_present_row = true && that.isSetRow();
    if (this_present_row || that_present_row) {
      if (!(this_present_row && that_present_row))
        return false;
      if (!java.util.Arrays.equals(this.row, that.row))
        return false;
    }
    
    boolean this_present_colFamily = true && this.isSetColFamily();
    boolean that_present_colFamily = true && that.isSetColFamily();
    if (this_present_colFamily || that_present_colFamily) {
      if (!(this_present_colFamily && that_present_colFamily))
        return false;
      if (!java.util.Arrays.equals(this.colFamily, that.colFamily))
        return false;
    }
    
    boolean this_present_colQualifier = true && this.isSetColQualifier();
    boolean that_present_colQualifier = true && that.isSetColQualifier();
    if (this_present_colQualifier || that_present_colQualifier) {
      if (!(this_present_colQualifier && that_present_colQualifier))
        return false;
      if (!java.util.Arrays.equals(this.colQualifier, that.colQualifier))
        return false;
    }
    
    boolean this_present_colVisibility = true && this.isSetColVisibility();
    boolean that_present_colVisibility = true && that.isSetColVisibility();
    if (this_present_colVisibility || that_present_colVisibility) {
      if (!(this_present_colVisibility && that_present_colVisibility))
        return false;
      if (!java.util.Arrays.equals(this.colVisibility, that.colVisibility))
        return false;
    }
    
    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }
    
    return true;
  }
  
  @Override
  public int hashCode() {
    return 0;
  }
  
  public int compareTo(TKey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }
    
    int lastComparison = 0;
    TKey typedOther = (TKey) other;
    
    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow()) {
      lastComparison = TBaseHelper.compareTo(this.row, typedOther.row);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColFamily()).compareTo(typedOther.isSetColFamily());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColFamily()) {
      lastComparison = TBaseHelper.compareTo(this.colFamily, typedOther.colFamily);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColQualifier()).compareTo(typedOther.isSetColQualifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColQualifier()) {
      lastComparison = TBaseHelper.compareTo(this.colQualifier, typedOther.colQualifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColVisibility()).compareTo(typedOther.isSetColVisibility());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColVisibility()) {
      lastComparison = TBaseHelper.compareTo(this.colVisibility, typedOther.colVisibility);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }
  
  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ROW
          if (field.type == TType.STRING) {
            this.row = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COL_FAMILY
          if (field.type == TType.STRING) {
            this.colFamily = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COL_QUALIFIER
          if (field.type == TType.STRING) {
            this.colQualifier = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // COL_VISIBILITY
          if (field.type == TType.STRING) {
            this.colVisibility = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TIMESTAMP
          if (field.type == TType.I64) {
            this.timestamp = iprot.readI64();
            setTimestampIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    
    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
  
  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.row != null) {
      oprot.writeFieldBegin(ROW_FIELD_DESC);
      oprot.writeBinary(this.row);
      oprot.writeFieldEnd();
    }
    if (this.colFamily != null) {
      oprot.writeFieldBegin(COL_FAMILY_FIELD_DESC);
      oprot.writeBinary(this.colFamily);
      oprot.writeFieldEnd();
    }
    if (this.colQualifier != null) {
      oprot.writeFieldBegin(COL_QUALIFIER_FIELD_DESC);
      oprot.writeBinary(this.colQualifier);
      oprot.writeFieldEnd();
    }
    if (this.colVisibility != null) {
      oprot.writeFieldBegin(COL_VISIBILITY_FIELD_DESC);
      oprot.writeBinary(this.colVisibility);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
    oprot.writeI64(this.timestamp);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TKey(");
    sb.append("row:");
    if (this.row == null) {
      sb.append("null");
    } else {
      int __row_size = Math.min(this.row.length, 128);
      for (int i = 0; i < __row_size; i++) {
        if (i != 0)
          sb.append(" ");
        sb.append(Integer.toHexString(this.row[i]).length() > 1 ? Integer.toHexString(this.row[i]).substring(Integer.toHexString(this.row[i]).length() - 2)
            .toUpperCase() : "0" + Integer.toHexString(this.row[i]).toUpperCase());
      }
      if (this.row.length > 128)
        sb.append(" ...");
    }
    sb.append(", ");
    sb.append("colFamily:");
    if (this.colFamily == null) {
      sb.append("null");
    } else {
      int __colFamily_size = Math.min(this.colFamily.length, 128);
      for (int i = 0; i < __colFamily_size; i++) {
        if (i != 0)
          sb.append(" ");
        sb.append(Integer.toHexString(this.colFamily[i]).length() > 1 ? Integer.toHexString(this.colFamily[i])
            .substring(Integer.toHexString(this.colFamily[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.colFamily[i]).toUpperCase());
      }
      if (this.colFamily.length > 128)
        sb.append(" ...");
    }
    sb.append(", ");
    sb.append("colQualifier:");
    if (this.colQualifier == null) {
      sb.append("null");
    } else {
      int __colQualifier_size = Math.min(this.colQualifier.length, 128);
      for (int i = 0; i < __colQualifier_size; i++) {
        if (i != 0)
          sb.append(" ");
        sb.append(Integer.toHexString(this.colQualifier[i]).length() > 1 ? Integer.toHexString(this.colQualifier[i])
            .substring(Integer.toHexString(this.colQualifier[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.colQualifier[i]).toUpperCase());
      }
      if (this.colQualifier.length > 128)
        sb.append(" ...");
    }
    sb.append(", ");
    sb.append("colVisibility:");
    if (this.colVisibility == null) {
      sb.append("null");
    } else {
      int __colVisibility_size = Math.min(this.colVisibility.length, 128);
      for (int i = 0; i < __colVisibility_size; i++) {
        if (i != 0)
          sb.append(" ");
        sb.append(Integer.toHexString(this.colVisibility[i]).length() > 1 ? Integer.toHexString(this.colVisibility[i])
            .substring(Integer.toHexString(this.colVisibility[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.colVisibility[i]).toUpperCase());
      }
      if (this.colVisibility.length > 128)
        sb.append(" ...");
    }
    sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    sb.append(")");
    return sb.toString();
  }
  
  public void validate() throws TException {
    // check for required fields
  }
  
}
