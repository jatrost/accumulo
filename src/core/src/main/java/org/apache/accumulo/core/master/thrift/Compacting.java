/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.accumulo.core.master.thrift;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

@SuppressWarnings("serial")
public class Compacting implements TBase<Compacting,Compacting._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Compacting");
  
  private static final TField RUNNING_FIELD_DESC = new TField("running", TType.I32, (short) 1);
  private static final TField QUEUED_FIELD_DESC = new TField("queued", TType.I32, (short) 2);
  
  public int running;
  public int queued;
  
  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    RUNNING((short) 1, "running"), QUEUED((short) 2, "queued");
    
    private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
    
    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
    
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // RUNNING
          return RUNNING;
        case 2: // QUEUED
          return QUEUED;
        default:
          return null;
      }
    }
    
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
    
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
    
    private final short _thriftId;
    private final String _fieldName;
    
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
    
    public short getThriftFieldId() {
      return _thriftId;
    }
    
    public String getFieldName() {
      return _fieldName;
    }
  }
  
  // isset id assignments
  private static final int __RUNNING_ISSET_ID = 0;
  private static final int __QUEUED_ISSET_ID = 1;
  private java.util.BitSet __isset_bit_vector = new java.util.BitSet(2);
  
  public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RUNNING, new FieldMetaData("running", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.QUEUED, new FieldMetaData("queued", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Compacting.class, metaDataMap);
  }
  
  public Compacting() {}
  
  public Compacting(int running, int queued) {
    this();
    this.running = running;
    setRunningIsSet(true);
    this.queued = queued;
    setQueuedIsSet(true);
  }
  
  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Compacting(Compacting other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.running = other.running;
    this.queued = other.queued;
  }
  
  public Compacting deepCopy() {
    return new Compacting(this);
  }
  
  @Deprecated
  public Compacting clone() {
    return new Compacting(this);
  }
  
  public int getRunning() {
    return this.running;
  }
  
  public Compacting setRunning(int running) {
    this.running = running;
    setRunningIsSet(true);
    return this;
  }
  
  public void unsetRunning() {
    __isset_bit_vector.clear(__RUNNING_ISSET_ID);
  }
  
  /** Returns true if field running is set (has been asigned a value) and false otherwise */
  public boolean isSetRunning() {
    return __isset_bit_vector.get(__RUNNING_ISSET_ID);
  }
  
  public void setRunningIsSet(boolean value) {
    __isset_bit_vector.set(__RUNNING_ISSET_ID, value);
  }
  
  public int getQueued() {
    return this.queued;
  }
  
  public Compacting setQueued(int queued) {
    this.queued = queued;
    setQueuedIsSet(true);
    return this;
  }
  
  public void unsetQueued() {
    __isset_bit_vector.clear(__QUEUED_ISSET_ID);
  }
  
  /** Returns true if field queued is set (has been asigned a value) and false otherwise */
  public boolean isSetQueued() {
    return __isset_bit_vector.get(__QUEUED_ISSET_ID);
  }
  
  public void setQueuedIsSet(boolean value) {
    __isset_bit_vector.set(__QUEUED_ISSET_ID, value);
  }
  
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case RUNNING:
        if (value == null) {
          unsetRunning();
        } else {
          setRunning((Integer) value);
        }
        break;
      
      case QUEUED:
        if (value == null) {
          unsetQueued();
        } else {
          setQueued((Integer) value);
        }
        break;
    
    }
  }
  
  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }
  
  public Object getFieldValue(_Fields field) {
    switch (field) {
      case RUNNING:
        return new Integer(getRunning());
        
      case QUEUED:
        return new Integer(getQueued());
        
    }
    throw new IllegalStateException();
  }
  
  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }
  
  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
      case RUNNING:
        return isSetRunning();
      case QUEUED:
        return isSetQueued();
    }
    throw new IllegalStateException();
  }
  
  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }
  
  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Compacting)
      return this.equals((Compacting) that);
    return false;
  }
  
  public boolean equals(Compacting that) {
    if (that == null)
      return false;
    
    boolean this_present_running = true;
    boolean that_present_running = true;
    if (this_present_running || that_present_running) {
      if (!(this_present_running && that_present_running))
        return false;
      if (this.running != that.running)
        return false;
    }
    
    boolean this_present_queued = true;
    boolean that_present_queued = true;
    if (this_present_queued || that_present_queued) {
      if (!(this_present_queued && that_present_queued))
        return false;
      if (this.queued != that.queued)
        return false;
    }
    
    return true;
  }
  
  @Override
  public int hashCode() {
    return 0;
  }
  
  public int compareTo(Compacting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }
    
    int lastComparison = 0;
    Compacting typedOther = (Compacting) other;
    
    lastComparison = Boolean.valueOf(isSetRunning()).compareTo(typedOther.isSetRunning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunning()) {
      lastComparison = TBaseHelper.compareTo(this.running, typedOther.running);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueued()).compareTo(typedOther.isSetQueued());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueued()) {
      lastComparison = TBaseHelper.compareTo(this.queued, typedOther.queued);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }
  
  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // RUNNING
          if (field.type == TType.I32) {
            this.running = iprot.readI32();
            setRunningIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // QUEUED
          if (field.type == TType.I32) {
            this.queued = iprot.readI32();
            setQueuedIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    
    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
  
  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(RUNNING_FIELD_DESC);
    oprot.writeI32(this.running);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(QUEUED_FIELD_DESC);
    oprot.writeI32(this.queued);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Compacting(");
    sb.append("running:");
    sb.append(this.running);
    sb.append(", ");
    sb.append("queued:");
    sb.append(this.queued);
    sb.append(")");
    return sb.toString();
  }
  
  public void validate() throws TException {
    // check for required fields
  }
  
}
