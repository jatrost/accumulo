/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.accumulo.core.client.impl.thrift;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class ClientService {
  
  public interface Iface {
    
    public String getRootTabletLocation() throws TException;
    
    public String getInstanceId() throws TException;
    
    public String getZooKeepers() throws TException;
    
    public String prepareBulkImport(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String dir, String tableName,
        double errPercent) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException;
    
    public void finishBulkImport(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        String lockFile, boolean disableGC) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException;
    
    public void ping(org.apache.accumulo.core.security.thrift.AuthInfo credentials) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        TException;
    
    public boolean authenticateUser(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte[] password)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public java.util.Set<String> listUsers(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public void createUser(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte[] password,
        java.util.List<byte[]> authorizations) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public void dropUser(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public void changePassword(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte[] password)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public void changeAuthorizations(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        java.util.List<byte[]> authorizations) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public java.util.List<byte[]> getUserAuthorizations(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials,
        String user) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public boolean hasSystemPermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte sysPerm)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public boolean hasTablePermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        String tableName, byte tblPerm) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException;
    
    public void grantSystemPermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte permission)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public void revokeSystemPermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        byte permission) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public void grantTablePermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        String tableName, byte permission) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException;
    
    public void revokeTablePermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        String tableName, byte permission) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException;
    
  }
  
  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }
    
    public Client(TProtocol prot) {
      this(prot, prot);
    }
    
    public Client(TProtocol iprot, TProtocol oprot) {
      iprot_ = iprot;
      oprot_ = oprot;
    }
    
    protected TProtocol iprot_;
    protected TProtocol oprot_;
    
    protected int seqid_;
    
    public TProtocol getInputProtocol() {
      return this.iprot_;
    }
    
    public TProtocol getOutputProtocol() {
      return this.oprot_;
    }
    
    public String getRootTabletLocation() throws TException {
      send_getRootTabletLocation();
      return recv_getRootTabletLocation();
    }
    
    public void send_getRootTabletLocation() throws TException {
      oprot_.writeMessageBegin(new TMessage("getRootTabletLocation", TMessageType.CALL, ++seqid_));
      getRootTabletLocation_args args = new getRootTabletLocation_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public String recv_getRootTabletLocation() throws TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getRootTabletLocation failed: out of sequence response");
      }
      getRootTabletLocation_result result = new getRootTabletLocation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getRootTabletLocation failed: unknown result");
    }
    
    public String getInstanceId() throws TException {
      send_getInstanceId();
      return recv_getInstanceId();
    }
    
    public void send_getInstanceId() throws TException {
      oprot_.writeMessageBegin(new TMessage("getInstanceId", TMessageType.CALL, ++seqid_));
      getInstanceId_args args = new getInstanceId_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public String recv_getInstanceId() throws TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getInstanceId failed: out of sequence response");
      }
      getInstanceId_result result = new getInstanceId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getInstanceId failed: unknown result");
    }
    
    public String getZooKeepers() throws TException {
      send_getZooKeepers();
      return recv_getZooKeepers();
    }
    
    public void send_getZooKeepers() throws TException {
      oprot_.writeMessageBegin(new TMessage("getZooKeepers", TMessageType.CALL, ++seqid_));
      getZooKeepers_args args = new getZooKeepers_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public String recv_getZooKeepers() throws TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getZooKeepers failed: out of sequence response");
      }
      getZooKeepers_result result = new getZooKeepers_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getZooKeepers failed: unknown result");
    }
    
    public String prepareBulkImport(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String dir, String tableName,
        double errPercent) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException {
      send_prepareBulkImport(tinfo, credentials, dir, tableName, errPercent);
      return recv_prepareBulkImport();
    }
    
    public void send_prepareBulkImport(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String dir,
        String tableName, double errPercent) throws TException {
      oprot_.writeMessageBegin(new TMessage("prepareBulkImport", TMessageType.CALL, ++seqid_));
      prepareBulkImport_args args = new prepareBulkImport_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setDir(dir);
      args.setTableName(tableName);
      args.setErrPercent(errPercent);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public String recv_prepareBulkImport() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "prepareBulkImport failed: out of sequence response");
      }
      prepareBulkImport_result result = new prepareBulkImport_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sec != null) {
        throw result.sec;
      }
      if (result.tope != null) {
        throw result.tope;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "prepareBulkImport failed: unknown result");
    }
    
    public void finishBulkImport(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        String lockFile, boolean disableGC) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException {
      send_finishBulkImport(tinfo, credentials, tableName, lockFile, disableGC);
      recv_finishBulkImport();
    }
    
    public void send_finishBulkImport(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        String lockFile, boolean disableGC) throws TException {
      oprot_.writeMessageBegin(new TMessage("finishBulkImport", TMessageType.CALL, ++seqid_));
      finishBulkImport_args args = new finishBulkImport_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setTableName(tableName);
      args.setLockFile(lockFile);
      args.setDisableGC(disableGC);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_finishBulkImport() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "finishBulkImport failed: out of sequence response");
      }
      finishBulkImport_result result = new finishBulkImport_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      if (result.tope != null) {
        throw result.tope;
      }
      return;
    }
    
    public void ping(org.apache.accumulo.core.security.thrift.AuthInfo credentials) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        TException {
      send_ping(credentials);
      recv_ping();
    }
    
    public void send_ping(org.apache.accumulo.core.security.thrift.AuthInfo credentials) throws TException {
      oprot_.writeMessageBegin(new TMessage("ping", TMessageType.CALL, ++seqid_));
      ping_args args = new ping_args();
      args.setCredentials(credentials);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_ping() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "ping failed: out of sequence response");
      }
      ping_result result = new ping_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      return;
    }
    
    public boolean authenticateUser(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte[] password)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_authenticateUser(tinfo, credentials, user, password);
      return recv_authenticateUser();
    }
    
    public void send_authenticateUser(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte[] password)
        throws TException {
      oprot_.writeMessageBegin(new TMessage("authenticateUser", TMessageType.CALL, ++seqid_));
      authenticateUser_args args = new authenticateUser_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setUser(user);
      args.setPassword(password);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public boolean recv_authenticateUser() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "authenticateUser failed: out of sequence response");
      }
      authenticateUser_result result = new authenticateUser_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sec != null) {
        throw result.sec;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "authenticateUser failed: unknown result");
    }
    
    public java.util.Set<String> listUsers(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_listUsers(tinfo, credentials);
      return recv_listUsers();
    }
    
    public void send_listUsers(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials) throws TException {
      oprot_.writeMessageBegin(new TMessage("listUsers", TMessageType.CALL, ++seqid_));
      listUsers_args args = new listUsers_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public java.util.Set<String> recv_listUsers() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listUsers failed: out of sequence response");
      }
      listUsers_result result = new listUsers_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sec != null) {
        throw result.sec;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listUsers failed: unknown result");
    }
    
    public void createUser(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte[] password,
        java.util.List<byte[]> authorizations) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_createUser(tinfo, credentials, user, password, authorizations);
      recv_createUser();
    }
    
    public void send_createUser(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte[] password,
        java.util.List<byte[]> authorizations) throws TException {
      oprot_.writeMessageBegin(new TMessage("createUser", TMessageType.CALL, ++seqid_));
      createUser_args args = new createUser_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setUser(user);
      args.setPassword(password);
      args.setAuthorizations(authorizations);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_createUser() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createUser failed: out of sequence response");
      }
      createUser_result result = new createUser_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      return;
    }
    
    public void dropUser(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_dropUser(tinfo, credentials, user);
      recv_dropUser();
    }
    
    public void send_dropUser(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user) throws TException {
      oprot_.writeMessageBegin(new TMessage("dropUser", TMessageType.CALL, ++seqid_));
      dropUser_args args = new dropUser_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setUser(user);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_dropUser() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "dropUser failed: out of sequence response");
      }
      dropUser_result result = new dropUser_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      return;
    }
    
    public void changePassword(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte[] password)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_changePassword(tinfo, credentials, user, password);
      recv_changePassword();
    }
    
    public void send_changePassword(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte[] password)
        throws TException {
      oprot_.writeMessageBegin(new TMessage("changePassword", TMessageType.CALL, ++seqid_));
      changePassword_args args = new changePassword_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setUser(user);
      args.setPassword(password);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_changePassword() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "changePassword failed: out of sequence response");
      }
      changePassword_result result = new changePassword_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      return;
    }
    
    public void changeAuthorizations(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        java.util.List<byte[]> authorizations) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_changeAuthorizations(tinfo, credentials, user, authorizations);
      recv_changeAuthorizations();
    }
    
    public void send_changeAuthorizations(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        java.util.List<byte[]> authorizations) throws TException {
      oprot_.writeMessageBegin(new TMessage("changeAuthorizations", TMessageType.CALL, ++seqid_));
      changeAuthorizations_args args = new changeAuthorizations_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setUser(user);
      args.setAuthorizations(authorizations);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_changeAuthorizations() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "changeAuthorizations failed: out of sequence response");
      }
      changeAuthorizations_result result = new changeAuthorizations_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      return;
    }
    
    public java.util.List<byte[]> getUserAuthorizations(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials,
        String user) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_getUserAuthorizations(tinfo, credentials, user);
      return recv_getUserAuthorizations();
    }
    
    public void send_getUserAuthorizations(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user)
        throws TException {
      oprot_.writeMessageBegin(new TMessage("getUserAuthorizations", TMessageType.CALL, ++seqid_));
      getUserAuthorizations_args args = new getUserAuthorizations_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setUser(user);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public java.util.List<byte[]> recv_getUserAuthorizations() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserAuthorizations failed: out of sequence response");
      }
      getUserAuthorizations_result result = new getUserAuthorizations_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sec != null) {
        throw result.sec;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserAuthorizations failed: unknown result");
    }
    
    public boolean hasSystemPermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte sysPerm)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_hasSystemPermission(tinfo, credentials, user, sysPerm);
      return recv_hasSystemPermission();
    }
    
    public void send_hasSystemPermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte sysPerm)
        throws TException {
      oprot_.writeMessageBegin(new TMessage("hasSystemPermission", TMessageType.CALL, ++seqid_));
      hasSystemPermission_args args = new hasSystemPermission_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setUser(user);
      args.setSysPerm(sysPerm);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public boolean recv_hasSystemPermission() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "hasSystemPermission failed: out of sequence response");
      }
      hasSystemPermission_result result = new hasSystemPermission_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sec != null) {
        throw result.sec;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "hasSystemPermission failed: unknown result");
    }
    
    public boolean hasTablePermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        String tableName, byte tblPerm) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException {
      send_hasTablePermission(tinfo, credentials, user, tableName, tblPerm);
      return recv_hasTablePermission();
    }
    
    public void send_hasTablePermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        String tableName, byte tblPerm) throws TException {
      oprot_.writeMessageBegin(new TMessage("hasTablePermission", TMessageType.CALL, ++seqid_));
      hasTablePermission_args args = new hasTablePermission_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setUser(user);
      args.setTableName(tableName);
      args.setTblPerm(tblPerm);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public boolean recv_hasTablePermission() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "hasTablePermission failed: out of sequence response");
      }
      hasTablePermission_result result = new hasTablePermission_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sec != null) {
        throw result.sec;
      }
      if (result.tope != null) {
        throw result.tope;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "hasTablePermission failed: unknown result");
    }
    
    public void grantSystemPermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte permission)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_grantSystemPermission(tinfo, credentials, user, permission);
      recv_grantSystemPermission();
    }
    
    public void send_grantSystemPermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        byte permission) throws TException {
      oprot_.writeMessageBegin(new TMessage("grantSystemPermission", TMessageType.CALL, ++seqid_));
      grantSystemPermission_args args = new grantSystemPermission_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setUser(user);
      args.setPermission(permission);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_grantSystemPermission() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "grantSystemPermission failed: out of sequence response");
      }
      grantSystemPermission_result result = new grantSystemPermission_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      return;
    }
    
    public void revokeSystemPermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        byte permission) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_revokeSystemPermission(tinfo, credentials, user, permission);
      recv_revokeSystemPermission();
    }
    
    public void send_revokeSystemPermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        byte permission) throws TException {
      oprot_.writeMessageBegin(new TMessage("revokeSystemPermission", TMessageType.CALL, ++seqid_));
      revokeSystemPermission_args args = new revokeSystemPermission_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setUser(user);
      args.setPermission(permission);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_revokeSystemPermission() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "revokeSystemPermission failed: out of sequence response");
      }
      revokeSystemPermission_result result = new revokeSystemPermission_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      return;
    }
    
    public void grantTablePermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        String tableName, byte permission) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException {
      send_grantTablePermission(tinfo, credentials, user, tableName, permission);
      recv_grantTablePermission();
    }
    
    public void send_grantTablePermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        String tableName, byte permission) throws TException {
      oprot_.writeMessageBegin(new TMessage("grantTablePermission", TMessageType.CALL, ++seqid_));
      grantTablePermission_args args = new grantTablePermission_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setUser(user);
      args.setTableName(tableName);
      args.setPermission(permission);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_grantTablePermission() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "grantTablePermission failed: out of sequence response");
      }
      grantTablePermission_result result = new grantTablePermission_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      if (result.tope != null) {
        throw result.tope;
      }
      return;
    }
    
    public void revokeTablePermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        String tableName, byte permission) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException {
      send_revokeTablePermission(tinfo, credentials, user, tableName, permission);
      recv_revokeTablePermission();
    }
    
    public void send_revokeTablePermission(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        String tableName, byte permission) throws TException {
      oprot_.writeMessageBegin(new TMessage("revokeTablePermission", TMessageType.CALL, ++seqid_));
      revokeTablePermission_args args = new revokeTablePermission_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setUser(user);
      args.setTableName(tableName);
      args.setPermission(permission);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_revokeTablePermission() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, ThriftTableOperationException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "revokeTablePermission failed: out of sequence response");
      }
      revokeTablePermission_result result = new revokeTablePermission_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      if (result.tope != null) {
        throw result.tope;
      }
      return;
    }
    
  }
  
  public static class Processor implements TProcessor {
    private static final org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    
    public Processor(Iface iface) {
      iface_ = iface;
      processMap_.put("getRootTabletLocation", new getRootTabletLocation());
      processMap_.put("getInstanceId", new getInstanceId());
      processMap_.put("getZooKeepers", new getZooKeepers());
      processMap_.put("prepareBulkImport", new prepareBulkImport());
      processMap_.put("finishBulkImport", new finishBulkImport());
      processMap_.put("ping", new ping());
      processMap_.put("authenticateUser", new authenticateUser());
      processMap_.put("listUsers", new listUsers());
      processMap_.put("createUser", new createUser());
      processMap_.put("dropUser", new dropUser());
      processMap_.put("changePassword", new changePassword());
      processMap_.put("changeAuthorizations", new changeAuthorizations());
      processMap_.put("getUserAuthorizations", new getUserAuthorizations());
      processMap_.put("hasSystemPermission", new hasSystemPermission());
      processMap_.put("hasTablePermission", new hasTablePermission());
      processMap_.put("grantSystemPermission", new grantSystemPermission());
      processMap_.put("revokeSystemPermission", new revokeSystemPermission());
      processMap_.put("grantTablePermission", new grantTablePermission());
      processMap_.put("revokeTablePermission", new revokeTablePermission());
    }
    
    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }
    
    private Iface iface_;
    protected final java.util.HashMap<String,ProcessFunction> processMap_ = new java.util.HashMap<String,ProcessFunction>();
    
    public boolean process(TProtocol iprot, TProtocol oprot) throws TException {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '" + msg.name + "'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }
    
    private class getRootTabletLocation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        getRootTabletLocation_args args = new getRootTabletLocation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getRootTabletLocation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getRootTabletLocation_result result = new getRootTabletLocation_result();
        result.success = iface_.getRootTabletLocation();
        oprot.writeMessageBegin(new TMessage("getRootTabletLocation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class getInstanceId implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        getInstanceId_args args = new getInstanceId_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getInstanceId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getInstanceId_result result = new getInstanceId_result();
        result.success = iface_.getInstanceId();
        oprot.writeMessageBegin(new TMessage("getInstanceId", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class getZooKeepers implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        getZooKeepers_args args = new getZooKeepers_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getZooKeepers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getZooKeepers_result result = new getZooKeepers_result();
        result.success = iface_.getZooKeepers();
        oprot.writeMessageBegin(new TMessage("getZooKeepers", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class prepareBulkImport implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        prepareBulkImport_args args = new prepareBulkImport_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("prepareBulkImport", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        prepareBulkImport_result result = new prepareBulkImport_result();
        try {
          result.success = iface_.prepareBulkImport(args.tinfo, args.credentials, args.dir, args.tableName, args.errPercent);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (ThriftTableOperationException tope) {
          result.tope = tope;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing prepareBulkImport", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing prepareBulkImport");
          oprot.writeMessageBegin(new TMessage("prepareBulkImport", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("prepareBulkImport", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class finishBulkImport implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        finishBulkImport_args args = new finishBulkImport_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("finishBulkImport", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        finishBulkImport_result result = new finishBulkImport_result();
        try {
          iface_.finishBulkImport(args.tinfo, args.credentials, args.tableName, args.lockFile, args.disableGC);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (ThriftTableOperationException tope) {
          result.tope = tope;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing finishBulkImport", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing finishBulkImport");
          oprot.writeMessageBegin(new TMessage("finishBulkImport", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("finishBulkImport", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class ping implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        ping_args args = new ping_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("ping", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        ping_result result = new ping_result();
        try {
          iface_.ping(args.credentials);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing ping", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing ping");
          oprot.writeMessageBegin(new TMessage("ping", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("ping", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class authenticateUser implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        authenticateUser_args args = new authenticateUser_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("authenticateUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        authenticateUser_result result = new authenticateUser_result();
        try {
          result.success = iface_.authenticateUser(args.tinfo, args.credentials, args.user, args.password);
          result.setSuccessIsSet(true);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing authenticateUser", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing authenticateUser");
          oprot.writeMessageBegin(new TMessage("authenticateUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("authenticateUser", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class listUsers implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        listUsers_args args = new listUsers_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listUsers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listUsers_result result = new listUsers_result();
        try {
          result.success = iface_.listUsers(args.tinfo, args.credentials);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing listUsers", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listUsers");
          oprot.writeMessageBegin(new TMessage("listUsers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listUsers", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class createUser implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        createUser_args args = new createUser_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createUser_result result = new createUser_result();
        try {
          iface_.createUser(args.tinfo, args.credentials, args.user, args.password, args.authorizations);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing createUser", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createUser");
          oprot.writeMessageBegin(new TMessage("createUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createUser", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class dropUser implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        dropUser_args args = new dropUser_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("dropUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        dropUser_result result = new dropUser_result();
        try {
          iface_.dropUser(args.tinfo, args.credentials, args.user);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing dropUser", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing dropUser");
          oprot.writeMessageBegin(new TMessage("dropUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("dropUser", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class changePassword implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        changePassword_args args = new changePassword_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("changePassword", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        changePassword_result result = new changePassword_result();
        try {
          iface_.changePassword(args.tinfo, args.credentials, args.user, args.password);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing changePassword", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing changePassword");
          oprot.writeMessageBegin(new TMessage("changePassword", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("changePassword", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class changeAuthorizations implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        changeAuthorizations_args args = new changeAuthorizations_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("changeAuthorizations", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        changeAuthorizations_result result = new changeAuthorizations_result();
        try {
          iface_.changeAuthorizations(args.tinfo, args.credentials, args.user, args.authorizations);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing changeAuthorizations", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing changeAuthorizations");
          oprot.writeMessageBegin(new TMessage("changeAuthorizations", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("changeAuthorizations", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class getUserAuthorizations implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        getUserAuthorizations_args args = new getUserAuthorizations_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserAuthorizations", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserAuthorizations_result result = new getUserAuthorizations_result();
        try {
          result.success = iface_.getUserAuthorizations(args.tinfo, args.credentials, args.user);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getUserAuthorizations", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserAuthorizations");
          oprot.writeMessageBegin(new TMessage("getUserAuthorizations", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserAuthorizations", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class hasSystemPermission implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        hasSystemPermission_args args = new hasSystemPermission_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("hasSystemPermission", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        hasSystemPermission_result result = new hasSystemPermission_result();
        try {
          result.success = iface_.hasSystemPermission(args.tinfo, args.credentials, args.user, args.sysPerm);
          result.setSuccessIsSet(true);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing hasSystemPermission", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing hasSystemPermission");
          oprot.writeMessageBegin(new TMessage("hasSystemPermission", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("hasSystemPermission", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class hasTablePermission implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        hasTablePermission_args args = new hasTablePermission_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("hasTablePermission", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        hasTablePermission_result result = new hasTablePermission_result();
        try {
          result.success = iface_.hasTablePermission(args.tinfo, args.credentials, args.user, args.tableName, args.tblPerm);
          result.setSuccessIsSet(true);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (ThriftTableOperationException tope) {
          result.tope = tope;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing hasTablePermission", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing hasTablePermission");
          oprot.writeMessageBegin(new TMessage("hasTablePermission", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("hasTablePermission", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class grantSystemPermission implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        grantSystemPermission_args args = new grantSystemPermission_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("grantSystemPermission", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        grantSystemPermission_result result = new grantSystemPermission_result();
        try {
          iface_.grantSystemPermission(args.tinfo, args.credentials, args.user, args.permission);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing grantSystemPermission", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing grantSystemPermission");
          oprot.writeMessageBegin(new TMessage("grantSystemPermission", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("grantSystemPermission", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class revokeSystemPermission implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        revokeSystemPermission_args args = new revokeSystemPermission_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("revokeSystemPermission", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        revokeSystemPermission_result result = new revokeSystemPermission_result();
        try {
          iface_.revokeSystemPermission(args.tinfo, args.credentials, args.user, args.permission);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing revokeSystemPermission", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing revokeSystemPermission");
          oprot.writeMessageBegin(new TMessage("revokeSystemPermission", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("revokeSystemPermission", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class grantTablePermission implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        grantTablePermission_args args = new grantTablePermission_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("grantTablePermission", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        grantTablePermission_result result = new grantTablePermission_result();
        try {
          iface_.grantTablePermission(args.tinfo, args.credentials, args.user, args.tableName, args.permission);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (ThriftTableOperationException tope) {
          result.tope = tope;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing grantTablePermission", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing grantTablePermission");
          oprot.writeMessageBegin(new TMessage("grantTablePermission", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("grantTablePermission", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class revokeTablePermission implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        revokeTablePermission_args args = new revokeTablePermission_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("revokeTablePermission", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        revokeTablePermission_result result = new revokeTablePermission_result();
        try {
          iface_.revokeTablePermission(args.tinfo, args.credentials, args.user, args.tableName, args.permission);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (ThriftTableOperationException tope) {
          result.tope = tope;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing revokeTablePermission", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing revokeTablePermission");
          oprot.writeMessageBegin(new TMessage("revokeTablePermission", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("revokeTablePermission", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class getRootTabletLocation_args implements TBase<getRootTabletLocation_args,getRootTabletLocation_args._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("getRootTabletLocation_args");
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ;
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getRootTabletLocation_args.class, metaDataMap);
    }
    
    public getRootTabletLocation_args() {}
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRootTabletLocation_args(getRootTabletLocation_args other) {}
    
    public getRootTabletLocation_args deepCopy() {
      return new getRootTabletLocation_args(this);
    }
    
    @Deprecated
    public getRootTabletLocation_args clone() {
      return new getRootTabletLocation_args(this);
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRootTabletLocation_args)
        return this.equals((getRootTabletLocation_args) that);
      return false;
    }
    
    public boolean equals(getRootTabletLocation_args that) {
      if (that == null)
        return false;
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(getRootTabletLocation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRootTabletLocation_args(");
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class getRootTabletLocation_result implements TBase<getRootTabletLocation_result,getRootTabletLocation_result._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("getRootTabletLocation_result");
    
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short) 0);
    
    public String success;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short) 0, "success");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getRootTabletLocation_result.class, metaDataMap);
    }
    
    public getRootTabletLocation_result() {}
    
    public getRootTabletLocation_result(String success) {
      this();
      this.success = success;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRootTabletLocation_result(getRootTabletLocation_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }
    
    public getRootTabletLocation_result deepCopy() {
      return new getRootTabletLocation_result(this);
    }
    
    @Deprecated
    public getRootTabletLocation_result clone() {
      return new getRootTabletLocation_result(this);
    }
    
    public String getSuccess() {
      return this.success;
    }
    
    public getRootTabletLocation_result setSuccess(String success) {
      this.success = success;
      return this;
    }
    
    public void unsetSuccess() {
      this.success = null;
    }
    
    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }
    
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRootTabletLocation_result)
        return this.equals((getRootTabletLocation_result) that);
      return false;
    }
    
    public boolean equals(getRootTabletLocation_result that) {
      if (that == null)
        return false;
      
      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(getRootTabletLocation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      getRootTabletLocation_result typedOther = (getRootTabletLocation_result) other;
      
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRootTabletLocation_result(");
      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class getInstanceId_args implements TBase<getInstanceId_args,getInstanceId_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("getInstanceId_args");
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ;
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getInstanceId_args.class, metaDataMap);
    }
    
    public getInstanceId_args() {}
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInstanceId_args(getInstanceId_args other) {}
    
    public getInstanceId_args deepCopy() {
      return new getInstanceId_args(this);
    }
    
    @Deprecated
    public getInstanceId_args clone() {
      return new getInstanceId_args(this);
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInstanceId_args)
        return this.equals((getInstanceId_args) that);
      return false;
    }
    
    public boolean equals(getInstanceId_args that) {
      if (that == null)
        return false;
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(getInstanceId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInstanceId_args(");
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class getInstanceId_result implements TBase<getInstanceId_result,getInstanceId_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("getInstanceId_result");
    
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short) 0);
    
    public String success;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short) 0, "success");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getInstanceId_result.class, metaDataMap);
    }
    
    public getInstanceId_result() {}
    
    public getInstanceId_result(String success) {
      this();
      this.success = success;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInstanceId_result(getInstanceId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }
    
    public getInstanceId_result deepCopy() {
      return new getInstanceId_result(this);
    }
    
    @Deprecated
    public getInstanceId_result clone() {
      return new getInstanceId_result(this);
    }
    
    public String getSuccess() {
      return this.success;
    }
    
    public getInstanceId_result setSuccess(String success) {
      this.success = success;
      return this;
    }
    
    public void unsetSuccess() {
      this.success = null;
    }
    
    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }
    
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInstanceId_result)
        return this.equals((getInstanceId_result) that);
      return false;
    }
    
    public boolean equals(getInstanceId_result that) {
      if (that == null)
        return false;
      
      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(getInstanceId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      getInstanceId_result typedOther = (getInstanceId_result) other;
      
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInstanceId_result(");
      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class getZooKeepers_args implements TBase<getZooKeepers_args,getZooKeepers_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("getZooKeepers_args");
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ;
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getZooKeepers_args.class, metaDataMap);
    }
    
    public getZooKeepers_args() {}
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getZooKeepers_args(getZooKeepers_args other) {}
    
    public getZooKeepers_args deepCopy() {
      return new getZooKeepers_args(this);
    }
    
    @Deprecated
    public getZooKeepers_args clone() {
      return new getZooKeepers_args(this);
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getZooKeepers_args)
        return this.equals((getZooKeepers_args) that);
      return false;
    }
    
    public boolean equals(getZooKeepers_args that) {
      if (that == null)
        return false;
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(getZooKeepers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getZooKeepers_args(");
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class getZooKeepers_result implements TBase<getZooKeepers_result,getZooKeepers_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("getZooKeepers_result");
    
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short) 0);
    
    public String success;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short) 0, "success");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getZooKeepers_result.class, metaDataMap);
    }
    
    public getZooKeepers_result() {}
    
    public getZooKeepers_result(String success) {
      this();
      this.success = success;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getZooKeepers_result(getZooKeepers_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }
    
    public getZooKeepers_result deepCopy() {
      return new getZooKeepers_result(this);
    }
    
    @Deprecated
    public getZooKeepers_result clone() {
      return new getZooKeepers_result(this);
    }
    
    public String getSuccess() {
      return this.success;
    }
    
    public getZooKeepers_result setSuccess(String success) {
      this.success = success;
      return this;
    }
    
    public void unsetSuccess() {
      this.success = null;
    }
    
    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }
    
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getZooKeepers_result)
        return this.equals((getZooKeepers_result) that);
      return false;
    }
    
    public boolean equals(getZooKeepers_result that) {
      if (that == null)
        return false;
      
      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(getZooKeepers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      getZooKeepers_result typedOther = (getZooKeepers_result) other;
      
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getZooKeepers_result(");
      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class prepareBulkImport_args implements TBase<prepareBulkImport_args,prepareBulkImport_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("prepareBulkImport_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 1);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 2);
    private static final TField DIR_FIELD_DESC = new TField("dir", TType.STRING, (short) 3);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 4);
    private static final TField ERR_PERCENT_FIELD_DESC = new TField("errPercent", TType.DOUBLE, (short) 5);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String dir;
    public String tableName;
    public double errPercent;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 1, "tinfo"), CREDENTIALS((short) 2, "credentials"), DIR((short) 3, "dir"), TABLE_NAME((short) 4, "tableName"), ERR_PERCENT((short) 5,
          "errPercent");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // TINFO
            return TINFO;
          case 2: // CREDENTIALS
            return CREDENTIALS;
          case 3: // DIR
            return DIR;
          case 4: // TABLE_NAME
            return TABLE_NAME;
          case 5: // ERR_PERCENT
            return ERR_PERCENT;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    private static final int __ERRPERCENT_ISSET_ID = 0;
    private java.util.BitSet __isset_bit_vector = new java.util.BitSet(1);
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.DIR, new FieldMetaData("dir", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAME, new FieldMetaData("tableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.ERR_PERCENT, new FieldMetaData("errPercent", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(prepareBulkImport_args.class, metaDataMap);
    }
    
    public prepareBulkImport_args() {}
    
    public prepareBulkImport_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String dir, String tableName,
        double errPercent) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.dir = dir;
      this.tableName = tableName;
      this.errPercent = errPercent;
      setErrPercentIsSet(true);
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prepareBulkImport_args(prepareBulkImport_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetDir()) {
        this.dir = other.dir;
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      this.errPercent = other.errPercent;
    }
    
    public prepareBulkImport_args deepCopy() {
      return new prepareBulkImport_args(this);
    }
    
    @Deprecated
    public prepareBulkImport_args clone() {
      return new prepareBulkImport_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public prepareBulkImport_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public prepareBulkImport_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getDir() {
      return this.dir;
    }
    
    public prepareBulkImport_args setDir(String dir) {
      this.dir = dir;
      return this;
    }
    
    public void unsetDir() {
      this.dir = null;
    }
    
    /** Returns true if field dir is set (has been asigned a value) and false otherwise */
    public boolean isSetDir() {
      return this.dir != null;
    }
    
    public void setDirIsSet(boolean value) {
      if (!value) {
        this.dir = null;
      }
    }
    
    public String getTableName() {
      return this.tableName;
    }
    
    public prepareBulkImport_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }
    
    public void unsetTableName() {
      this.tableName = null;
    }
    
    /** Returns true if field tableName is set (has been asigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }
    
    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }
    
    public double getErrPercent() {
      return this.errPercent;
    }
    
    public prepareBulkImport_args setErrPercent(double errPercent) {
      this.errPercent = errPercent;
      setErrPercentIsSet(true);
      return this;
    }
    
    public void unsetErrPercent() {
      __isset_bit_vector.clear(__ERRPERCENT_ISSET_ID);
    }
    
    /** Returns true if field errPercent is set (has been asigned a value) and false otherwise */
    public boolean isSetErrPercent() {
      return __isset_bit_vector.get(__ERRPERCENT_ISSET_ID);
    }
    
    public void setErrPercentIsSet(boolean value) {
      __isset_bit_vector.set(__ERRPERCENT_ISSET_ID, value);
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case DIR:
          if (value == null) {
            unsetDir();
          } else {
            setDir((String) value);
          }
          break;
        
        case TABLE_NAME:
          if (value == null) {
            unsetTableName();
          } else {
            setTableName((String) value);
          }
          break;
        
        case ERR_PERCENT:
          if (value == null) {
            unsetErrPercent();
          } else {
            setErrPercent((Double) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case DIR:
          return getDir();
          
        case TABLE_NAME:
          return getTableName();
          
        case ERR_PERCENT:
          return new Double(getErrPercent());
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case DIR:
          return isSetDir();
        case TABLE_NAME:
          return isSetTableName();
        case ERR_PERCENT:
          return isSetErrPercent();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof prepareBulkImport_args)
        return this.equals((prepareBulkImport_args) that);
      return false;
    }
    
    public boolean equals(prepareBulkImport_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_dir = true && this.isSetDir();
      boolean that_present_dir = true && that.isSetDir();
      if (this_present_dir || that_present_dir) {
        if (!(this_present_dir && that_present_dir))
          return false;
        if (!this.dir.equals(that.dir))
          return false;
      }
      
      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }
      
      boolean this_present_errPercent = true;
      boolean that_present_errPercent = true;
      if (this_present_errPercent || that_present_errPercent) {
        if (!(this_present_errPercent && that_present_errPercent))
          return false;
        if (this.errPercent != that.errPercent)
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(prepareBulkImport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      prepareBulkImport_args typedOther = (prepareBulkImport_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDir()).compareTo(typedOther.isSetDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDir()) {
        lastComparison = TBaseHelper.compareTo(this.dir, typedOther.dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErrPercent()).compareTo(typedOther.isSetErrPercent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrPercent()) {
        lastComparison = TBaseHelper.compareTo(this.errPercent, typedOther.errPercent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DIR
            if (field.type == TType.STRING) {
              this.dir = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERR_PERCENT
            if (field.type == TType.DOUBLE) {
              this.errPercent = iprot.readDouble();
              setErrPercentIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.dir != null) {
        oprot.writeFieldBegin(DIR_FIELD_DESC);
        oprot.writeString(this.dir);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ERR_PERCENT_FIELD_DESC);
      oprot.writeDouble(this.errPercent);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("prepareBulkImport_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("dir:");
      if (this.dir == null) {
        sb.append("null");
      } else {
        sb.append(this.dir);
      }
      sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      sb.append(", ");
      sb.append("errPercent:");
      sb.append(this.errPercent);
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class prepareBulkImport_result implements TBase<prepareBulkImport_result,prepareBulkImport_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("prepareBulkImport_result");
    
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short) 0);
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    private static final TField TOPE_FIELD_DESC = new TField("tope", TType.STRUCT, (short) 2);
    
    public String success;
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    public ThriftTableOperationException tope;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short) 0, "success"), SEC((short) 1, "sec"), TOPE((short) 2, "tope");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SEC
            return SEC;
          case 2: // TOPE
            return TOPE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.TOPE, new FieldMetaData("tope", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(prepareBulkImport_result.class, metaDataMap);
    }
    
    public prepareBulkImport_result() {}
    
    public prepareBulkImport_result(String success, org.apache.accumulo.core.security.thrift.ThriftSecurityException sec, ThriftTableOperationException tope) {
      this();
      this.success = success;
      this.sec = sec;
      this.tope = tope;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prepareBulkImport_result(prepareBulkImport_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
      if (other.isSetTope()) {
        this.tope = new ThriftTableOperationException(other.tope);
      }
    }
    
    public prepareBulkImport_result deepCopy() {
      return new prepareBulkImport_result(this);
    }
    
    @Deprecated
    public prepareBulkImport_result clone() {
      return new prepareBulkImport_result(this);
    }
    
    public String getSuccess() {
      return this.success;
    }
    
    public prepareBulkImport_result setSuccess(String success) {
      this.success = success;
      return this;
    }
    
    public void unsetSuccess() {
      this.success = null;
    }
    
    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }
    
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public prepareBulkImport_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public ThriftTableOperationException getTope() {
      return this.tope;
    }
    
    public prepareBulkImport_result setTope(ThriftTableOperationException tope) {
      this.tope = tope;
      return this;
    }
    
    public void unsetTope() {
      this.tope = null;
    }
    
    /** Returns true if field tope is set (has been asigned a value) and false otherwise */
    public boolean isSetTope() {
      return this.tope != null;
    }
    
    public void setTopeIsSet(boolean value) {
      if (!value) {
        this.tope = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((String) value);
          }
          break;
        
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
        
        case TOPE:
          if (value == null) {
            unsetTope();
          } else {
            setTope((ThriftTableOperationException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
          
        case SEC:
          return getSec();
          
        case TOPE:
          return getTope();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case SEC:
          return isSetSec();
        case TOPE:
          return isSetTope();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof prepareBulkImport_result)
        return this.equals((prepareBulkImport_result) that);
      return false;
    }
    
    public boolean equals(prepareBulkImport_result that) {
      if (that == null)
        return false;
      
      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      boolean this_present_tope = true && this.isSetTope();
      boolean that_present_tope = true && that.isSetTope();
      if (this_present_tope || that_present_tope) {
        if (!(this_present_tope && that_present_tope))
          return false;
        if (!this.tope.equals(that.tope))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(prepareBulkImport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      prepareBulkImport_result typedOther = (prepareBulkImport_result) other;
      
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTope()).compareTo(typedOther.isSetTope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTope()) {
        lastComparison = TBaseHelper.compareTo(this.tope, typedOther.tope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOPE
            if (field.type == TType.STRUCT) {
              this.tope = new ThriftTableOperationException();
              this.tope.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTope()) {
        oprot.writeFieldBegin(TOPE_FIELD_DESC);
        this.tope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("prepareBulkImport_result(");
      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      sb.append(", ");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(", ");
      sb.append("tope:");
      if (this.tope == null) {
        sb.append("null");
      } else {
        sb.append(this.tope);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class finishBulkImport_args implements TBase<finishBulkImport_args,finishBulkImport_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("finishBulkImport_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 1);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 2);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 3);
    private static final TField LOCK_FILE_FIELD_DESC = new TField("lockFile", TType.STRING, (short) 4);
    private static final TField DISABLE_GC_FIELD_DESC = new TField("disableGC", TType.BOOL, (short) 5);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String tableName;
    public String lockFile;
    public boolean disableGC;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 1, "tinfo"), CREDENTIALS((short) 2, "credentials"), TABLE_NAME((short) 3, "tableName"), LOCK_FILE((short) 4, "lockFile"), DISABLE_GC(
          (short) 5, "disableGC");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // TINFO
            return TINFO;
          case 2: // CREDENTIALS
            return CREDENTIALS;
          case 3: // TABLE_NAME
            return TABLE_NAME;
          case 4: // LOCK_FILE
            return LOCK_FILE;
          case 5: // DISABLE_GC
            return DISABLE_GC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    private static final int __DISABLEGC_ISSET_ID = 0;
    private java.util.BitSet __isset_bit_vector = new java.util.BitSet(1);
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.TABLE_NAME, new FieldMetaData("tableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.LOCK_FILE, new FieldMetaData("lockFile", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.DISABLE_GC, new FieldMetaData("disableGC", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(finishBulkImport_args.class, metaDataMap);
    }
    
    public finishBulkImport_args() {}
    
    public finishBulkImport_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        String lockFile, boolean disableGC) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.tableName = tableName;
      this.lockFile = lockFile;
      this.disableGC = disableGC;
      setDisableGCIsSet(true);
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public finishBulkImport_args(finishBulkImport_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetLockFile()) {
        this.lockFile = other.lockFile;
      }
      this.disableGC = other.disableGC;
    }
    
    public finishBulkImport_args deepCopy() {
      return new finishBulkImport_args(this);
    }
    
    @Deprecated
    public finishBulkImport_args clone() {
      return new finishBulkImport_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public finishBulkImport_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public finishBulkImport_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getTableName() {
      return this.tableName;
    }
    
    public finishBulkImport_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }
    
    public void unsetTableName() {
      this.tableName = null;
    }
    
    /** Returns true if field tableName is set (has been asigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }
    
    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }
    
    public String getLockFile() {
      return this.lockFile;
    }
    
    public finishBulkImport_args setLockFile(String lockFile) {
      this.lockFile = lockFile;
      return this;
    }
    
    public void unsetLockFile() {
      this.lockFile = null;
    }
    
    /** Returns true if field lockFile is set (has been asigned a value) and false otherwise */
    public boolean isSetLockFile() {
      return this.lockFile != null;
    }
    
    public void setLockFileIsSet(boolean value) {
      if (!value) {
        this.lockFile = null;
      }
    }
    
    public boolean isDisableGC() {
      return this.disableGC;
    }
    
    public finishBulkImport_args setDisableGC(boolean disableGC) {
      this.disableGC = disableGC;
      setDisableGCIsSet(true);
      return this;
    }
    
    public void unsetDisableGC() {
      __isset_bit_vector.clear(__DISABLEGC_ISSET_ID);
    }
    
    /** Returns true if field disableGC is set (has been asigned a value) and false otherwise */
    public boolean isSetDisableGC() {
      return __isset_bit_vector.get(__DISABLEGC_ISSET_ID);
    }
    
    public void setDisableGCIsSet(boolean value) {
      __isset_bit_vector.set(__DISABLEGC_ISSET_ID, value);
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case TABLE_NAME:
          if (value == null) {
            unsetTableName();
          } else {
            setTableName((String) value);
          }
          break;
        
        case LOCK_FILE:
          if (value == null) {
            unsetLockFile();
          } else {
            setLockFile((String) value);
          }
          break;
        
        case DISABLE_GC:
          if (value == null) {
            unsetDisableGC();
          } else {
            setDisableGC((Boolean) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case TABLE_NAME:
          return getTableName();
          
        case LOCK_FILE:
          return getLockFile();
          
        case DISABLE_GC:
          return new Boolean(isDisableGC());
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case TABLE_NAME:
          return isSetTableName();
        case LOCK_FILE:
          return isSetLockFile();
        case DISABLE_GC:
          return isSetDisableGC();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof finishBulkImport_args)
        return this.equals((finishBulkImport_args) that);
      return false;
    }
    
    public boolean equals(finishBulkImport_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }
      
      boolean this_present_lockFile = true && this.isSetLockFile();
      boolean that_present_lockFile = true && that.isSetLockFile();
      if (this_present_lockFile || that_present_lockFile) {
        if (!(this_present_lockFile && that_present_lockFile))
          return false;
        if (!this.lockFile.equals(that.lockFile))
          return false;
      }
      
      boolean this_present_disableGC = true;
      boolean that_present_disableGC = true;
      if (this_present_disableGC || that_present_disableGC) {
        if (!(this_present_disableGC && that_present_disableGC))
          return false;
        if (this.disableGC != that.disableGC)
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(finishBulkImport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      finishBulkImport_args typedOther = (finishBulkImport_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLockFile()).compareTo(typedOther.isSetLockFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLockFile()) {
        lastComparison = TBaseHelper.compareTo(this.lockFile, typedOther.lockFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDisableGC()).compareTo(typedOther.isSetDisableGC());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisableGC()) {
        lastComparison = TBaseHelper.compareTo(this.disableGC, typedOther.disableGC);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LOCK_FILE
            if (field.type == TType.STRING) {
              this.lockFile = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // DISABLE_GC
            if (field.type == TType.BOOL) {
              this.disableGC = iprot.readBool();
              setDisableGCIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      if (this.lockFile != null) {
        oprot.writeFieldBegin(LOCK_FILE_FIELD_DESC);
        oprot.writeString(this.lockFile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISABLE_GC_FIELD_DESC);
      oprot.writeBool(this.disableGC);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("finishBulkImport_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      sb.append(", ");
      sb.append("lockFile:");
      if (this.lockFile == null) {
        sb.append("null");
      } else {
        sb.append(this.lockFile);
      }
      sb.append(", ");
      sb.append("disableGC:");
      sb.append(this.disableGC);
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class finishBulkImport_result implements TBase<finishBulkImport_result,finishBulkImport_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("finishBulkImport_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    private static final TField TOPE_FIELD_DESC = new TField("tope", TType.STRUCT, (short) 2);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    public ThriftTableOperationException tope;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec"), TOPE((short) 2, "tope");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          case 2: // TOPE
            return TOPE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.TOPE, new FieldMetaData("tope", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(finishBulkImport_result.class, metaDataMap);
    }
    
    public finishBulkImport_result() {}
    
    public finishBulkImport_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec, ThriftTableOperationException tope) {
      this();
      this.sec = sec;
      this.tope = tope;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public finishBulkImport_result(finishBulkImport_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
      if (other.isSetTope()) {
        this.tope = new ThriftTableOperationException(other.tope);
      }
    }
    
    public finishBulkImport_result deepCopy() {
      return new finishBulkImport_result(this);
    }
    
    @Deprecated
    public finishBulkImport_result clone() {
      return new finishBulkImport_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public finishBulkImport_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public ThriftTableOperationException getTope() {
      return this.tope;
    }
    
    public finishBulkImport_result setTope(ThriftTableOperationException tope) {
      this.tope = tope;
      return this;
    }
    
    public void unsetTope() {
      this.tope = null;
    }
    
    /** Returns true if field tope is set (has been asigned a value) and false otherwise */
    public boolean isSetTope() {
      return this.tope != null;
    }
    
    public void setTopeIsSet(boolean value) {
      if (!value) {
        this.tope = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
        
        case TOPE:
          if (value == null) {
            unsetTope();
          } else {
            setTope((ThriftTableOperationException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
        case TOPE:
          return getTope();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
        case TOPE:
          return isSetTope();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof finishBulkImport_result)
        return this.equals((finishBulkImport_result) that);
      return false;
    }
    
    public boolean equals(finishBulkImport_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      boolean this_present_tope = true && this.isSetTope();
      boolean that_present_tope = true && that.isSetTope();
      if (this_present_tope || that_present_tope) {
        if (!(this_present_tope && that_present_tope))
          return false;
        if (!this.tope.equals(that.tope))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(finishBulkImport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      finishBulkImport_result typedOther = (finishBulkImport_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTope()).compareTo(typedOther.isSetTope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTope()) {
        lastComparison = TBaseHelper.compareTo(this.tope, typedOther.tope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOPE
            if (field.type == TType.STRUCT) {
              this.tope = new ThriftTableOperationException();
              this.tope.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTope()) {
        oprot.writeFieldBegin(TOPE_FIELD_DESC);
        this.tope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("finishBulkImport_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(", ");
      sb.append("tope:");
      if (this.tope == null) {
        sb.append("null");
      } else {
        sb.append(this.tope);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class ping_args implements TBase<ping_args,ping_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("ping_args");
    
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      CREDENTIALS((short) 1, "credentials");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // CREDENTIALS
            return CREDENTIALS;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }
    
    public ping_args() {}
    
    public ping_args(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this();
      this.credentials = credentials;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
    }
    
    public ping_args deepCopy() {
      return new ping_args(this);
    }
    
    @Deprecated
    public ping_args clone() {
      return new ping_args(this);
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public ping_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case CREDENTIALS:
          return getCredentials();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case CREDENTIALS:
          return isSetCredentials();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args) that);
      return false;
    }
    
    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      ping_args typedOther = (ping_args) other;
      
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class ping_result implements TBase<ping_result,ping_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("ping_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }
    
    public ping_result() {}
    
    public ping_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public ping_result deepCopy() {
      return new ping_result(this);
    }
    
    @Deprecated
    public ping_result clone() {
      return new ping_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public ping_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result) that);
      return false;
    }
    
    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      ping_result typedOther = (ping_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class authenticateUser_args implements TBase<authenticateUser_args,authenticateUser_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("authenticateUser_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 4);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short) 2);
    private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short) 3);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String user;
    public byte[] password;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 4, "tinfo"), CREDENTIALS((short) 1, "credentials"), USER((short) 2, "user"), PASSWORD((short) 3, "password");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 4: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // USER
            return USER;
          case 3: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new FieldMetaData("password", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(authenticateUser_args.class, metaDataMap);
    }
    
    public authenticateUser_args() {}
    
    public authenticateUser_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte[] password) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.user = user;
      this.password = password;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateUser_args(authenticateUser_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPassword()) {
        this.password = new byte[other.password.length];
        System.arraycopy(other.password, 0, password, 0, other.password.length);
      }
    }
    
    public authenticateUser_args deepCopy() {
      return new authenticateUser_args(this);
    }
    
    @Deprecated
    public authenticateUser_args clone() {
      return new authenticateUser_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public authenticateUser_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public authenticateUser_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getUser() {
      return this.user;
    }
    
    public authenticateUser_args setUser(String user) {
      this.user = user;
      return this;
    }
    
    public void unsetUser() {
      this.user = null;
    }
    
    /** Returns true if field user is set (has been asigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }
    
    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }
    
    public byte[] getPassword() {
      return this.password;
    }
    
    public authenticateUser_args setPassword(byte[] password) {
      this.password = password;
      return this;
    }
    
    public void unsetPassword() {
      this.password = null;
    }
    
    /** Returns true if field password is set (has been asigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }
    
    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case USER:
          if (value == null) {
            unsetUser();
          } else {
            setUser((String) value);
          }
          break;
        
        case PASSWORD:
          if (value == null) {
            unsetPassword();
          } else {
            setPassword((byte[]) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case USER:
          return getUser();
          
        case PASSWORD:
          return getPassword();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case USER:
          return isSetUser();
        case PASSWORD:
          return isSetPassword();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateUser_args)
        return this.equals((authenticateUser_args) that);
      return false;
    }
    
    public boolean equals(authenticateUser_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }
      
      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!java.util.Arrays.equals(this.password, that.password))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(authenticateUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      authenticateUser_args typedOther = (authenticateUser_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 4: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER
            if (field.type == TType.STRING) {
              this.user = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PASSWORD
            if (field.type == TType.STRING) {
              this.password = iprot.readBinary();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeBinary(this.password);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateUser_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        int __password_size = Math.min(this.password.length, 128);
        for (int i = 0; i < __password_size; i++) {
          if (i != 0)
            sb.append(" ");
          sb.append(Integer.toHexString(this.password[i]).length() > 1 ? Integer.toHexString(this.password[i])
              .substring(Integer.toHexString(this.password[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.password[i]).toUpperCase());
        }
        if (this.password.length > 128)
          sb.append(" ...");
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class authenticateUser_result implements TBase<authenticateUser_result,authenticateUser_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("authenticateUser_result");
    
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short) 0);
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public boolean success;
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short) 0, "success"), SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private java.util.BitSet __isset_bit_vector = new java.util.BitSet(1);
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(authenticateUser_result.class, metaDataMap);
    }
    
    public authenticateUser_result() {}
    
    public authenticateUser_result(boolean success, org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateUser_result(authenticateUser_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public authenticateUser_result deepCopy() {
      return new authenticateUser_result(this);
    }
    
    @Deprecated
    public authenticateUser_result clone() {
      return new authenticateUser_result(this);
    }
    
    public boolean isSuccess() {
      return this.success;
    }
    
    public authenticateUser_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }
    
    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }
    
    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }
    
    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public authenticateUser_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Boolean) value);
          }
          break;
        
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return new Boolean(isSuccess());
          
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateUser_result)
        return this.equals((authenticateUser_result) that);
      return false;
    }
    
    public boolean equals(authenticateUser_result that) {
      if (that == null)
        return false;
      
      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(authenticateUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      authenticateUser_result typedOther = (authenticateUser_result) other;
      
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateUser_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(", ");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class listUsers_args implements TBase<listUsers_args,listUsers_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("listUsers_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 2);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 2, "tinfo"), CREDENTIALS((short) 1, "credentials");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 2: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listUsers_args.class, metaDataMap);
    }
    
    public listUsers_args() {}
    
    public listUsers_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUsers_args(listUsers_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
    }
    
    public listUsers_args deepCopy() {
      return new listUsers_args(this);
    }
    
    @Deprecated
    public listUsers_args clone() {
      return new listUsers_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public listUsers_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public listUsers_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUsers_args)
        return this.equals((listUsers_args) that);
      return false;
    }
    
    public boolean equals(listUsers_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(listUsers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      listUsers_args typedOther = (listUsers_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 2: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUsers_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class listUsers_result implements TBase<listUsers_result,listUsers_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("listUsers_result");
    
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.SET, (short) 0);
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public java.util.Set<String> success;
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short) 0, "success"), SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap
          .put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new SetMetaData(TType.SET, new FieldValueMetaData(TType.STRING))));
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listUsers_result.class, metaDataMap);
    }
    
    public listUsers_result() {}
    
    public listUsers_result(java.util.Set<String> success, org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.success = success;
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUsers_result(listUsers_result other) {
      if (other.isSetSuccess()) {
        java.util.Set<String> __this__success = new java.util.HashSet<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public listUsers_result deepCopy() {
      return new listUsers_result(this);
    }
    
    @Deprecated
    public listUsers_result clone() {
      return new listUsers_result(this);
    }
    
    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }
    
    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }
    
    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new java.util.HashSet<String>();
      }
      this.success.add(elem);
    }
    
    public java.util.Set<String> getSuccess() {
      return this.success;
    }
    
    public listUsers_result setSuccess(java.util.Set<String> success) {
      this.success = success;
      return this;
    }
    
    public void unsetSuccess() {
      this.success = null;
    }
    
    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }
    
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public listUsers_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    @SuppressWarnings("unchecked")
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.util.Set<String>) value);
          }
          break;
        
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
          
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUsers_result)
        return this.equals((listUsers_result) that);
      return false;
    }
    
    public boolean equals(listUsers_result that) {
      if (that == null)
        return false;
      
      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(listUsers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      listUsers_result typedOther = (listUsers_result) other;
      
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.SET) {
              {
                TSet _set0 = iprot.readSetBegin();
                this.success = new java.util.HashSet<String>(2 * _set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1) {
                  String _elem2;
                  _elem2 = iprot.readString();
                  this.success.add(_elem2);
                }
                iprot.readSetEnd();
              }
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRING, this.success.size()));
          for (String _iter3 : this.success) {
            oprot.writeString(_iter3);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUsers_result(");
      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      sb.append(", ");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class createUser_args implements TBase<createUser_args,createUser_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("createUser_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 5);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short) 2);
    private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short) 3);
    private static final TField AUTHORIZATIONS_FIELD_DESC = new TField("authorizations", TType.LIST, (short) 4);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String user;
    public byte[] password;
    public java.util.List<byte[]> authorizations;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 5, "tinfo"), CREDENTIALS((short) 1, "credentials"), USER((short) 2, "user"), PASSWORD((short) 3, "password"), AUTHORIZATIONS((short) 4,
          "authorizations");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 5: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // USER
            return USER;
          case 3: // PASSWORD
            return PASSWORD;
          case 4: // AUTHORIZATIONS
            return AUTHORIZATIONS;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new FieldMetaData("password", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.AUTHORIZATIONS, new FieldMetaData("authorizations", TFieldRequirementType.DEFAULT, new ListMetaData(TType.LIST,
          new FieldValueMetaData(TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createUser_args.class, metaDataMap);
    }
    
    public createUser_args() {}
    
    public createUser_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte[] password,
        java.util.List<byte[]> authorizations) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.user = user;
      this.password = password;
      this.authorizations = authorizations;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUser_args(createUser_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPassword()) {
        this.password = new byte[other.password.length];
        System.arraycopy(other.password, 0, password, 0, other.password.length);
      }
      if (other.isSetAuthorizations()) {
        java.util.List<byte[]> __this__authorizations = new java.util.ArrayList<byte[]>();
        for (byte[] other_element : other.authorizations) {
          byte[] temp_binary_element = new byte[other_element.length];
          System.arraycopy(other_element, 0, temp_binary_element, 0, other_element.length);
          __this__authorizations.add(temp_binary_element);
        }
        this.authorizations = __this__authorizations;
      }
    }
    
    public createUser_args deepCopy() {
      return new createUser_args(this);
    }
    
    @Deprecated
    public createUser_args clone() {
      return new createUser_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public createUser_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public createUser_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getUser() {
      return this.user;
    }
    
    public createUser_args setUser(String user) {
      this.user = user;
      return this;
    }
    
    public void unsetUser() {
      this.user = null;
    }
    
    /** Returns true if field user is set (has been asigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }
    
    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }
    
    public byte[] getPassword() {
      return this.password;
    }
    
    public createUser_args setPassword(byte[] password) {
      this.password = password;
      return this;
    }
    
    public void unsetPassword() {
      this.password = null;
    }
    
    /** Returns true if field password is set (has been asigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }
    
    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }
    
    public int getAuthorizationsSize() {
      return (this.authorizations == null) ? 0 : this.authorizations.size();
    }
    
    public java.util.Iterator<byte[]> getAuthorizationsIterator() {
      return (this.authorizations == null) ? null : this.authorizations.iterator();
    }
    
    public void addToAuthorizations(byte[] elem) {
      if (this.authorizations == null) {
        this.authorizations = new java.util.ArrayList<byte[]>();
      }
      this.authorizations.add(elem);
    }
    
    public java.util.List<byte[]> getAuthorizations() {
      return this.authorizations;
    }
    
    public createUser_args setAuthorizations(java.util.List<byte[]> authorizations) {
      this.authorizations = authorizations;
      return this;
    }
    
    public void unsetAuthorizations() {
      this.authorizations = null;
    }
    
    /** Returns true if field authorizations is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthorizations() {
      return this.authorizations != null;
    }
    
    public void setAuthorizationsIsSet(boolean value) {
      if (!value) {
        this.authorizations = null;
      }
    }
    
    @SuppressWarnings("unchecked")
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case USER:
          if (value == null) {
            unsetUser();
          } else {
            setUser((String) value);
          }
          break;
        
        case PASSWORD:
          if (value == null) {
            unsetPassword();
          } else {
            setPassword((byte[]) value);
          }
          break;
        
        case AUTHORIZATIONS:
          if (value == null) {
            unsetAuthorizations();
          } else {
            setAuthorizations((java.util.List<byte[]>) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case USER:
          return getUser();
          
        case PASSWORD:
          return getPassword();
          
        case AUTHORIZATIONS:
          return getAuthorizations();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case USER:
          return isSetUser();
        case PASSWORD:
          return isSetPassword();
        case AUTHORIZATIONS:
          return isSetAuthorizations();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createUser_args)
        return this.equals((createUser_args) that);
      return false;
    }
    
    public boolean equals(createUser_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }
      
      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!java.util.Arrays.equals(this.password, that.password))
          return false;
      }
      
      boolean this_present_authorizations = true && this.isSetAuthorizations();
      boolean that_present_authorizations = true && that.isSetAuthorizations();
      if (this_present_authorizations || that_present_authorizations) {
        if (!(this_present_authorizations && that_present_authorizations))
          return false;
        if (!this.authorizations.equals(that.authorizations))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(createUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      createUser_args typedOther = (createUser_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorizations()).compareTo(typedOther.isSetAuthorizations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorizations()) {
        lastComparison = TBaseHelper.compareTo(this.authorizations, typedOther.authorizations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 5: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER
            if (field.type == TType.STRING) {
              this.user = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PASSWORD
            if (field.type == TType.STRING) {
              this.password = iprot.readBinary();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // AUTHORIZATIONS
            if (field.type == TType.LIST) {
              {
                TList _list4 = iprot.readListBegin();
                this.authorizations = new java.util.ArrayList<byte[]>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5) {
                  byte[] _elem6;
                  _elem6 = iprot.readBinary();
                  this.authorizations.add(_elem6);
                }
                iprot.readListEnd();
              }
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeBinary(this.password);
        oprot.writeFieldEnd();
      }
      if (this.authorizations != null) {
        oprot.writeFieldBegin(AUTHORIZATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.authorizations.size()));
          for (byte[] _iter7 : this.authorizations) {
            oprot.writeBinary(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createUser_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        int __password_size = Math.min(this.password.length, 128);
        for (int i = 0; i < __password_size; i++) {
          if (i != 0)
            sb.append(" ");
          sb.append(Integer.toHexString(this.password[i]).length() > 1 ? Integer.toHexString(this.password[i])
              .substring(Integer.toHexString(this.password[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.password[i]).toUpperCase());
        }
        if (this.password.length > 128)
          sb.append(" ...");
      }
      sb.append(", ");
      sb.append("authorizations:");
      if (this.authorizations == null) {
        sb.append("null");
      } else {
        sb.append(this.authorizations);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class createUser_result implements TBase<createUser_result,createUser_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("createUser_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createUser_result.class, metaDataMap);
    }
    
    public createUser_result() {}
    
    public createUser_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUser_result(createUser_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public createUser_result deepCopy() {
      return new createUser_result(this);
    }
    
    @Deprecated
    public createUser_result clone() {
      return new createUser_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public createUser_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createUser_result)
        return this.equals((createUser_result) that);
      return false;
    }
    
    public boolean equals(createUser_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(createUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      createUser_result typedOther = (createUser_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createUser_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class dropUser_args implements TBase<dropUser_args,dropUser_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("dropUser_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 3);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short) 2);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String user;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 3, "tinfo"), CREDENTIALS((short) 1, "credentials"), USER((short) 2, "user");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 3: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // USER
            return USER;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(dropUser_args.class, metaDataMap);
    }
    
    public dropUser_args() {}
    
    public dropUser_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.user = user;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dropUser_args(dropUser_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
    }
    
    public dropUser_args deepCopy() {
      return new dropUser_args(this);
    }
    
    @Deprecated
    public dropUser_args clone() {
      return new dropUser_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public dropUser_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public dropUser_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getUser() {
      return this.user;
    }
    
    public dropUser_args setUser(String user) {
      this.user = user;
      return this;
    }
    
    public void unsetUser() {
      this.user = null;
    }
    
    /** Returns true if field user is set (has been asigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }
    
    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case USER:
          if (value == null) {
            unsetUser();
          } else {
            setUser((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case USER:
          return getUser();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case USER:
          return isSetUser();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dropUser_args)
        return this.equals((dropUser_args) that);
      return false;
    }
    
    public boolean equals(dropUser_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(dropUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      dropUser_args typedOther = (dropUser_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 3: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER
            if (field.type == TType.STRING) {
              this.user = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dropUser_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class dropUser_result implements TBase<dropUser_result,dropUser_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("dropUser_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(dropUser_result.class, metaDataMap);
    }
    
    public dropUser_result() {}
    
    public dropUser_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dropUser_result(dropUser_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public dropUser_result deepCopy() {
      return new dropUser_result(this);
    }
    
    @Deprecated
    public dropUser_result clone() {
      return new dropUser_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public dropUser_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dropUser_result)
        return this.equals((dropUser_result) that);
      return false;
    }
    
    public boolean equals(dropUser_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(dropUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      dropUser_result typedOther = (dropUser_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dropUser_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class changePassword_args implements TBase<changePassword_args,changePassword_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("changePassword_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 4);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short) 2);
    private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short) 3);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String user;
    public byte[] password;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 4, "tinfo"), CREDENTIALS((short) 1, "credentials"), USER((short) 2, "user"), PASSWORD((short) 3, "password");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 4: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // USER
            return USER;
          case 3: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new FieldMetaData("password", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(changePassword_args.class, metaDataMap);
    }
    
    public changePassword_args() {}
    
    public changePassword_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte[] password) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.user = user;
      this.password = password;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changePassword_args(changePassword_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPassword()) {
        this.password = new byte[other.password.length];
        System.arraycopy(other.password, 0, password, 0, other.password.length);
      }
    }
    
    public changePassword_args deepCopy() {
      return new changePassword_args(this);
    }
    
    @Deprecated
    public changePassword_args clone() {
      return new changePassword_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public changePassword_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public changePassword_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getUser() {
      return this.user;
    }
    
    public changePassword_args setUser(String user) {
      this.user = user;
      return this;
    }
    
    public void unsetUser() {
      this.user = null;
    }
    
    /** Returns true if field user is set (has been asigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }
    
    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }
    
    public byte[] getPassword() {
      return this.password;
    }
    
    public changePassword_args setPassword(byte[] password) {
      this.password = password;
      return this;
    }
    
    public void unsetPassword() {
      this.password = null;
    }
    
    /** Returns true if field password is set (has been asigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }
    
    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case USER:
          if (value == null) {
            unsetUser();
          } else {
            setUser((String) value);
          }
          break;
        
        case PASSWORD:
          if (value == null) {
            unsetPassword();
          } else {
            setPassword((byte[]) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case USER:
          return getUser();
          
        case PASSWORD:
          return getPassword();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case USER:
          return isSetUser();
        case PASSWORD:
          return isSetPassword();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changePassword_args)
        return this.equals((changePassword_args) that);
      return false;
    }
    
    public boolean equals(changePassword_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }
      
      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!java.util.Arrays.equals(this.password, that.password))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(changePassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      changePassword_args typedOther = (changePassword_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 4: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER
            if (field.type == TType.STRING) {
              this.user = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PASSWORD
            if (field.type == TType.STRING) {
              this.password = iprot.readBinary();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeBinary(this.password);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changePassword_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        int __password_size = Math.min(this.password.length, 128);
        for (int i = 0; i < __password_size; i++) {
          if (i != 0)
            sb.append(" ");
          sb.append(Integer.toHexString(this.password[i]).length() > 1 ? Integer.toHexString(this.password[i])
              .substring(Integer.toHexString(this.password[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.password[i]).toUpperCase());
        }
        if (this.password.length > 128)
          sb.append(" ...");
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class changePassword_result implements TBase<changePassword_result,changePassword_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("changePassword_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(changePassword_result.class, metaDataMap);
    }
    
    public changePassword_result() {}
    
    public changePassword_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changePassword_result(changePassword_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public changePassword_result deepCopy() {
      return new changePassword_result(this);
    }
    
    @Deprecated
    public changePassword_result clone() {
      return new changePassword_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public changePassword_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changePassword_result)
        return this.equals((changePassword_result) that);
      return false;
    }
    
    public boolean equals(changePassword_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(changePassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      changePassword_result typedOther = (changePassword_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changePassword_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class changeAuthorizations_args implements TBase<changeAuthorizations_args,changeAuthorizations_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("changeAuthorizations_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 4);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short) 2);
    private static final TField AUTHORIZATIONS_FIELD_DESC = new TField("authorizations", TType.LIST, (short) 3);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String user;
    public java.util.List<byte[]> authorizations;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 4, "tinfo"), CREDENTIALS((short) 1, "credentials"), USER((short) 2, "user"), AUTHORIZATIONS((short) 3, "authorizations");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 4: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // USER
            return USER;
          case 3: // AUTHORIZATIONS
            return AUTHORIZATIONS;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.AUTHORIZATIONS, new FieldMetaData("authorizations", TFieldRequirementType.DEFAULT, new ListMetaData(TType.LIST,
          new FieldValueMetaData(TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(changeAuthorizations_args.class, metaDataMap);
    }
    
    public changeAuthorizations_args() {}
    
    public changeAuthorizations_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        java.util.List<byte[]> authorizations) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.user = user;
      this.authorizations = authorizations;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeAuthorizations_args(changeAuthorizations_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetAuthorizations()) {
        java.util.List<byte[]> __this__authorizations = new java.util.ArrayList<byte[]>();
        for (byte[] other_element : other.authorizations) {
          byte[] temp_binary_element = new byte[other_element.length];
          System.arraycopy(other_element, 0, temp_binary_element, 0, other_element.length);
          __this__authorizations.add(temp_binary_element);
        }
        this.authorizations = __this__authorizations;
      }
    }
    
    public changeAuthorizations_args deepCopy() {
      return new changeAuthorizations_args(this);
    }
    
    @Deprecated
    public changeAuthorizations_args clone() {
      return new changeAuthorizations_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public changeAuthorizations_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public changeAuthorizations_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getUser() {
      return this.user;
    }
    
    public changeAuthorizations_args setUser(String user) {
      this.user = user;
      return this;
    }
    
    public void unsetUser() {
      this.user = null;
    }
    
    /** Returns true if field user is set (has been asigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }
    
    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }
    
    public int getAuthorizationsSize() {
      return (this.authorizations == null) ? 0 : this.authorizations.size();
    }
    
    public java.util.Iterator<byte[]> getAuthorizationsIterator() {
      return (this.authorizations == null) ? null : this.authorizations.iterator();
    }
    
    public void addToAuthorizations(byte[] elem) {
      if (this.authorizations == null) {
        this.authorizations = new java.util.ArrayList<byte[]>();
      }
      this.authorizations.add(elem);
    }
    
    public java.util.List<byte[]> getAuthorizations() {
      return this.authorizations;
    }
    
    public changeAuthorizations_args setAuthorizations(java.util.List<byte[]> authorizations) {
      this.authorizations = authorizations;
      return this;
    }
    
    public void unsetAuthorizations() {
      this.authorizations = null;
    }
    
    /** Returns true if field authorizations is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthorizations() {
      return this.authorizations != null;
    }
    
    public void setAuthorizationsIsSet(boolean value) {
      if (!value) {
        this.authorizations = null;
      }
    }
    
    @SuppressWarnings("unchecked")
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case USER:
          if (value == null) {
            unsetUser();
          } else {
            setUser((String) value);
          }
          break;
        
        case AUTHORIZATIONS:
          if (value == null) {
            unsetAuthorizations();
          } else {
            setAuthorizations((java.util.List<byte[]>) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case USER:
          return getUser();
          
        case AUTHORIZATIONS:
          return getAuthorizations();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case USER:
          return isSetUser();
        case AUTHORIZATIONS:
          return isSetAuthorizations();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeAuthorizations_args)
        return this.equals((changeAuthorizations_args) that);
      return false;
    }
    
    public boolean equals(changeAuthorizations_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }
      
      boolean this_present_authorizations = true && this.isSetAuthorizations();
      boolean that_present_authorizations = true && that.isSetAuthorizations();
      if (this_present_authorizations || that_present_authorizations) {
        if (!(this_present_authorizations && that_present_authorizations))
          return false;
        if (!this.authorizations.equals(that.authorizations))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(changeAuthorizations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      changeAuthorizations_args typedOther = (changeAuthorizations_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthorizations()).compareTo(typedOther.isSetAuthorizations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthorizations()) {
        lastComparison = TBaseHelper.compareTo(this.authorizations, typedOther.authorizations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 4: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER
            if (field.type == TType.STRING) {
              this.user = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // AUTHORIZATIONS
            if (field.type == TType.LIST) {
              {
                TList _list8 = iprot.readListBegin();
                this.authorizations = new java.util.ArrayList<byte[]>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9) {
                  byte[] _elem10;
                  _elem10 = iprot.readBinary();
                  this.authorizations.add(_elem10);
                }
                iprot.readListEnd();
              }
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      if (this.authorizations != null) {
        oprot.writeFieldBegin(AUTHORIZATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.authorizations.size()));
          for (byte[] _iter11 : this.authorizations) {
            oprot.writeBinary(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeAuthorizations_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      sb.append(", ");
      sb.append("authorizations:");
      if (this.authorizations == null) {
        sb.append("null");
      } else {
        sb.append(this.authorizations);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class changeAuthorizations_result implements TBase<changeAuthorizations_result,changeAuthorizations_result._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("changeAuthorizations_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(changeAuthorizations_result.class, metaDataMap);
    }
    
    public changeAuthorizations_result() {}
    
    public changeAuthorizations_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeAuthorizations_result(changeAuthorizations_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public changeAuthorizations_result deepCopy() {
      return new changeAuthorizations_result(this);
    }
    
    @Deprecated
    public changeAuthorizations_result clone() {
      return new changeAuthorizations_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public changeAuthorizations_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeAuthorizations_result)
        return this.equals((changeAuthorizations_result) that);
      return false;
    }
    
    public boolean equals(changeAuthorizations_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(changeAuthorizations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      changeAuthorizations_result typedOther = (changeAuthorizations_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeAuthorizations_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class getUserAuthorizations_args implements TBase<getUserAuthorizations_args,getUserAuthorizations_args._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("getUserAuthorizations_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 3);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short) 2);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String user;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 3, "tinfo"), CREDENTIALS((short) 1, "credentials"), USER((short) 2, "user");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 3: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // USER
            return USER;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getUserAuthorizations_args.class, metaDataMap);
    }
    
    public getUserAuthorizations_args() {}
    
    public getUserAuthorizations_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.user = user;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserAuthorizations_args(getUserAuthorizations_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
    }
    
    public getUserAuthorizations_args deepCopy() {
      return new getUserAuthorizations_args(this);
    }
    
    @Deprecated
    public getUserAuthorizations_args clone() {
      return new getUserAuthorizations_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public getUserAuthorizations_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public getUserAuthorizations_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getUser() {
      return this.user;
    }
    
    public getUserAuthorizations_args setUser(String user) {
      this.user = user;
      return this;
    }
    
    public void unsetUser() {
      this.user = null;
    }
    
    /** Returns true if field user is set (has been asigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }
    
    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case USER:
          if (value == null) {
            unsetUser();
          } else {
            setUser((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case USER:
          return getUser();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case USER:
          return isSetUser();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserAuthorizations_args)
        return this.equals((getUserAuthorizations_args) that);
      return false;
    }
    
    public boolean equals(getUserAuthorizations_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(getUserAuthorizations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      getUserAuthorizations_args typedOther = (getUserAuthorizations_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 3: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER
            if (field.type == TType.STRING) {
              this.user = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserAuthorizations_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class getUserAuthorizations_result implements TBase<getUserAuthorizations_result,getUserAuthorizations_result._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("getUserAuthorizations_result");
    
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short) 0);
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public java.util.List<byte[]> success;
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short) 0, "success"), SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
          new ListMetaData(TType.LIST, new FieldValueMetaData(TType.STRING))));
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getUserAuthorizations_result.class, metaDataMap);
    }
    
    public getUserAuthorizations_result() {}
    
    public getUserAuthorizations_result(java.util.List<byte[]> success, org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.success = success;
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserAuthorizations_result(getUserAuthorizations_result other) {
      if (other.isSetSuccess()) {
        java.util.List<byte[]> __this__success = new java.util.ArrayList<byte[]>();
        for (byte[] other_element : other.success) {
          byte[] temp_binary_element = new byte[other_element.length];
          System.arraycopy(other_element, 0, temp_binary_element, 0, other_element.length);
          __this__success.add(temp_binary_element);
        }
        this.success = __this__success;
      }
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public getUserAuthorizations_result deepCopy() {
      return new getUserAuthorizations_result(this);
    }
    
    @Deprecated
    public getUserAuthorizations_result clone() {
      return new getUserAuthorizations_result(this);
    }
    
    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }
    
    public java.util.Iterator<byte[]> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }
    
    public void addToSuccess(byte[] elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<byte[]>();
      }
      this.success.add(elem);
    }
    
    public java.util.List<byte[]> getSuccess() {
      return this.success;
    }
    
    public getUserAuthorizations_result setSuccess(java.util.List<byte[]> success) {
      this.success = success;
      return this;
    }
    
    public void unsetSuccess() {
      this.success = null;
    }
    
    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }
    
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public getUserAuthorizations_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    @SuppressWarnings("unchecked")
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.util.List<byte[]>) value);
          }
          break;
        
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
          
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserAuthorizations_result)
        return this.equals((getUserAuthorizations_result) that);
      return false;
    }
    
    public boolean equals(getUserAuthorizations_result that) {
      if (that == null)
        return false;
      
      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(getUserAuthorizations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      getUserAuthorizations_result typedOther = (getUserAuthorizations_result) other;
      
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list12 = iprot.readListBegin();
                this.success = new java.util.ArrayList<byte[]>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13) {
                  byte[] _elem14;
                  _elem14 = iprot.readBinary();
                  this.success.add(_elem14);
                }
                iprot.readListEnd();
              }
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (byte[] _iter15 : this.success) {
            oprot.writeBinary(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserAuthorizations_result(");
      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      sb.append(", ");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class hasSystemPermission_args implements TBase<hasSystemPermission_args,hasSystemPermission_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("hasSystemPermission_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 4);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short) 2);
    private static final TField SYS_PERM_FIELD_DESC = new TField("sysPerm", TType.BYTE, (short) 3);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String user;
    public byte sysPerm;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 4, "tinfo"), CREDENTIALS((short) 1, "credentials"), USER((short) 2, "user"), SYS_PERM((short) 3, "sysPerm");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 4: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // USER
            return USER;
          case 3: // SYS_PERM
            return SYS_PERM;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    private static final int __SYSPERM_ISSET_ID = 0;
    private java.util.BitSet __isset_bit_vector = new java.util.BitSet(1);
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.SYS_PERM, new FieldMetaData("sysPerm", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(hasSystemPermission_args.class, metaDataMap);
    }
    
    public hasSystemPermission_args() {}
    
    public hasSystemPermission_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte sysPerm) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.user = user;
      this.sysPerm = sysPerm;
      setSysPermIsSet(true);
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hasSystemPermission_args(hasSystemPermission_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      this.sysPerm = other.sysPerm;
    }
    
    public hasSystemPermission_args deepCopy() {
      return new hasSystemPermission_args(this);
    }
    
    @Deprecated
    public hasSystemPermission_args clone() {
      return new hasSystemPermission_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public hasSystemPermission_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public hasSystemPermission_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getUser() {
      return this.user;
    }
    
    public hasSystemPermission_args setUser(String user) {
      this.user = user;
      return this;
    }
    
    public void unsetUser() {
      this.user = null;
    }
    
    /** Returns true if field user is set (has been asigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }
    
    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }
    
    public byte getSysPerm() {
      return this.sysPerm;
    }
    
    public hasSystemPermission_args setSysPerm(byte sysPerm) {
      this.sysPerm = sysPerm;
      setSysPermIsSet(true);
      return this;
    }
    
    public void unsetSysPerm() {
      __isset_bit_vector.clear(__SYSPERM_ISSET_ID);
    }
    
    /** Returns true if field sysPerm is set (has been asigned a value) and false otherwise */
    public boolean isSetSysPerm() {
      return __isset_bit_vector.get(__SYSPERM_ISSET_ID);
    }
    
    public void setSysPermIsSet(boolean value) {
      __isset_bit_vector.set(__SYSPERM_ISSET_ID, value);
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case USER:
          if (value == null) {
            unsetUser();
          } else {
            setUser((String) value);
          }
          break;
        
        case SYS_PERM:
          if (value == null) {
            unsetSysPerm();
          } else {
            setSysPerm((Byte) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case USER:
          return getUser();
          
        case SYS_PERM:
          return new Byte(getSysPerm());
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case USER:
          return isSetUser();
        case SYS_PERM:
          return isSetSysPerm();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hasSystemPermission_args)
        return this.equals((hasSystemPermission_args) that);
      return false;
    }
    
    public boolean equals(hasSystemPermission_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }
      
      boolean this_present_sysPerm = true;
      boolean that_present_sysPerm = true;
      if (this_present_sysPerm || that_present_sysPerm) {
        if (!(this_present_sysPerm && that_present_sysPerm))
          return false;
        if (this.sysPerm != that.sysPerm)
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(hasSystemPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      hasSystemPermission_args typedOther = (hasSystemPermission_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSysPerm()).compareTo(typedOther.isSetSysPerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSysPerm()) {
        lastComparison = TBaseHelper.compareTo(this.sysPerm, typedOther.sysPerm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 4: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER
            if (field.type == TType.STRING) {
              this.user = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYS_PERM
            if (field.type == TType.BYTE) {
              this.sysPerm = iprot.readByte();
              setSysPermIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SYS_PERM_FIELD_DESC);
      oprot.writeByte(this.sysPerm);
      oprot.writeFieldEnd();
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hasSystemPermission_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      sb.append(", ");
      sb.append("sysPerm:");
      sb.append(this.sysPerm);
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class hasSystemPermission_result implements TBase<hasSystemPermission_result,hasSystemPermission_result._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("hasSystemPermission_result");
    
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short) 0);
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public boolean success;
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short) 0, "success"), SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private java.util.BitSet __isset_bit_vector = new java.util.BitSet(1);
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(hasSystemPermission_result.class, metaDataMap);
    }
    
    public hasSystemPermission_result() {}
    
    public hasSystemPermission_result(boolean success, org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hasSystemPermission_result(hasSystemPermission_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public hasSystemPermission_result deepCopy() {
      return new hasSystemPermission_result(this);
    }
    
    @Deprecated
    public hasSystemPermission_result clone() {
      return new hasSystemPermission_result(this);
    }
    
    public boolean isSuccess() {
      return this.success;
    }
    
    public hasSystemPermission_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }
    
    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }
    
    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }
    
    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public hasSystemPermission_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Boolean) value);
          }
          break;
        
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return new Boolean(isSuccess());
          
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hasSystemPermission_result)
        return this.equals((hasSystemPermission_result) that);
      return false;
    }
    
    public boolean equals(hasSystemPermission_result that) {
      if (that == null)
        return false;
      
      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(hasSystemPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      hasSystemPermission_result typedOther = (hasSystemPermission_result) other;
      
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hasSystemPermission_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(", ");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class hasTablePermission_args implements TBase<hasTablePermission_args,hasTablePermission_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("hasTablePermission_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 5);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short) 2);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 3);
    private static final TField TBL_PERM_FIELD_DESC = new TField("tblPerm", TType.BYTE, (short) 4);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String user;
    public String tableName;
    public byte tblPerm;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 5, "tinfo"), CREDENTIALS((short) 1, "credentials"), USER((short) 2, "user"), TABLE_NAME((short) 3, "tableName"), TBL_PERM((short) 4,
          "tblPerm");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 5: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // USER
            return USER;
          case 3: // TABLE_NAME
            return TABLE_NAME;
          case 4: // TBL_PERM
            return TBL_PERM;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    private static final int __TBLPERM_ISSET_ID = 0;
    private java.util.BitSet __isset_bit_vector = new java.util.BitSet(1);
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAME, new FieldMetaData("tableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TBL_PERM, new FieldMetaData("tblPerm", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(hasTablePermission_args.class, metaDataMap);
    }
    
    public hasTablePermission_args() {}
    
    public hasTablePermission_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, String tableName,
        byte tblPerm) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.user = user;
      this.tableName = tableName;
      this.tblPerm = tblPerm;
      setTblPermIsSet(true);
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hasTablePermission_args(hasTablePermission_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      this.tblPerm = other.tblPerm;
    }
    
    public hasTablePermission_args deepCopy() {
      return new hasTablePermission_args(this);
    }
    
    @Deprecated
    public hasTablePermission_args clone() {
      return new hasTablePermission_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public hasTablePermission_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public hasTablePermission_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getUser() {
      return this.user;
    }
    
    public hasTablePermission_args setUser(String user) {
      this.user = user;
      return this;
    }
    
    public void unsetUser() {
      this.user = null;
    }
    
    /** Returns true if field user is set (has been asigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }
    
    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }
    
    public String getTableName() {
      return this.tableName;
    }
    
    public hasTablePermission_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }
    
    public void unsetTableName() {
      this.tableName = null;
    }
    
    /** Returns true if field tableName is set (has been asigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }
    
    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }
    
    public byte getTblPerm() {
      return this.tblPerm;
    }
    
    public hasTablePermission_args setTblPerm(byte tblPerm) {
      this.tblPerm = tblPerm;
      setTblPermIsSet(true);
      return this;
    }
    
    public void unsetTblPerm() {
      __isset_bit_vector.clear(__TBLPERM_ISSET_ID);
    }
    
    /** Returns true if field tblPerm is set (has been asigned a value) and false otherwise */
    public boolean isSetTblPerm() {
      return __isset_bit_vector.get(__TBLPERM_ISSET_ID);
    }
    
    public void setTblPermIsSet(boolean value) {
      __isset_bit_vector.set(__TBLPERM_ISSET_ID, value);
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case USER:
          if (value == null) {
            unsetUser();
          } else {
            setUser((String) value);
          }
          break;
        
        case TABLE_NAME:
          if (value == null) {
            unsetTableName();
          } else {
            setTableName((String) value);
          }
          break;
        
        case TBL_PERM:
          if (value == null) {
            unsetTblPerm();
          } else {
            setTblPerm((Byte) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case USER:
          return getUser();
          
        case TABLE_NAME:
          return getTableName();
          
        case TBL_PERM:
          return new Byte(getTblPerm());
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case USER:
          return isSetUser();
        case TABLE_NAME:
          return isSetTableName();
        case TBL_PERM:
          return isSetTblPerm();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hasTablePermission_args)
        return this.equals((hasTablePermission_args) that);
      return false;
    }
    
    public boolean equals(hasTablePermission_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }
      
      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }
      
      boolean this_present_tblPerm = true;
      boolean that_present_tblPerm = true;
      if (this_present_tblPerm || that_present_tblPerm) {
        if (!(this_present_tblPerm && that_present_tblPerm))
          return false;
        if (this.tblPerm != that.tblPerm)
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(hasTablePermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      hasTablePermission_args typedOther = (hasTablePermission_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTblPerm()).compareTo(typedOther.isSetTblPerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTblPerm()) {
        lastComparison = TBaseHelper.compareTo(this.tblPerm, typedOther.tblPerm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 5: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER
            if (field.type == TType.STRING) {
              this.user = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // TBL_PERM
            if (field.type == TType.BYTE) {
              this.tblPerm = iprot.readByte();
              setTblPermIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TBL_PERM_FIELD_DESC);
      oprot.writeByte(this.tblPerm);
      oprot.writeFieldEnd();
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hasTablePermission_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      sb.append(", ");
      sb.append("tblPerm:");
      sb.append(this.tblPerm);
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class hasTablePermission_result implements TBase<hasTablePermission_result,hasTablePermission_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("hasTablePermission_result");
    
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short) 0);
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    private static final TField TOPE_FIELD_DESC = new TField("tope", TType.STRUCT, (short) 2);
    
    public boolean success;
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    public ThriftTableOperationException tope;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short) 0, "success"), SEC((short) 1, "sec"), TOPE((short) 2, "tope");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SEC
            return SEC;
          case 2: // TOPE
            return TOPE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private java.util.BitSet __isset_bit_vector = new java.util.BitSet(1);
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.BOOL)));
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.TOPE, new FieldMetaData("tope", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(hasTablePermission_result.class, metaDataMap);
    }
    
    public hasTablePermission_result() {}
    
    public hasTablePermission_result(boolean success, org.apache.accumulo.core.security.thrift.ThriftSecurityException sec, ThriftTableOperationException tope) {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sec = sec;
      this.tope = tope;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hasTablePermission_result(hasTablePermission_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
      if (other.isSetTope()) {
        this.tope = new ThriftTableOperationException(other.tope);
      }
    }
    
    public hasTablePermission_result deepCopy() {
      return new hasTablePermission_result(this);
    }
    
    @Deprecated
    public hasTablePermission_result clone() {
      return new hasTablePermission_result(this);
    }
    
    public boolean isSuccess() {
      return this.success;
    }
    
    public hasTablePermission_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }
    
    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }
    
    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }
    
    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public hasTablePermission_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public ThriftTableOperationException getTope() {
      return this.tope;
    }
    
    public hasTablePermission_result setTope(ThriftTableOperationException tope) {
      this.tope = tope;
      return this;
    }
    
    public void unsetTope() {
      this.tope = null;
    }
    
    /** Returns true if field tope is set (has been asigned a value) and false otherwise */
    public boolean isSetTope() {
      return this.tope != null;
    }
    
    public void setTopeIsSet(boolean value) {
      if (!value) {
        this.tope = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((Boolean) value);
          }
          break;
        
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
        
        case TOPE:
          if (value == null) {
            unsetTope();
          } else {
            setTope((ThriftTableOperationException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return new Boolean(isSuccess());
          
        case SEC:
          return getSec();
          
        case TOPE:
          return getTope();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case SEC:
          return isSetSec();
        case TOPE:
          return isSetTope();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hasTablePermission_result)
        return this.equals((hasTablePermission_result) that);
      return false;
    }
    
    public boolean equals(hasTablePermission_result that) {
      if (that == null)
        return false;
      
      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      boolean this_present_tope = true && this.isSetTope();
      boolean that_present_tope = true && that.isSetTope();
      if (this_present_tope || that_present_tope) {
        if (!(this_present_tope && that_present_tope))
          return false;
        if (!this.tope.equals(that.tope))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(hasTablePermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      hasTablePermission_result typedOther = (hasTablePermission_result) other;
      
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTope()).compareTo(typedOther.isSetTope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTope()) {
        lastComparison = TBaseHelper.compareTo(this.tope, typedOther.tope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOPE
            if (field.type == TType.STRUCT) {
              this.tope = new ThriftTableOperationException();
              this.tope.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTope()) {
        oprot.writeFieldBegin(TOPE_FIELD_DESC);
        this.tope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hasTablePermission_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(", ");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(", ");
      sb.append("tope:");
      if (this.tope == null) {
        sb.append("null");
      } else {
        sb.append(this.tope);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class grantSystemPermission_args implements TBase<grantSystemPermission_args,grantSystemPermission_args._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("grantSystemPermission_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 4);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short) 2);
    private static final TField PERMISSION_FIELD_DESC = new TField("permission", TType.BYTE, (short) 3);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String user;
    public byte permission;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 4, "tinfo"), CREDENTIALS((short) 1, "credentials"), USER((short) 2, "user"), PERMISSION((short) 3, "permission");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 4: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // USER
            return USER;
          case 3: // PERMISSION
            return PERMISSION;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    private static final int __PERMISSION_ISSET_ID = 0;
    private java.util.BitSet __isset_bit_vector = new java.util.BitSet(1);
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PERMISSION, new FieldMetaData("permission", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(grantSystemPermission_args.class, metaDataMap);
    }
    
    public grantSystemPermission_args() {}
    
    public grantSystemPermission_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user, byte permission) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.user = user;
      this.permission = permission;
      setPermissionIsSet(true);
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grantSystemPermission_args(grantSystemPermission_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      this.permission = other.permission;
    }
    
    public grantSystemPermission_args deepCopy() {
      return new grantSystemPermission_args(this);
    }
    
    @Deprecated
    public grantSystemPermission_args clone() {
      return new grantSystemPermission_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public grantSystemPermission_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public grantSystemPermission_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getUser() {
      return this.user;
    }
    
    public grantSystemPermission_args setUser(String user) {
      this.user = user;
      return this;
    }
    
    public void unsetUser() {
      this.user = null;
    }
    
    /** Returns true if field user is set (has been asigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }
    
    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }
    
    public byte getPermission() {
      return this.permission;
    }
    
    public grantSystemPermission_args setPermission(byte permission) {
      this.permission = permission;
      setPermissionIsSet(true);
      return this;
    }
    
    public void unsetPermission() {
      __isset_bit_vector.clear(__PERMISSION_ISSET_ID);
    }
    
    /** Returns true if field permission is set (has been asigned a value) and false otherwise */
    public boolean isSetPermission() {
      return __isset_bit_vector.get(__PERMISSION_ISSET_ID);
    }
    
    public void setPermissionIsSet(boolean value) {
      __isset_bit_vector.set(__PERMISSION_ISSET_ID, value);
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case USER:
          if (value == null) {
            unsetUser();
          } else {
            setUser((String) value);
          }
          break;
        
        case PERMISSION:
          if (value == null) {
            unsetPermission();
          } else {
            setPermission((Byte) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case USER:
          return getUser();
          
        case PERMISSION:
          return new Byte(getPermission());
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case USER:
          return isSetUser();
        case PERMISSION:
          return isSetPermission();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grantSystemPermission_args)
        return this.equals((grantSystemPermission_args) that);
      return false;
    }
    
    public boolean equals(grantSystemPermission_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }
      
      boolean this_present_permission = true;
      boolean that_present_permission = true;
      if (this_present_permission || that_present_permission) {
        if (!(this_present_permission && that_present_permission))
          return false;
        if (this.permission != that.permission)
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(grantSystemPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      grantSystemPermission_args typedOther = (grantSystemPermission_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPermission()).compareTo(typedOther.isSetPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPermission()) {
        lastComparison = TBaseHelper.compareTo(this.permission, typedOther.permission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 4: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER
            if (field.type == TType.STRING) {
              this.user = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PERMISSION
            if (field.type == TType.BYTE) {
              this.permission = iprot.readByte();
              setPermissionIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PERMISSION_FIELD_DESC);
      oprot.writeByte(this.permission);
      oprot.writeFieldEnd();
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grantSystemPermission_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      sb.append(", ");
      sb.append("permission:");
      sb.append(this.permission);
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class grantSystemPermission_result implements TBase<grantSystemPermission_result,grantSystemPermission_result._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("grantSystemPermission_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(grantSystemPermission_result.class, metaDataMap);
    }
    
    public grantSystemPermission_result() {}
    
    public grantSystemPermission_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grantSystemPermission_result(grantSystemPermission_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public grantSystemPermission_result deepCopy() {
      return new grantSystemPermission_result(this);
    }
    
    @Deprecated
    public grantSystemPermission_result clone() {
      return new grantSystemPermission_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public grantSystemPermission_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grantSystemPermission_result)
        return this.equals((grantSystemPermission_result) that);
      return false;
    }
    
    public boolean equals(grantSystemPermission_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(grantSystemPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      grantSystemPermission_result typedOther = (grantSystemPermission_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grantSystemPermission_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class revokeSystemPermission_args implements TBase<revokeSystemPermission_args,revokeSystemPermission_args._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("revokeSystemPermission_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 4);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short) 2);
    private static final TField PERMISSION_FIELD_DESC = new TField("permission", TType.BYTE, (short) 3);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String user;
    public byte permission;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 4, "tinfo"), CREDENTIALS((short) 1, "credentials"), USER((short) 2, "user"), PERMISSION((short) 3, "permission");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 4: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // USER
            return USER;
          case 3: // PERMISSION
            return PERMISSION;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    private static final int __PERMISSION_ISSET_ID = 0;
    private java.util.BitSet __isset_bit_vector = new java.util.BitSet(1);
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PERMISSION, new FieldMetaData("permission", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(revokeSystemPermission_args.class, metaDataMap);
    }
    
    public revokeSystemPermission_args() {}
    
    public revokeSystemPermission_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        byte permission) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.user = user;
      this.permission = permission;
      setPermissionIsSet(true);
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revokeSystemPermission_args(revokeSystemPermission_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      this.permission = other.permission;
    }
    
    public revokeSystemPermission_args deepCopy() {
      return new revokeSystemPermission_args(this);
    }
    
    @Deprecated
    public revokeSystemPermission_args clone() {
      return new revokeSystemPermission_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public revokeSystemPermission_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public revokeSystemPermission_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getUser() {
      return this.user;
    }
    
    public revokeSystemPermission_args setUser(String user) {
      this.user = user;
      return this;
    }
    
    public void unsetUser() {
      this.user = null;
    }
    
    /** Returns true if field user is set (has been asigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }
    
    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }
    
    public byte getPermission() {
      return this.permission;
    }
    
    public revokeSystemPermission_args setPermission(byte permission) {
      this.permission = permission;
      setPermissionIsSet(true);
      return this;
    }
    
    public void unsetPermission() {
      __isset_bit_vector.clear(__PERMISSION_ISSET_ID);
    }
    
    /** Returns true if field permission is set (has been asigned a value) and false otherwise */
    public boolean isSetPermission() {
      return __isset_bit_vector.get(__PERMISSION_ISSET_ID);
    }
    
    public void setPermissionIsSet(boolean value) {
      __isset_bit_vector.set(__PERMISSION_ISSET_ID, value);
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case USER:
          if (value == null) {
            unsetUser();
          } else {
            setUser((String) value);
          }
          break;
        
        case PERMISSION:
          if (value == null) {
            unsetPermission();
          } else {
            setPermission((Byte) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case USER:
          return getUser();
          
        case PERMISSION:
          return new Byte(getPermission());
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case USER:
          return isSetUser();
        case PERMISSION:
          return isSetPermission();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revokeSystemPermission_args)
        return this.equals((revokeSystemPermission_args) that);
      return false;
    }
    
    public boolean equals(revokeSystemPermission_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }
      
      boolean this_present_permission = true;
      boolean that_present_permission = true;
      if (this_present_permission || that_present_permission) {
        if (!(this_present_permission && that_present_permission))
          return false;
        if (this.permission != that.permission)
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(revokeSystemPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      revokeSystemPermission_args typedOther = (revokeSystemPermission_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPermission()).compareTo(typedOther.isSetPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPermission()) {
        lastComparison = TBaseHelper.compareTo(this.permission, typedOther.permission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 4: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER
            if (field.type == TType.STRING) {
              this.user = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PERMISSION
            if (field.type == TType.BYTE) {
              this.permission = iprot.readByte();
              setPermissionIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PERMISSION_FIELD_DESC);
      oprot.writeByte(this.permission);
      oprot.writeFieldEnd();
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revokeSystemPermission_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      sb.append(", ");
      sb.append("permission:");
      sb.append(this.permission);
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class revokeSystemPermission_result implements TBase<revokeSystemPermission_result,revokeSystemPermission_result._Fields>,
      java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("revokeSystemPermission_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(revokeSystemPermission_result.class, metaDataMap);
    }
    
    public revokeSystemPermission_result() {}
    
    public revokeSystemPermission_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revokeSystemPermission_result(revokeSystemPermission_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public revokeSystemPermission_result deepCopy() {
      return new revokeSystemPermission_result(this);
    }
    
    @Deprecated
    public revokeSystemPermission_result clone() {
      return new revokeSystemPermission_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public revokeSystemPermission_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revokeSystemPermission_result)
        return this.equals((revokeSystemPermission_result) that);
      return false;
    }
    
    public boolean equals(revokeSystemPermission_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(revokeSystemPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      revokeSystemPermission_result typedOther = (revokeSystemPermission_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revokeSystemPermission_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class grantTablePermission_args implements TBase<grantTablePermission_args,grantTablePermission_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("grantTablePermission_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 5);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short) 2);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 3);
    private static final TField PERMISSION_FIELD_DESC = new TField("permission", TType.BYTE, (short) 4);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String user;
    public String tableName;
    public byte permission;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 5, "tinfo"), CREDENTIALS((short) 1, "credentials"), USER((short) 2, "user"), TABLE_NAME((short) 3, "tableName"), PERMISSION((short) 4,
          "permission");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 5: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // USER
            return USER;
          case 3: // TABLE_NAME
            return TABLE_NAME;
          case 4: // PERMISSION
            return PERMISSION;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    private static final int __PERMISSION_ISSET_ID = 0;
    private java.util.BitSet __isset_bit_vector = new java.util.BitSet(1);
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAME, new FieldMetaData("tableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PERMISSION, new FieldMetaData("permission", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(grantTablePermission_args.class, metaDataMap);
    }
    
    public grantTablePermission_args() {}
    
    public grantTablePermission_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        String tableName, byte permission) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.user = user;
      this.tableName = tableName;
      this.permission = permission;
      setPermissionIsSet(true);
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grantTablePermission_args(grantTablePermission_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      this.permission = other.permission;
    }
    
    public grantTablePermission_args deepCopy() {
      return new grantTablePermission_args(this);
    }
    
    @Deprecated
    public grantTablePermission_args clone() {
      return new grantTablePermission_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public grantTablePermission_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public grantTablePermission_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getUser() {
      return this.user;
    }
    
    public grantTablePermission_args setUser(String user) {
      this.user = user;
      return this;
    }
    
    public void unsetUser() {
      this.user = null;
    }
    
    /** Returns true if field user is set (has been asigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }
    
    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }
    
    public String getTableName() {
      return this.tableName;
    }
    
    public grantTablePermission_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }
    
    public void unsetTableName() {
      this.tableName = null;
    }
    
    /** Returns true if field tableName is set (has been asigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }
    
    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }
    
    public byte getPermission() {
      return this.permission;
    }
    
    public grantTablePermission_args setPermission(byte permission) {
      this.permission = permission;
      setPermissionIsSet(true);
      return this;
    }
    
    public void unsetPermission() {
      __isset_bit_vector.clear(__PERMISSION_ISSET_ID);
    }
    
    /** Returns true if field permission is set (has been asigned a value) and false otherwise */
    public boolean isSetPermission() {
      return __isset_bit_vector.get(__PERMISSION_ISSET_ID);
    }
    
    public void setPermissionIsSet(boolean value) {
      __isset_bit_vector.set(__PERMISSION_ISSET_ID, value);
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case USER:
          if (value == null) {
            unsetUser();
          } else {
            setUser((String) value);
          }
          break;
        
        case TABLE_NAME:
          if (value == null) {
            unsetTableName();
          } else {
            setTableName((String) value);
          }
          break;
        
        case PERMISSION:
          if (value == null) {
            unsetPermission();
          } else {
            setPermission((Byte) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case USER:
          return getUser();
          
        case TABLE_NAME:
          return getTableName();
          
        case PERMISSION:
          return new Byte(getPermission());
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case USER:
          return isSetUser();
        case TABLE_NAME:
          return isSetTableName();
        case PERMISSION:
          return isSetPermission();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grantTablePermission_args)
        return this.equals((grantTablePermission_args) that);
      return false;
    }
    
    public boolean equals(grantTablePermission_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }
      
      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }
      
      boolean this_present_permission = true;
      boolean that_present_permission = true;
      if (this_present_permission || that_present_permission) {
        if (!(this_present_permission && that_present_permission))
          return false;
        if (this.permission != that.permission)
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(grantTablePermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      grantTablePermission_args typedOther = (grantTablePermission_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPermission()).compareTo(typedOther.isSetPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPermission()) {
        lastComparison = TBaseHelper.compareTo(this.permission, typedOther.permission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 5: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER
            if (field.type == TType.STRING) {
              this.user = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PERMISSION
            if (field.type == TType.BYTE) {
              this.permission = iprot.readByte();
              setPermissionIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PERMISSION_FIELD_DESC);
      oprot.writeByte(this.permission);
      oprot.writeFieldEnd();
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grantTablePermission_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      sb.append(", ");
      sb.append("permission:");
      sb.append(this.permission);
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class grantTablePermission_result implements TBase<grantTablePermission_result,grantTablePermission_result._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("grantTablePermission_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    private static final TField TOPE_FIELD_DESC = new TField("tope", TType.STRUCT, (short) 2);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    public ThriftTableOperationException tope;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec"), TOPE((short) 2, "tope");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          case 2: // TOPE
            return TOPE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.TOPE, new FieldMetaData("tope", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(grantTablePermission_result.class, metaDataMap);
    }
    
    public grantTablePermission_result() {}
    
    public grantTablePermission_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec, ThriftTableOperationException tope) {
      this();
      this.sec = sec;
      this.tope = tope;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public grantTablePermission_result(grantTablePermission_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
      if (other.isSetTope()) {
        this.tope = new ThriftTableOperationException(other.tope);
      }
    }
    
    public grantTablePermission_result deepCopy() {
      return new grantTablePermission_result(this);
    }
    
    @Deprecated
    public grantTablePermission_result clone() {
      return new grantTablePermission_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public grantTablePermission_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public ThriftTableOperationException getTope() {
      return this.tope;
    }
    
    public grantTablePermission_result setTope(ThriftTableOperationException tope) {
      this.tope = tope;
      return this;
    }
    
    public void unsetTope() {
      this.tope = null;
    }
    
    /** Returns true if field tope is set (has been asigned a value) and false otherwise */
    public boolean isSetTope() {
      return this.tope != null;
    }
    
    public void setTopeIsSet(boolean value) {
      if (!value) {
        this.tope = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
        
        case TOPE:
          if (value == null) {
            unsetTope();
          } else {
            setTope((ThriftTableOperationException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
        case TOPE:
          return getTope();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
        case TOPE:
          return isSetTope();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof grantTablePermission_result)
        return this.equals((grantTablePermission_result) that);
      return false;
    }
    
    public boolean equals(grantTablePermission_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      boolean this_present_tope = true && this.isSetTope();
      boolean that_present_tope = true && that.isSetTope();
      if (this_present_tope || that_present_tope) {
        if (!(this_present_tope && that_present_tope))
          return false;
        if (!this.tope.equals(that.tope))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(grantTablePermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      grantTablePermission_result typedOther = (grantTablePermission_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTope()).compareTo(typedOther.isSetTope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTope()) {
        lastComparison = TBaseHelper.compareTo(this.tope, typedOther.tope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOPE
            if (field.type == TType.STRUCT) {
              this.tope = new ThriftTableOperationException();
              this.tope.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTope()) {
        oprot.writeFieldBegin(TOPE_FIELD_DESC);
        this.tope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("grantTablePermission_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(", ");
      sb.append("tope:");
      if (this.tope == null) {
        sb.append("null");
      } else {
        sb.append(this.tope);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class revokeTablePermission_args implements TBase<revokeTablePermission_args,revokeTablePermission_args._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("revokeTablePermission_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 5);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short) 2);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 3);
    private static final TField PERMISSION_FIELD_DESC = new TField("permission", TType.BYTE, (short) 4);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String user;
    public String tableName;
    public byte permission;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 5, "tinfo"), CREDENTIALS((short) 1, "credentials"), USER((short) 2, "user"), TABLE_NAME((short) 3, "tableName"), PERMISSION((short) 4,
          "permission");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 5: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // USER
            return USER;
          case 3: // TABLE_NAME
            return TABLE_NAME;
          case 4: // PERMISSION
            return PERMISSION;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    private static final int __PERMISSION_ISSET_ID = 0;
    private java.util.BitSet __isset_bit_vector = new java.util.BitSet(1);
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TABLE_NAME, new FieldMetaData("tableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PERMISSION, new FieldMetaData("permission", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(revokeTablePermission_args.class, metaDataMap);
    }
    
    public revokeTablePermission_args() {}
    
    public revokeTablePermission_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String user,
        String tableName, byte permission) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.user = user;
      this.tableName = tableName;
      this.permission = permission;
      setPermissionIsSet(true);
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revokeTablePermission_args(revokeTablePermission_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      this.permission = other.permission;
    }
    
    public revokeTablePermission_args deepCopy() {
      return new revokeTablePermission_args(this);
    }
    
    @Deprecated
    public revokeTablePermission_args clone() {
      return new revokeTablePermission_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public revokeTablePermission_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public revokeTablePermission_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getUser() {
      return this.user;
    }
    
    public revokeTablePermission_args setUser(String user) {
      this.user = user;
      return this;
    }
    
    public void unsetUser() {
      this.user = null;
    }
    
    /** Returns true if field user is set (has been asigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }
    
    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }
    
    public String getTableName() {
      return this.tableName;
    }
    
    public revokeTablePermission_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }
    
    public void unsetTableName() {
      this.tableName = null;
    }
    
    /** Returns true if field tableName is set (has been asigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }
    
    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }
    
    public byte getPermission() {
      return this.permission;
    }
    
    public revokeTablePermission_args setPermission(byte permission) {
      this.permission = permission;
      setPermissionIsSet(true);
      return this;
    }
    
    public void unsetPermission() {
      __isset_bit_vector.clear(__PERMISSION_ISSET_ID);
    }
    
    /** Returns true if field permission is set (has been asigned a value) and false otherwise */
    public boolean isSetPermission() {
      return __isset_bit_vector.get(__PERMISSION_ISSET_ID);
    }
    
    public void setPermissionIsSet(boolean value) {
      __isset_bit_vector.set(__PERMISSION_ISSET_ID, value);
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case USER:
          if (value == null) {
            unsetUser();
          } else {
            setUser((String) value);
          }
          break;
        
        case TABLE_NAME:
          if (value == null) {
            unsetTableName();
          } else {
            setTableName((String) value);
          }
          break;
        
        case PERMISSION:
          if (value == null) {
            unsetPermission();
          } else {
            setPermission((Byte) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case USER:
          return getUser();
          
        case TABLE_NAME:
          return getTableName();
          
        case PERMISSION:
          return new Byte(getPermission());
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case USER:
          return isSetUser();
        case TABLE_NAME:
          return isSetTableName();
        case PERMISSION:
          return isSetPermission();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revokeTablePermission_args)
        return this.equals((revokeTablePermission_args) that);
      return false;
    }
    
    public boolean equals(revokeTablePermission_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }
      
      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }
      
      boolean this_present_permission = true;
      boolean that_present_permission = true;
      if (this_present_permission || that_present_permission) {
        if (!(this_present_permission && that_present_permission))
          return false;
        if (this.permission != that.permission)
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(revokeTablePermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      revokeTablePermission_args typedOther = (revokeTablePermission_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPermission()).compareTo(typedOther.isSetPermission());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPermission()) {
        lastComparison = TBaseHelper.compareTo(this.permission, typedOther.permission);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 5: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER
            if (field.type == TType.STRING) {
              this.user = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PERMISSION
            if (field.type == TType.BYTE) {
              this.permission = iprot.readByte();
              setPermissionIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.user);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PERMISSION_FIELD_DESC);
      oprot.writeByte(this.permission);
      oprot.writeFieldEnd();
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revokeTablePermission_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      sb.append(", ");
      sb.append("permission:");
      sb.append(this.permission);
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class revokeTablePermission_result implements TBase<revokeTablePermission_result,revokeTablePermission_result._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("revokeTablePermission_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    private static final TField TOPE_FIELD_DESC = new TField("tope", TType.STRUCT, (short) 2);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    public ThriftTableOperationException tope;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec"), TOPE((short) 2, "tope");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          case 2: // TOPE
            return TOPE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.TOPE, new FieldMetaData("tope", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(revokeTablePermission_result.class, metaDataMap);
    }
    
    public revokeTablePermission_result() {}
    
    public revokeTablePermission_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec, ThriftTableOperationException tope) {
      this();
      this.sec = sec;
      this.tope = tope;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revokeTablePermission_result(revokeTablePermission_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
      if (other.isSetTope()) {
        this.tope = new ThriftTableOperationException(other.tope);
      }
    }
    
    public revokeTablePermission_result deepCopy() {
      return new revokeTablePermission_result(this);
    }
    
    @Deprecated
    public revokeTablePermission_result clone() {
      return new revokeTablePermission_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public revokeTablePermission_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public ThriftTableOperationException getTope() {
      return this.tope;
    }
    
    public revokeTablePermission_result setTope(ThriftTableOperationException tope) {
      this.tope = tope;
      return this;
    }
    
    public void unsetTope() {
      this.tope = null;
    }
    
    /** Returns true if field tope is set (has been asigned a value) and false otherwise */
    public boolean isSetTope() {
      return this.tope != null;
    }
    
    public void setTopeIsSet(boolean value) {
      if (!value) {
        this.tope = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
        
        case TOPE:
          if (value == null) {
            unsetTope();
          } else {
            setTope((ThriftTableOperationException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
        case TOPE:
          return getTope();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
        case TOPE:
          return isSetTope();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revokeTablePermission_result)
        return this.equals((revokeTablePermission_result) that);
      return false;
    }
    
    public boolean equals(revokeTablePermission_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      boolean this_present_tope = true && this.isSetTope();
      boolean that_present_tope = true && that.isSetTope();
      if (this_present_tope || that_present_tope) {
        if (!(this_present_tope && that_present_tope))
          return false;
        if (!this.tope.equals(that.tope))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(revokeTablePermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      revokeTablePermission_result typedOther = (revokeTablePermission_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTope()).compareTo(typedOther.isSetTope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTope()) {
        lastComparison = TBaseHelper.compareTo(this.tope, typedOther.tope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOPE
            if (field.type == TType.STRUCT) {
              this.tope = new ThriftTableOperationException();
              this.tope.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTope()) {
        oprot.writeFieldBegin(TOPE_FIELD_DESC);
        this.tope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("revokeTablePermission_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(", ");
      sb.append("tope:");
      if (this.tope == null) {
        sb.append("null");
      } else {
        sb.append(this.tope);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
}
