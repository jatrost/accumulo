/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.accumulo.core.tabletserver.thrift;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

@SuppressWarnings("serial")
public class ActionStats implements TBase<ActionStats,ActionStats._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ActionStats");
  
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short) 1);
  private static final TField ELAPSED_FIELD_DESC = new TField("elapsed", TType.DOUBLE, (short) 2);
  private static final TField NUM_FIELD_DESC = new TField("num", TType.I32, (short) 3);
  private static final TField COUNT_FIELD_DESC = new TField("count", TType.I64, (short) 4);
  private static final TField SUM_DEV_FIELD_DESC = new TField("sumDev", TType.DOUBLE, (short) 5);
  private static final TField FAIL_FIELD_DESC = new TField("fail", TType.I32, (short) 6);
  private static final TField QUEUE_TIME_FIELD_DESC = new TField("queueTime", TType.DOUBLE, (short) 7);
  private static final TField QUEUE_SUM_DEV_FIELD_DESC = new TField("queueSumDev", TType.DOUBLE, (short) 8);
  
  public int status;
  public double elapsed;
  public int num;
  public long count;
  public double sumDev;
  public int fail;
  public double queueTime;
  public double queueSumDev;
  
  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    STATUS((short) 1, "status"), ELAPSED((short) 2, "elapsed"), NUM((short) 3, "num"), COUNT((short) 4, "count"), SUM_DEV((short) 5, "sumDev"), FAIL((short) 6,
        "fail"), QUEUE_TIME((short) 7, "queueTime"), QUEUE_SUM_DEV((short) 8, "queueSumDev");
    
    private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
    
    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
    
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // ELAPSED
          return ELAPSED;
        case 3: // NUM
          return NUM;
        case 4: // COUNT
          return COUNT;
        case 5: // SUM_DEV
          return SUM_DEV;
        case 6: // FAIL
          return FAIL;
        case 7: // QUEUE_TIME
          return QUEUE_TIME;
        case 8: // QUEUE_SUM_DEV
          return QUEUE_SUM_DEV;
        default:
          return null;
      }
    }
    
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
    
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
    
    private final short _thriftId;
    private final String _fieldName;
    
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
    
    public short getThriftFieldId() {
      return _thriftId;
    }
    
    public String getFieldName() {
      return _fieldName;
    }
  }
  
  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private static final int __ELAPSED_ISSET_ID = 1;
  private static final int __NUM_ISSET_ID = 2;
  private static final int __COUNT_ISSET_ID = 3;
  private static final int __SUMDEV_ISSET_ID = 4;
  private static final int __FAIL_ISSET_ID = 5;
  private static final int __QUEUETIME_ISSET_ID = 6;
  private static final int __QUEUESUMDEV_ISSET_ID = 7;
  private java.util.BitSet __isset_bit_vector = new java.util.BitSet(8);
  
  public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ELAPSED, new FieldMetaData("elapsed", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.NUM, new FieldMetaData("num", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.SUM_DEV, new FieldMetaData("sumDev", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.FAIL, new FieldMetaData("fail", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.QUEUE_TIME, new FieldMetaData("queueTime", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.QUEUE_SUM_DEV, new FieldMetaData("queueSumDev", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ActionStats.class, metaDataMap);
  }
  
  public ActionStats() {}
  
  public ActionStats(int status, double elapsed, int num, long count, double sumDev, int fail, double queueTime, double queueSumDev) {
    this();
    this.status = status;
    setStatusIsSet(true);
    this.elapsed = elapsed;
    setElapsedIsSet(true);
    this.num = num;
    setNumIsSet(true);
    this.count = count;
    setCountIsSet(true);
    this.sumDev = sumDev;
    setSumDevIsSet(true);
    this.fail = fail;
    setFailIsSet(true);
    this.queueTime = queueTime;
    setQueueTimeIsSet(true);
    this.queueSumDev = queueSumDev;
    setQueueSumDevIsSet(true);
  }
  
  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActionStats(ActionStats other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.status = other.status;
    this.elapsed = other.elapsed;
    this.num = other.num;
    this.count = other.count;
    this.sumDev = other.sumDev;
    this.fail = other.fail;
    this.queueTime = other.queueTime;
    this.queueSumDev = other.queueSumDev;
  }
  
  public ActionStats deepCopy() {
    return new ActionStats(this);
  }
  
  @Deprecated
  public ActionStats clone() {
    return new ActionStats(this);
  }
  
  public int getStatus() {
    return this.status;
  }
  
  public ActionStats setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }
  
  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }
  
  /** Returns true if field status is set (has been asigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }
  
  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }
  
  public double getElapsed() {
    return this.elapsed;
  }
  
  public ActionStats setElapsed(double elapsed) {
    this.elapsed = elapsed;
    setElapsedIsSet(true);
    return this;
  }
  
  public void unsetElapsed() {
    __isset_bit_vector.clear(__ELAPSED_ISSET_ID);
  }
  
  /** Returns true if field elapsed is set (has been asigned a value) and false otherwise */
  public boolean isSetElapsed() {
    return __isset_bit_vector.get(__ELAPSED_ISSET_ID);
  }
  
  public void setElapsedIsSet(boolean value) {
    __isset_bit_vector.set(__ELAPSED_ISSET_ID, value);
  }
  
  public int getNum() {
    return this.num;
  }
  
  public ActionStats setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }
  
  public void unsetNum() {
    __isset_bit_vector.clear(__NUM_ISSET_ID);
  }
  
  /** Returns true if field num is set (has been asigned a value) and false otherwise */
  public boolean isSetNum() {
    return __isset_bit_vector.get(__NUM_ISSET_ID);
  }
  
  public void setNumIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_ISSET_ID, value);
  }
  
  public long getCount() {
    return this.count;
  }
  
  public ActionStats setCount(long count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }
  
  public void unsetCount() {
    __isset_bit_vector.clear(__COUNT_ISSET_ID);
  }
  
  /** Returns true if field count is set (has been asigned a value) and false otherwise */
  public boolean isSetCount() {
    return __isset_bit_vector.get(__COUNT_ISSET_ID);
  }
  
  public void setCountIsSet(boolean value) {
    __isset_bit_vector.set(__COUNT_ISSET_ID, value);
  }
  
  public double getSumDev() {
    return this.sumDev;
  }
  
  public ActionStats setSumDev(double sumDev) {
    this.sumDev = sumDev;
    setSumDevIsSet(true);
    return this;
  }
  
  public void unsetSumDev() {
    __isset_bit_vector.clear(__SUMDEV_ISSET_ID);
  }
  
  /** Returns true if field sumDev is set (has been asigned a value) and false otherwise */
  public boolean isSetSumDev() {
    return __isset_bit_vector.get(__SUMDEV_ISSET_ID);
  }
  
  public void setSumDevIsSet(boolean value) {
    __isset_bit_vector.set(__SUMDEV_ISSET_ID, value);
  }
  
  public int getFail() {
    return this.fail;
  }
  
  public ActionStats setFail(int fail) {
    this.fail = fail;
    setFailIsSet(true);
    return this;
  }
  
  public void unsetFail() {
    __isset_bit_vector.clear(__FAIL_ISSET_ID);
  }
  
  /** Returns true if field fail is set (has been asigned a value) and false otherwise */
  public boolean isSetFail() {
    return __isset_bit_vector.get(__FAIL_ISSET_ID);
  }
  
  public void setFailIsSet(boolean value) {
    __isset_bit_vector.set(__FAIL_ISSET_ID, value);
  }
  
  public double getQueueTime() {
    return this.queueTime;
  }
  
  public ActionStats setQueueTime(double queueTime) {
    this.queueTime = queueTime;
    setQueueTimeIsSet(true);
    return this;
  }
  
  public void unsetQueueTime() {
    __isset_bit_vector.clear(__QUEUETIME_ISSET_ID);
  }
  
  /** Returns true if field queueTime is set (has been asigned a value) and false otherwise */
  public boolean isSetQueueTime() {
    return __isset_bit_vector.get(__QUEUETIME_ISSET_ID);
  }
  
  public void setQueueTimeIsSet(boolean value) {
    __isset_bit_vector.set(__QUEUETIME_ISSET_ID, value);
  }
  
  public double getQueueSumDev() {
    return this.queueSumDev;
  }
  
  public ActionStats setQueueSumDev(double queueSumDev) {
    this.queueSumDev = queueSumDev;
    setQueueSumDevIsSet(true);
    return this;
  }
  
  public void unsetQueueSumDev() {
    __isset_bit_vector.clear(__QUEUESUMDEV_ISSET_ID);
  }
  
  /** Returns true if field queueSumDev is set (has been asigned a value) and false otherwise */
  public boolean isSetQueueSumDev() {
    return __isset_bit_vector.get(__QUEUESUMDEV_ISSET_ID);
  }
  
  public void setQueueSumDevIsSet(boolean value) {
    __isset_bit_vector.set(__QUEUESUMDEV_ISSET_ID, value);
  }
  
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer) value);
        }
        break;
      
      case ELAPSED:
        if (value == null) {
          unsetElapsed();
        } else {
          setElapsed((Double) value);
        }
        break;
      
      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((Integer) value);
        }
        break;
      
      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Long) value);
        }
        break;
      
      case SUM_DEV:
        if (value == null) {
          unsetSumDev();
        } else {
          setSumDev((Double) value);
        }
        break;
      
      case FAIL:
        if (value == null) {
          unsetFail();
        } else {
          setFail((Integer) value);
        }
        break;
      
      case QUEUE_TIME:
        if (value == null) {
          unsetQueueTime();
        } else {
          setQueueTime((Double) value);
        }
        break;
      
      case QUEUE_SUM_DEV:
        if (value == null) {
          unsetQueueSumDev();
        } else {
          setQueueSumDev((Double) value);
        }
        break;
    
    }
  }
  
  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }
  
  public Object getFieldValue(_Fields field) {
    switch (field) {
      case STATUS:
        return new Integer(getStatus());
        
      case ELAPSED:
        return new Double(getElapsed());
        
      case NUM:
        return new Integer(getNum());
        
      case COUNT:
        return new Long(getCount());
        
      case SUM_DEV:
        return new Double(getSumDev());
        
      case FAIL:
        return new Integer(getFail());
        
      case QUEUE_TIME:
        return new Double(getQueueTime());
        
      case QUEUE_SUM_DEV:
        return new Double(getQueueSumDev());
        
    }
    throw new IllegalStateException();
  }
  
  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }
  
  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
      case STATUS:
        return isSetStatus();
      case ELAPSED:
        return isSetElapsed();
      case NUM:
        return isSetNum();
      case COUNT:
        return isSetCount();
      case SUM_DEV:
        return isSetSumDev();
      case FAIL:
        return isSetFail();
      case QUEUE_TIME:
        return isSetQueueTime();
      case QUEUE_SUM_DEV:
        return isSetQueueSumDev();
    }
    throw new IllegalStateException();
  }
  
  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }
  
  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActionStats)
      return this.equals((ActionStats) that);
    return false;
  }
  
  public boolean equals(ActionStats that) {
    if (that == null)
      return false;
    
    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }
    
    boolean this_present_elapsed = true;
    boolean that_present_elapsed = true;
    if (this_present_elapsed || that_present_elapsed) {
      if (!(this_present_elapsed && that_present_elapsed))
        return false;
      if (this.elapsed != that.elapsed)
        return false;
    }
    
    boolean this_present_num = true;
    boolean that_present_num = true;
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }
    
    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }
    
    boolean this_present_sumDev = true;
    boolean that_present_sumDev = true;
    if (this_present_sumDev || that_present_sumDev) {
      if (!(this_present_sumDev && that_present_sumDev))
        return false;
      if (this.sumDev != that.sumDev)
        return false;
    }
    
    boolean this_present_fail = true;
    boolean that_present_fail = true;
    if (this_present_fail || that_present_fail) {
      if (!(this_present_fail && that_present_fail))
        return false;
      if (this.fail != that.fail)
        return false;
    }
    
    boolean this_present_queueTime = true;
    boolean that_present_queueTime = true;
    if (this_present_queueTime || that_present_queueTime) {
      if (!(this_present_queueTime && that_present_queueTime))
        return false;
      if (this.queueTime != that.queueTime)
        return false;
    }
    
    boolean this_present_queueSumDev = true;
    boolean that_present_queueSumDev = true;
    if (this_present_queueSumDev || that_present_queueSumDev) {
      if (!(this_present_queueSumDev && that_present_queueSumDev))
        return false;
      if (this.queueSumDev != that.queueSumDev)
        return false;
    }
    
    return true;
  }
  
  @Override
  public int hashCode() {
    return 0;
  }
  
  public int compareTo(ActionStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }
    
    int lastComparison = 0;
    ActionStats typedOther = (ActionStats) other;
    
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElapsed()).compareTo(typedOther.isSetElapsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElapsed()) {
      lastComparison = TBaseHelper.compareTo(this.elapsed, typedOther.elapsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(typedOther.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = TBaseHelper.compareTo(this.num, typedOther.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSumDev()).compareTo(typedOther.isSetSumDev());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSumDev()) {
      lastComparison = TBaseHelper.compareTo(this.sumDev, typedOther.sumDev);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFail()).compareTo(typedOther.isSetFail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFail()) {
      lastComparison = TBaseHelper.compareTo(this.fail, typedOther.fail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueTime()).compareTo(typedOther.isSetQueueTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueTime()) {
      lastComparison = TBaseHelper.compareTo(this.queueTime, typedOther.queueTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueSumDev()).compareTo(typedOther.isSetQueueSumDev());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueSumDev()) {
      lastComparison = TBaseHelper.compareTo(this.queueSumDev, typedOther.queueSumDev);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }
  
  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // STATUS
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ELAPSED
          if (field.type == TType.DOUBLE) {
            this.elapsed = iprot.readDouble();
            setElapsedIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // NUM
          if (field.type == TType.I32) {
            this.num = iprot.readI32();
            setNumIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // COUNT
          if (field.type == TType.I64) {
            this.count = iprot.readI64();
            setCountIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SUM_DEV
          if (field.type == TType.DOUBLE) {
            this.sumDev = iprot.readDouble();
            setSumDevIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // FAIL
          if (field.type == TType.I32) {
            this.fail = iprot.readI32();
            setFailIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // QUEUE_TIME
          if (field.type == TType.DOUBLE) {
            this.queueTime = iprot.readDouble();
            setQueueTimeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // QUEUE_SUM_DEV
          if (field.type == TType.DOUBLE) {
            this.queueSumDev = iprot.readDouble();
            setQueueSumDevIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    
    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
  
  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ELAPSED_FIELD_DESC);
    oprot.writeDouble(this.elapsed);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_FIELD_DESC);
    oprot.writeI32(this.num);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COUNT_FIELD_DESC);
    oprot.writeI64(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SUM_DEV_FIELD_DESC);
    oprot.writeDouble(this.sumDev);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FAIL_FIELD_DESC);
    oprot.writeI32(this.fail);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(QUEUE_TIME_FIELD_DESC);
    oprot.writeDouble(this.queueTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(QUEUE_SUM_DEV_FIELD_DESC);
    oprot.writeDouble(this.queueSumDev);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActionStats(");
    sb.append("status:");
    sb.append(this.status);
    sb.append(", ");
    sb.append("elapsed:");
    sb.append(this.elapsed);
    sb.append(", ");
    sb.append("num:");
    sb.append(this.num);
    sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    sb.append(", ");
    sb.append("sumDev:");
    sb.append(this.sumDev);
    sb.append(", ");
    sb.append("fail:");
    sb.append(this.fail);
    sb.append(", ");
    sb.append("queueTime:");
    sb.append(this.queueTime);
    sb.append(", ");
    sb.append("queueSumDev:");
    sb.append(this.queueSumDev);
    sb.append(")");
    return sb.toString();
  }
  
  public void validate() throws TException {
    // check for required fields
  }
  
}
