/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.accumulo.core.data.thrift;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

@SuppressWarnings("serial")
public class TKeyExtent implements TBase<TKeyExtent,TKeyExtent._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("TKeyExtent");
  
  private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short) 1);
  private static final TField END_ROW_FIELD_DESC = new TField("endRow", TType.STRING, (short) 2);
  private static final TField PREV_END_ROW_FIELD_DESC = new TField("prevEndRow", TType.STRING, (short) 3);
  
  public byte[] table;
  public byte[] endRow;
  public byte[] prevEndRow;
  
  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TABLE((short) 1, "table"), END_ROW((short) 2, "endRow"), PREV_END_ROW((short) 3, "prevEndRow");
    
    private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
    
    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
    
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // TABLE
          return TABLE;
        case 2: // END_ROW
          return END_ROW;
        case 3: // PREV_END_ROW
          return PREV_END_ROW;
        default:
          return null;
      }
    }
    
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
    
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
    
    private final short _thriftId;
    private final String _fieldName;
    
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
    
    public short getThriftFieldId() {
      return _thriftId;
    }
    
    public String getFieldName() {
      return _fieldName;
    }
  }
  
  // isset id assignments
  
  public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE, new FieldMetaData("table", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.END_ROW, new FieldMetaData("endRow", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PREV_END_ROW, new FieldMetaData("prevEndRow", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(TKeyExtent.class, metaDataMap);
  }
  
  public TKeyExtent() {}
  
  public TKeyExtent(byte[] table, byte[] endRow, byte[] prevEndRow) {
    this();
    this.table = table;
    this.endRow = endRow;
    this.prevEndRow = prevEndRow;
  }
  
  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TKeyExtent(TKeyExtent other) {
    if (other.isSetTable()) {
      this.table = new byte[other.table.length];
      System.arraycopy(other.table, 0, table, 0, other.table.length);
    }
    if (other.isSetEndRow()) {
      this.endRow = new byte[other.endRow.length];
      System.arraycopy(other.endRow, 0, endRow, 0, other.endRow.length);
    }
    if (other.isSetPrevEndRow()) {
      this.prevEndRow = new byte[other.prevEndRow.length];
      System.arraycopy(other.prevEndRow, 0, prevEndRow, 0, other.prevEndRow.length);
    }
  }
  
  public TKeyExtent deepCopy() {
    return new TKeyExtent(this);
  }
  
  @Deprecated
  public TKeyExtent clone() {
    return new TKeyExtent(this);
  }
  
  public byte[] getTable() {
    return this.table;
  }
  
  public TKeyExtent setTable(byte[] table) {
    this.table = table;
    return this;
  }
  
  public void unsetTable() {
    this.table = null;
  }
  
  /** Returns true if field table is set (has been asigned a value) and false otherwise */
  public boolean isSetTable() {
    return this.table != null;
  }
  
  public void setTableIsSet(boolean value) {
    if (!value) {
      this.table = null;
    }
  }
  
  public byte[] getEndRow() {
    return this.endRow;
  }
  
  public TKeyExtent setEndRow(byte[] endRow) {
    this.endRow = endRow;
    return this;
  }
  
  public void unsetEndRow() {
    this.endRow = null;
  }
  
  /** Returns true if field endRow is set (has been asigned a value) and false otherwise */
  public boolean isSetEndRow() {
    return this.endRow != null;
  }
  
  public void setEndRowIsSet(boolean value) {
    if (!value) {
      this.endRow = null;
    }
  }
  
  public byte[] getPrevEndRow() {
    return this.prevEndRow;
  }
  
  public TKeyExtent setPrevEndRow(byte[] prevEndRow) {
    this.prevEndRow = prevEndRow;
    return this;
  }
  
  public void unsetPrevEndRow() {
    this.prevEndRow = null;
  }
  
  /** Returns true if field prevEndRow is set (has been asigned a value) and false otherwise */
  public boolean isSetPrevEndRow() {
    return this.prevEndRow != null;
  }
  
  public void setPrevEndRowIsSet(boolean value) {
    if (!value) {
      this.prevEndRow = null;
    }
  }
  
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((byte[]) value);
        }
        break;
      
      case END_ROW:
        if (value == null) {
          unsetEndRow();
        } else {
          setEndRow((byte[]) value);
        }
        break;
      
      case PREV_END_ROW:
        if (value == null) {
          unsetPrevEndRow();
        } else {
          setPrevEndRow((byte[]) value);
        }
        break;
    
    }
  }
  
  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }
  
  public Object getFieldValue(_Fields field) {
    switch (field) {
      case TABLE:
        return getTable();
        
      case END_ROW:
        return getEndRow();
        
      case PREV_END_ROW:
        return getPrevEndRow();
        
    }
    throw new IllegalStateException();
  }
  
  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }
  
  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
      case TABLE:
        return isSetTable();
      case END_ROW:
        return isSetEndRow();
      case PREV_END_ROW:
        return isSetPrevEndRow();
    }
    throw new IllegalStateException();
  }
  
  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }
  
  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TKeyExtent)
      return this.equals((TKeyExtent) that);
    return false;
  }
  
  public boolean equals(TKeyExtent that) {
    if (that == null)
      return false;
    
    boolean this_present_table = true && this.isSetTable();
    boolean that_present_table = true && that.isSetTable();
    if (this_present_table || that_present_table) {
      if (!(this_present_table && that_present_table))
        return false;
      if (!java.util.Arrays.equals(this.table, that.table))
        return false;
    }
    
    boolean this_present_endRow = true && this.isSetEndRow();
    boolean that_present_endRow = true && that.isSetEndRow();
    if (this_present_endRow || that_present_endRow) {
      if (!(this_present_endRow && that_present_endRow))
        return false;
      if (!java.util.Arrays.equals(this.endRow, that.endRow))
        return false;
    }
    
    boolean this_present_prevEndRow = true && this.isSetPrevEndRow();
    boolean that_present_prevEndRow = true && that.isSetPrevEndRow();
    if (this_present_prevEndRow || that_present_prevEndRow) {
      if (!(this_present_prevEndRow && that_present_prevEndRow))
        return false;
      if (!java.util.Arrays.equals(this.prevEndRow, that.prevEndRow))
        return false;
    }
    
    return true;
  }
  
  @Override
  public int hashCode() {
    return 0;
  }
  
  public int compareTo(TKeyExtent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }
    
    int lastComparison = 0;
    TKeyExtent typedOther = (TKeyExtent) other;
    
    lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable()) {
      lastComparison = TBaseHelper.compareTo(this.table, typedOther.table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndRow()).compareTo(typedOther.isSetEndRow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndRow()) {
      lastComparison = TBaseHelper.compareTo(this.endRow, typedOther.endRow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrevEndRow()).compareTo(typedOther.isSetPrevEndRow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrevEndRow()) {
      lastComparison = TBaseHelper.compareTo(this.prevEndRow, typedOther.prevEndRow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }
  
  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // TABLE
          if (field.type == TType.STRING) {
            this.table = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // END_ROW
          if (field.type == TType.STRING) {
            this.endRow = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PREV_END_ROW
          if (field.type == TType.STRING) {
            this.prevEndRow = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    
    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
  
  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.table != null) {
      oprot.writeFieldBegin(TABLE_FIELD_DESC);
      oprot.writeBinary(this.table);
      oprot.writeFieldEnd();
    }
    if (this.endRow != null) {
      oprot.writeFieldBegin(END_ROW_FIELD_DESC);
      oprot.writeBinary(this.endRow);
      oprot.writeFieldEnd();
    }
    if (this.prevEndRow != null) {
      oprot.writeFieldBegin(PREV_END_ROW_FIELD_DESC);
      oprot.writeBinary(this.prevEndRow);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TKeyExtent(");
    sb.append("table:");
    if (this.table == null) {
      sb.append("null");
    } else {
      int __table_size = Math.min(this.table.length, 128);
      for (int i = 0; i < __table_size; i++) {
        if (i != 0)
          sb.append(" ");
        sb.append(Integer.toHexString(this.table[i]).length() > 1 ? Integer.toHexString(this.table[i])
            .substring(Integer.toHexString(this.table[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.table[i]).toUpperCase());
      }
      if (this.table.length > 128)
        sb.append(" ...");
    }
    sb.append(", ");
    sb.append("endRow:");
    if (this.endRow == null) {
      sb.append("null");
    } else {
      int __endRow_size = Math.min(this.endRow.length, 128);
      for (int i = 0; i < __endRow_size; i++) {
        if (i != 0)
          sb.append(" ");
        sb.append(Integer.toHexString(this.endRow[i]).length() > 1 ? Integer.toHexString(this.endRow[i])
            .substring(Integer.toHexString(this.endRow[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.endRow[i]).toUpperCase());
      }
      if (this.endRow.length > 128)
        sb.append(" ...");
    }
    sb.append(", ");
    sb.append("prevEndRow:");
    if (this.prevEndRow == null) {
      sb.append("null");
    } else {
      int __prevEndRow_size = Math.min(this.prevEndRow.length, 128);
      for (int i = 0; i < __prevEndRow_size; i++) {
        if (i != 0)
          sb.append(" ");
        sb.append(Integer.toHexString(this.prevEndRow[i]).length() > 1 ? Integer.toHexString(this.prevEndRow[i])
            .substring(Integer.toHexString(this.prevEndRow[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.prevEndRow[i]).toUpperCase());
      }
      if (this.prevEndRow.length > 128)
        sb.append(" ...");
    }
    sb.append(")");
    return sb.toString();
  }
  
  public void validate() throws TException {
    // check for required fields
  }
  
}
