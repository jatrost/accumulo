/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.accumulo.core.master.thrift;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class MasterClientService {
  
  public interface Iface extends org.apache.accumulo.core.client.impl.thrift.ClientService.Iface {
    
    public void createTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        java.util.List<byte[]> splitPoints, java.util.Map<String,String> aggs, TimeType tt)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException,
        TException;
    
    public void deleteTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException,
        TException;
    
    public void renameTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String oldTableName,
        String newTableName) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException;
    
    public void offlineTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException,
        TException;
    
    public void onlineTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException,
        TException;
    
    public void flushTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException,
        TException;
    
    public void setTableProperty(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        String property, String value) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException;
    
    public void removeTableProperty(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        String property) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException;
    
    public void setMasterGoalState(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, MasterGoalState state)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public void shutdown(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, boolean stopTabletServers)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public void shutdownTabletServer(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tabletServer)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public void setSystemProperty(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String property, String value)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public void removeSystemProperty(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String property)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public MasterMonitorInfo getMasterStats(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException;
    
    public void reportSplitExtent(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String serverName,
        TabletSplit split) throws TException;
    
    public void reportTabletStatus(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String serverName,
        TabletLoadState status, org.apache.accumulo.core.data.thrift.TKeyExtent tablet) throws TException;
    
  }
  
  public static class Client extends org.apache.accumulo.core.client.impl.thrift.ClientService.Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }
    
    public Client(TProtocol prot) {
      this(prot, prot);
    }
    
    public Client(TProtocol iprot, TProtocol oprot) {
      super(iprot, oprot);
    }
    
    public void createTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        java.util.List<byte[]> splitPoints, java.util.Map<String,String> aggs, TimeType tt)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException,
        TException {
      send_createTable(tinfo, credentials, tableName, splitPoints, aggs, tt);
      recv_createTable();
    }
    
    public void send_createTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        java.util.List<byte[]> splitPoints, java.util.Map<String,String> aggs, TimeType tt) throws TException {
      oprot_.writeMessageBegin(new TMessage("createTable", TMessageType.CALL, ++seqid_));
      createTable_args args = new createTable_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setTableName(tableName);
      args.setSplitPoints(splitPoints);
      args.setAggs(aggs);
      args.setTt(tt);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_createTable() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createTable failed: out of sequence response");
      }
      createTable_result result = new createTable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      if (result.tope != null) {
        throw result.tope;
      }
      return;
    }
    
    public void deleteTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException,
        TException {
      send_deleteTable(tinfo, credentials, tableName);
      recv_deleteTable();
    }
    
    public void send_deleteTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName)
        throws TException {
      oprot_.writeMessageBegin(new TMessage("deleteTable", TMessageType.CALL, ++seqid_));
      deleteTable_args args = new deleteTable_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setTableName(tableName);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_deleteTable() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "deleteTable failed: out of sequence response");
      }
      deleteTable_result result = new deleteTable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      if (result.tope != null) {
        throw result.tope;
      }
      return;
    }
    
    public void renameTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String oldTableName,
        String newTableName) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException {
      send_renameTable(tinfo, credentials, oldTableName, newTableName);
      recv_renameTable();
    }
    
    public void send_renameTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String oldTableName,
        String newTableName) throws TException {
      oprot_.writeMessageBegin(new TMessage("renameTable", TMessageType.CALL, ++seqid_));
      renameTable_args args = new renameTable_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setOldTableName(oldTableName);
      args.setNewTableName(newTableName);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_renameTable() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "renameTable failed: out of sequence response");
      }
      renameTable_result result = new renameTable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      if (result.tope != null) {
        throw result.tope;
      }
      return;
    }
    
    public void offlineTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException,
        TException {
      send_offlineTable(tinfo, credentials, tableName);
      recv_offlineTable();
    }
    
    public void send_offlineTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName)
        throws TException {
      oprot_.writeMessageBegin(new TMessage("offlineTable", TMessageType.CALL, ++seqid_));
      offlineTable_args args = new offlineTable_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setTableName(tableName);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_offlineTable() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "offlineTable failed: out of sequence response");
      }
      offlineTable_result result = new offlineTable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      if (result.tope != null) {
        throw result.tope;
      }
      return;
    }
    
    public void onlineTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException,
        TException {
      send_onlineTable(tinfo, credentials, tableName);
      recv_onlineTable();
    }
    
    public void send_onlineTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName)
        throws TException {
      oprot_.writeMessageBegin(new TMessage("onlineTable", TMessageType.CALL, ++seqid_));
      onlineTable_args args = new onlineTable_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setTableName(tableName);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_onlineTable() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "onlineTable failed: out of sequence response");
      }
      onlineTable_result result = new onlineTable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      if (result.tope != null) {
        throw result.tope;
      }
      return;
    }
    
    public void flushTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException,
        TException {
      send_flushTable(tinfo, credentials, tableName);
      recv_flushTable();
    }
    
    public void send_flushTable(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName)
        throws TException {
      oprot_.writeMessageBegin(new TMessage("flushTable", TMessageType.CALL, ++seqid_));
      flushTable_args args = new flushTable_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setTableName(tableName);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_flushTable() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "flushTable failed: out of sequence response");
      }
      flushTable_result result = new flushTable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      if (result.tope != null) {
        throw result.tope;
      }
      return;
    }
    
    public void setTableProperty(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        String property, String value) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException {
      send_setTableProperty(tinfo, credentials, tableName, property, value);
      recv_setTableProperty();
    }
    
    public void send_setTableProperty(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        String property, String value) throws TException {
      oprot_.writeMessageBegin(new TMessage("setTableProperty", TMessageType.CALL, ++seqid_));
      setTableProperty_args args = new setTableProperty_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setTableName(tableName);
      args.setProperty(property);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_setTableProperty() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "setTableProperty failed: out of sequence response");
      }
      setTableProperty_result result = new setTableProperty_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      if (result.tope != null) {
        throw result.tope;
      }
      return;
    }
    
    public void removeTableProperty(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        String property) throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException {
      send_removeTableProperty(tinfo, credentials, tableName, property);
      recv_removeTableProperty();
    }
    
    public void send_removeTableProperty(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        String property) throws TException {
      oprot_.writeMessageBegin(new TMessage("removeTableProperty", TMessageType.CALL, ++seqid_));
      removeTableProperty_args args = new removeTableProperty_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setTableName(tableName);
      args.setProperty(property);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_removeTableProperty() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeTableProperty failed: out of sequence response");
      }
      removeTableProperty_result result = new removeTableProperty_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      if (result.tope != null) {
        throw result.tope;
      }
      return;
    }
    
    public void setMasterGoalState(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, MasterGoalState state)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_setMasterGoalState(tinfo, credentials, state);
      recv_setMasterGoalState();
    }
    
    public void send_setMasterGoalState(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, MasterGoalState state)
        throws TException {
      oprot_.writeMessageBegin(new TMessage("setMasterGoalState", TMessageType.CALL, ++seqid_));
      setMasterGoalState_args args = new setMasterGoalState_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setState(state);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_setMasterGoalState() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "setMasterGoalState failed: out of sequence response");
      }
      setMasterGoalState_result result = new setMasterGoalState_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      return;
    }
    
    public void shutdown(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, boolean stopTabletServers)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_shutdown(tinfo, credentials, stopTabletServers);
      recv_shutdown();
    }
    
    public void send_shutdown(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, boolean stopTabletServers)
        throws TException {
      oprot_.writeMessageBegin(new TMessage("shutdown", TMessageType.CALL, ++seqid_));
      shutdown_args args = new shutdown_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setStopTabletServers(stopTabletServers);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_shutdown() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "shutdown failed: out of sequence response");
      }
      shutdown_result result = new shutdown_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      return;
    }
    
    public void shutdownTabletServer(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tabletServer)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_shutdownTabletServer(tinfo, credentials, tabletServer);
      recv_shutdownTabletServer();
    }
    
    public void send_shutdownTabletServer(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tabletServer)
        throws TException {
      oprot_.writeMessageBegin(new TMessage("shutdownTabletServer", TMessageType.CALL, ++seqid_));
      shutdownTabletServer_args args = new shutdownTabletServer_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setTabletServer(tabletServer);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_shutdownTabletServer() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "shutdownTabletServer failed: out of sequence response");
      }
      shutdownTabletServer_result result = new shutdownTabletServer_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      return;
    }
    
    public void setSystemProperty(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String property, String value)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_setSystemProperty(tinfo, credentials, property, value);
      recv_setSystemProperty();
    }
    
    public void send_setSystemProperty(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String property,
        String value) throws TException {
      oprot_.writeMessageBegin(new TMessage("setSystemProperty", TMessageType.CALL, ++seqid_));
      setSystemProperty_args args = new setSystemProperty_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setProperty(property);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_setSystemProperty() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "setSystemProperty failed: out of sequence response");
      }
      setSystemProperty_result result = new setSystemProperty_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      return;
    }
    
    public void removeSystemProperty(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String property)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_removeSystemProperty(tinfo, credentials, property);
      recv_removeSystemProperty();
    }
    
    public void send_removeSystemProperty(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String property)
        throws TException {
      oprot_.writeMessageBegin(new TMessage("removeSystemProperty", TMessageType.CALL, ++seqid_));
      removeSystemProperty_args args = new removeSystemProperty_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setProperty(property);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void recv_removeSystemProperty() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeSystemProperty failed: out of sequence response");
      }
      removeSystemProperty_result result = new removeSystemProperty_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.sec != null) {
        throw result.sec;
      }
      return;
    }
    
    public MasterMonitorInfo getMasterStats(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials)
        throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      send_getMasterStats(tinfo, credentials);
      return recv_getMasterStats();
    }
    
    public void send_getMasterStats(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials) throws TException {
      oprot_.writeMessageBegin(new TMessage("getMasterStats", TMessageType.CALL, ++seqid_));
      getMasterStats_args args = new getMasterStats_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public MasterMonitorInfo recv_getMasterStats() throws org.apache.accumulo.core.security.thrift.ThriftSecurityException, TException {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMasterStats failed: out of sequence response");
      }
      getMasterStats_result result = new getMasterStats_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sec != null) {
        throw result.sec;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMasterStats failed: unknown result");
    }
    
    public void reportSplitExtent(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String serverName,
        TabletSplit split) throws TException {
      send_reportSplitExtent(tinfo, credentials, serverName, split);
    }
    
    public void send_reportSplitExtent(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String serverName,
        TabletSplit split) throws TException {
      oprot_.writeMessageBegin(new TMessage("reportSplitExtent", TMessageType.CALL, ++seqid_));
      reportSplitExtent_args args = new reportSplitExtent_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setServerName(serverName);
      args.setSplit(split);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
    public void reportTabletStatus(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String serverName,
        TabletLoadState status, org.apache.accumulo.core.data.thrift.TKeyExtent tablet) throws TException {
      send_reportTabletStatus(tinfo, credentials, serverName, status, tablet);
    }
    
    public void send_reportTabletStatus(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String serverName,
        TabletLoadState status, org.apache.accumulo.core.data.thrift.TKeyExtent tablet) throws TException {
      oprot_.writeMessageBegin(new TMessage("reportTabletStatus", TMessageType.CALL, ++seqid_));
      reportTabletStatus_args args = new reportTabletStatus_args();
      args.setTinfo(tinfo);
      args.setCredentials(credentials);
      args.setServerName(serverName);
      args.setStatus(status);
      args.setTablet(tablet);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    
  }
  
  public static class Processor extends org.apache.accumulo.core.client.impl.thrift.ClientService.Processor implements TProcessor {
    private static final org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    
    public Processor(Iface iface) {
      super(iface);
      iface_ = iface;
      processMap_.put("createTable", new createTable());
      processMap_.put("deleteTable", new deleteTable());
      processMap_.put("renameTable", new renameTable());
      processMap_.put("offlineTable", new offlineTable());
      processMap_.put("onlineTable", new onlineTable());
      processMap_.put("flushTable", new flushTable());
      processMap_.put("setTableProperty", new setTableProperty());
      processMap_.put("removeTableProperty", new removeTableProperty());
      processMap_.put("setMasterGoalState", new setMasterGoalState());
      processMap_.put("shutdown", new shutdown());
      processMap_.put("shutdownTabletServer", new shutdownTabletServer());
      processMap_.put("setSystemProperty", new setSystemProperty());
      processMap_.put("removeSystemProperty", new removeSystemProperty());
      processMap_.put("getMasterStats", new getMasterStats());
      processMap_.put("reportSplitExtent", new reportSplitExtent());
      processMap_.put("reportTabletStatus", new reportTabletStatus());
    }
    
    private Iface iface_;
    
    public boolean process(TProtocol iprot, TProtocol oprot) throws TException {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '" + msg.name + "'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }
    
    private class createTable implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        createTable_args args = new createTable_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createTable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createTable_result result = new createTable_result();
        try {
          iface_.createTable(args.tinfo, args.credentials, args.tableName, args.splitPoints, args.aggs, args.tt);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
          result.tope = tope;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing createTable", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createTable");
          oprot.writeMessageBegin(new TMessage("createTable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createTable", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class deleteTable implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        deleteTable_args args = new deleteTable_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("deleteTable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteTable_result result = new deleteTable_result();
        try {
          iface_.deleteTable(args.tinfo, args.credentials, args.tableName);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
          result.tope = tope;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing deleteTable", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing deleteTable");
          oprot.writeMessageBegin(new TMessage("deleteTable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("deleteTable", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class renameTable implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        renameTable_args args = new renameTable_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("renameTable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        renameTable_result result = new renameTable_result();
        try {
          iface_.renameTable(args.tinfo, args.credentials, args.oldTableName, args.newTableName);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
          result.tope = tope;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing renameTable", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing renameTable");
          oprot.writeMessageBegin(new TMessage("renameTable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("renameTable", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class offlineTable implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        offlineTable_args args = new offlineTable_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("offlineTable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        offlineTable_result result = new offlineTable_result();
        try {
          iface_.offlineTable(args.tinfo, args.credentials, args.tableName);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
          result.tope = tope;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing offlineTable", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing offlineTable");
          oprot.writeMessageBegin(new TMessage("offlineTable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("offlineTable", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class onlineTable implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        onlineTable_args args = new onlineTable_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("onlineTable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        onlineTable_result result = new onlineTable_result();
        try {
          iface_.onlineTable(args.tinfo, args.credentials, args.tableName);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
          result.tope = tope;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing onlineTable", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing onlineTable");
          oprot.writeMessageBegin(new TMessage("onlineTable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("onlineTable", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class flushTable implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        flushTable_args args = new flushTable_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("flushTable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        flushTable_result result = new flushTable_result();
        try {
          iface_.flushTable(args.tinfo, args.credentials, args.tableName);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
          result.tope = tope;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing flushTable", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing flushTable");
          oprot.writeMessageBegin(new TMessage("flushTable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("flushTable", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class setTableProperty implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        setTableProperty_args args = new setTableProperty_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("setTableProperty", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        setTableProperty_result result = new setTableProperty_result();
        try {
          iface_.setTableProperty(args.tinfo, args.credentials, args.tableName, args.property, args.value);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
          result.tope = tope;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing setTableProperty", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing setTableProperty");
          oprot.writeMessageBegin(new TMessage("setTableProperty", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("setTableProperty", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class removeTableProperty implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        removeTableProperty_args args = new removeTableProperty_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeTableProperty", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeTableProperty_result result = new removeTableProperty_result();
        try {
          iface_.removeTableProperty(args.tinfo, args.credentials, args.tableName, args.property);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
          result.tope = tope;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing removeTableProperty", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeTableProperty");
          oprot.writeMessageBegin(new TMessage("removeTableProperty", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeTableProperty", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class setMasterGoalState implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        setMasterGoalState_args args = new setMasterGoalState_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("setMasterGoalState", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        setMasterGoalState_result result = new setMasterGoalState_result();
        try {
          iface_.setMasterGoalState(args.tinfo, args.credentials, args.state);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing setMasterGoalState", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing setMasterGoalState");
          oprot.writeMessageBegin(new TMessage("setMasterGoalState", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("setMasterGoalState", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class shutdown implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        shutdown_args args = new shutdown_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("shutdown", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        shutdown_result result = new shutdown_result();
        try {
          iface_.shutdown(args.tinfo, args.credentials, args.stopTabletServers);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing shutdown", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing shutdown");
          oprot.writeMessageBegin(new TMessage("shutdown", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("shutdown", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class shutdownTabletServer implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        shutdownTabletServer_args args = new shutdownTabletServer_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("shutdownTabletServer", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        shutdownTabletServer_result result = new shutdownTabletServer_result();
        try {
          iface_.shutdownTabletServer(args.tinfo, args.credentials, args.tabletServer);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing shutdownTabletServer", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing shutdownTabletServer");
          oprot.writeMessageBegin(new TMessage("shutdownTabletServer", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("shutdownTabletServer", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class setSystemProperty implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        setSystemProperty_args args = new setSystemProperty_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("setSystemProperty", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        setSystemProperty_result result = new setSystemProperty_result();
        try {
          iface_.setSystemProperty(args.tinfo, args.credentials, args.property, args.value);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing setSystemProperty", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing setSystemProperty");
          oprot.writeMessageBegin(new TMessage("setSystemProperty", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("setSystemProperty", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class removeSystemProperty implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        removeSystemProperty_args args = new removeSystemProperty_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeSystemProperty", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeSystemProperty_result result = new removeSystemProperty_result();
        try {
          iface_.removeSystemProperty(args.tinfo, args.credentials, args.property);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing removeSystemProperty", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeSystemProperty");
          oprot.writeMessageBegin(new TMessage("removeSystemProperty", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeSystemProperty", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class getMasterStats implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        getMasterStats_args args = new getMasterStats_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMasterStats", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMasterStats_result result = new getMasterStats_result();
        try {
          result.success = iface_.getMasterStats(args.tinfo, args.credentials);
        } catch (org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
          result.sec = sec;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getMasterStats", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMasterStats");
          oprot.writeMessageBegin(new TMessage("getMasterStats", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMasterStats", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
      
    }
    
    private class reportSplitExtent implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        reportSplitExtent_args args = new reportSplitExtent_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reportSplitExtent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.reportSplitExtent(args.tinfo, args.credentials, args.serverName, args.split);
        return;
      }
    }
    
    private class reportTabletStatus implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
        reportTabletStatus_args args = new reportTabletStatus_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reportTabletStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.reportTabletStatus(args.tinfo, args.credentials, args.serverName, args.status, args.tablet);
        return;
      }
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class createTable_args implements TBase<createTable_args,createTable_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("createTable_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 6);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 2);
    private static final TField SPLIT_POINTS_FIELD_DESC = new TField("splitPoints", TType.LIST, (short) 3);
    private static final TField AGGS_FIELD_DESC = new TField("aggs", TType.MAP, (short) 4);
    private static final TField TT_FIELD_DESC = new TField("tt", TType.I32, (short) 5);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String tableName;
    public java.util.List<byte[]> splitPoints;
    public java.util.Map<String,String> aggs;
    /**
     * 
     * @see TimeType
     */
    public TimeType tt;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 6, "tinfo"), CREDENTIALS((short) 1, "credentials"), TABLE_NAME((short) 2, "tableName"), SPLIT_POINTS((short) 3, "splitPoints"), AGGS(
          (short) 4, "aggs"),
      /**
       * 
       * @see TimeType
       */
      TT((short) 5, "tt");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 6: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // SPLIT_POINTS
            return SPLIT_POINTS;
          case 4: // AGGS
            return AGGS;
          case 5: // TT
            return TT;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.TABLE_NAME, new FieldMetaData("tableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.SPLIT_POINTS, new FieldMetaData("splitPoints", TFieldRequirementType.DEFAULT, new ListMetaData(TType.LIST, new FieldValueMetaData(
          TType.STRING))));
      tmpMap.put(_Fields.AGGS, new FieldMetaData("aggs", TFieldRequirementType.DEFAULT, new MapMetaData(TType.MAP, new FieldValueMetaData(TType.STRING),
          new FieldValueMetaData(TType.STRING))));
      tmpMap.put(_Fields.TT, new FieldMetaData("tt", TFieldRequirementType.DEFAULT, new EnumMetaData(TType.ENUM, TimeType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createTable_args.class, metaDataMap);
    }
    
    public createTable_args() {}
    
    public createTable_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        java.util.List<byte[]> splitPoints, java.util.Map<String,String> aggs, TimeType tt) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.tableName = tableName;
      this.splitPoints = splitPoints;
      this.aggs = aggs;
      this.tt = tt;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTable_args(createTable_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetSplitPoints()) {
        java.util.List<byte[]> __this__splitPoints = new java.util.ArrayList<byte[]>();
        for (byte[] other_element : other.splitPoints) {
          byte[] temp_binary_element = new byte[other_element.length];
          System.arraycopy(other_element, 0, temp_binary_element, 0, other_element.length);
          __this__splitPoints.add(temp_binary_element);
        }
        this.splitPoints = __this__splitPoints;
      }
      if (other.isSetAggs()) {
        java.util.Map<String,String> __this__aggs = new java.util.HashMap<String,String>();
        for (java.util.Map.Entry<String,String> other_element : other.aggs.entrySet()) {
          
          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();
          
          String __this__aggs_copy_key = other_element_key;
          
          String __this__aggs_copy_value = other_element_value;
          
          __this__aggs.put(__this__aggs_copy_key, __this__aggs_copy_value);
        }
        this.aggs = __this__aggs;
      }
      if (other.isSetTt()) {
        this.tt = other.tt;
      }
    }
    
    public createTable_args deepCopy() {
      return new createTable_args(this);
    }
    
    @Deprecated
    public createTable_args clone() {
      return new createTable_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public createTable_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public createTable_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getTableName() {
      return this.tableName;
    }
    
    public createTable_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }
    
    public void unsetTableName() {
      this.tableName = null;
    }
    
    /** Returns true if field tableName is set (has been asigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }
    
    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }
    
    public int getSplitPointsSize() {
      return (this.splitPoints == null) ? 0 : this.splitPoints.size();
    }
    
    public java.util.Iterator<byte[]> getSplitPointsIterator() {
      return (this.splitPoints == null) ? null : this.splitPoints.iterator();
    }
    
    public void addToSplitPoints(byte[] elem) {
      if (this.splitPoints == null) {
        this.splitPoints = new java.util.ArrayList<byte[]>();
      }
      this.splitPoints.add(elem);
    }
    
    public java.util.List<byte[]> getSplitPoints() {
      return this.splitPoints;
    }
    
    public createTable_args setSplitPoints(java.util.List<byte[]> splitPoints) {
      this.splitPoints = splitPoints;
      return this;
    }
    
    public void unsetSplitPoints() {
      this.splitPoints = null;
    }
    
    /** Returns true if field splitPoints is set (has been asigned a value) and false otherwise */
    public boolean isSetSplitPoints() {
      return this.splitPoints != null;
    }
    
    public void setSplitPointsIsSet(boolean value) {
      if (!value) {
        this.splitPoints = null;
      }
    }
    
    public int getAggsSize() {
      return (this.aggs == null) ? 0 : this.aggs.size();
    }
    
    public void putToAggs(String key, String val) {
      if (this.aggs == null) {
        this.aggs = new java.util.HashMap<String,String>();
      }
      this.aggs.put(key, val);
    }
    
    public java.util.Map<String,String> getAggs() {
      return this.aggs;
    }
    
    public createTable_args setAggs(java.util.Map<String,String> aggs) {
      this.aggs = aggs;
      return this;
    }
    
    public void unsetAggs() {
      this.aggs = null;
    }
    
    /** Returns true if field aggs is set (has been asigned a value) and false otherwise */
    public boolean isSetAggs() {
      return this.aggs != null;
    }
    
    public void setAggsIsSet(boolean value) {
      if (!value) {
        this.aggs = null;
      }
    }
    
    /**
     * 
     * @see TimeType
     */
    public TimeType getTt() {
      return this.tt;
    }
    
    /**
     * 
     * @see TimeType
     */
    public createTable_args setTt(TimeType tt) {
      this.tt = tt;
      return this;
    }
    
    public void unsetTt() {
      this.tt = null;
    }
    
    /** Returns true if field tt is set (has been asigned a value) and false otherwise */
    public boolean isSetTt() {
      return this.tt != null;
    }
    
    public void setTtIsSet(boolean value) {
      if (!value) {
        this.tt = null;
      }
    }
    
    @SuppressWarnings("unchecked")
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case TABLE_NAME:
          if (value == null) {
            unsetTableName();
          } else {
            setTableName((String) value);
          }
          break;
        
        case SPLIT_POINTS:
          if (value == null) {
            unsetSplitPoints();
          } else {
            setSplitPoints((java.util.List<byte[]>) value);
          }
          break;
        
        case AGGS:
          if (value == null) {
            unsetAggs();
          } else {
            setAggs((java.util.Map<String,String>) value);
          }
          break;
        
        case TT:
          if (value == null) {
            unsetTt();
          } else {
            setTt((TimeType) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case TABLE_NAME:
          return getTableName();
          
        case SPLIT_POINTS:
          return getSplitPoints();
          
        case AGGS:
          return getAggs();
          
        case TT:
          return getTt();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case TABLE_NAME:
          return isSetTableName();
        case SPLIT_POINTS:
          return isSetSplitPoints();
        case AGGS:
          return isSetAggs();
        case TT:
          return isSetTt();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTable_args)
        return this.equals((createTable_args) that);
      return false;
    }
    
    public boolean equals(createTable_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }
      
      boolean this_present_splitPoints = true && this.isSetSplitPoints();
      boolean that_present_splitPoints = true && that.isSetSplitPoints();
      if (this_present_splitPoints || that_present_splitPoints) {
        if (!(this_present_splitPoints && that_present_splitPoints))
          return false;
        if (!this.splitPoints.equals(that.splitPoints))
          return false;
      }
      
      boolean this_present_aggs = true && this.isSetAggs();
      boolean that_present_aggs = true && that.isSetAggs();
      if (this_present_aggs || that_present_aggs) {
        if (!(this_present_aggs && that_present_aggs))
          return false;
        if (!this.aggs.equals(that.aggs))
          return false;
      }
      
      boolean this_present_tt = true && this.isSetTt();
      boolean that_present_tt = true && that.isSetTt();
      if (this_present_tt || that_present_tt) {
        if (!(this_present_tt && that_present_tt))
          return false;
        if (!this.tt.equals(that.tt))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(createTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      createTable_args typedOther = (createTable_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSplitPoints()).compareTo(typedOther.isSetSplitPoints());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplitPoints()) {
        lastComparison = TBaseHelper.compareTo(this.splitPoints, typedOther.splitPoints);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAggs()).compareTo(typedOther.isSetAggs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggs()) {
        lastComparison = TBaseHelper.compareTo(this.aggs, typedOther.aggs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTt()).compareTo(typedOther.isSetTt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTt()) {
        lastComparison = TBaseHelper.compareTo(this.tt, typedOther.tt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 6: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SPLIT_POINTS
            if (field.type == TType.LIST) {
              {
                TList _list39 = iprot.readListBegin();
                this.splitPoints = new java.util.ArrayList<byte[]>(_list39.size);
                for (int _i40 = 0; _i40 < _list39.size; ++_i40) {
                  byte[] _elem41;
                  _elem41 = iprot.readBinary();
                  this.splitPoints.add(_elem41);
                }
                iprot.readListEnd();
              }
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // AGGS
            if (field.type == TType.MAP) {
              {
                TMap _map42 = iprot.readMapBegin();
                this.aggs = new java.util.HashMap<String,String>(2 * _map42.size);
                for (int _i43 = 0; _i43 < _map42.size; ++_i43) {
                  String _key44;
                  String _val45;
                  _key44 = iprot.readString();
                  _val45 = iprot.readString();
                  this.aggs.put(_key44, _val45);
                }
                iprot.readMapEnd();
              }
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // TT
            if (field.type == TType.I32) {
              this.tt = TimeType.findByValue(iprot.readI32());
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      if (this.splitPoints != null) {
        oprot.writeFieldBegin(SPLIT_POINTS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.splitPoints.size()));
          for (byte[] _iter46 : this.splitPoints) {
            oprot.writeBinary(_iter46);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.aggs != null) {
        oprot.writeFieldBegin(AGGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.aggs.size()));
          for (java.util.Map.Entry<String,String> _iter47 : this.aggs.entrySet()) {
            oprot.writeString(_iter47.getKey());
            oprot.writeString(_iter47.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.tt != null) {
        oprot.writeFieldBegin(TT_FIELD_DESC);
        oprot.writeI32(this.tt.getValue());
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createTable_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      sb.append(", ");
      sb.append("splitPoints:");
      if (this.splitPoints == null) {
        sb.append("null");
      } else {
        sb.append(this.splitPoints);
      }
      sb.append(", ");
      sb.append("aggs:");
      if (this.aggs == null) {
        sb.append("null");
      } else {
        sb.append(this.aggs);
      }
      sb.append(", ");
      sb.append("tt:");
      if (this.tt == null) {
        sb.append("null");
      } else {
        sb.append(this.tt);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class createTable_result implements TBase<createTable_result,createTable_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("createTable_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    private static final TField TOPE_FIELD_DESC = new TField("tope", TType.STRUCT, (short) 2);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec"), TOPE((short) 2, "tope");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          case 2: // TOPE
            return TOPE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.TOPE, new FieldMetaData("tope", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(createTable_result.class, metaDataMap);
    }
    
    public createTable_result() {}
    
    public createTable_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this();
      this.sec = sec;
      this.tope = tope;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTable_result(createTable_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
      if (other.isSetTope()) {
        this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException(other.tope);
      }
    }
    
    public createTable_result deepCopy() {
      return new createTable_result(this);
    }
    
    @Deprecated
    public createTable_result clone() {
      return new createTable_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public createTable_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException getTope() {
      return this.tope;
    }
    
    public createTable_result setTope(org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this.tope = tope;
      return this;
    }
    
    public void unsetTope() {
      this.tope = null;
    }
    
    /** Returns true if field tope is set (has been asigned a value) and false otherwise */
    public boolean isSetTope() {
      return this.tope != null;
    }
    
    public void setTopeIsSet(boolean value) {
      if (!value) {
        this.tope = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
        
        case TOPE:
          if (value == null) {
            unsetTope();
          } else {
            setTope((org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
        case TOPE:
          return getTope();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
        case TOPE:
          return isSetTope();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTable_result)
        return this.equals((createTable_result) that);
      return false;
    }
    
    public boolean equals(createTable_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      boolean this_present_tope = true && this.isSetTope();
      boolean that_present_tope = true && that.isSetTope();
      if (this_present_tope || that_present_tope) {
        if (!(this_present_tope && that_present_tope))
          return false;
        if (!this.tope.equals(that.tope))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(createTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      createTable_result typedOther = (createTable_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTope()).compareTo(typedOther.isSetTope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTope()) {
        lastComparison = TBaseHelper.compareTo(this.tope, typedOther.tope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOPE
            if (field.type == TType.STRUCT) {
              this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException();
              this.tope.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTope()) {
        oprot.writeFieldBegin(TOPE_FIELD_DESC);
        this.tope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createTable_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(", ");
      sb.append("tope:");
      if (this.tope == null) {
        sb.append("null");
      } else {
        sb.append(this.tope);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class deleteTable_args implements TBase<deleteTable_args,deleteTable_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("deleteTable_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 3);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 2);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String tableName;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 3, "tinfo"), CREDENTIALS((short) 1, "credentials"), TABLE_NAME((short) 2, "tableName");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 3: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.TABLE_NAME, new FieldMetaData("tableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(deleteTable_args.class, metaDataMap);
    }
    
    public deleteTable_args() {}
    
    public deleteTable_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.tableName = tableName;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTable_args(deleteTable_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }
    
    public deleteTable_args deepCopy() {
      return new deleteTable_args(this);
    }
    
    @Deprecated
    public deleteTable_args clone() {
      return new deleteTable_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public deleteTable_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public deleteTable_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getTableName() {
      return this.tableName;
    }
    
    public deleteTable_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }
    
    public void unsetTableName() {
      this.tableName = null;
    }
    
    /** Returns true if field tableName is set (has been asigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }
    
    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case TABLE_NAME:
          if (value == null) {
            unsetTableName();
          } else {
            setTableName((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case TABLE_NAME:
          return getTableName();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case TABLE_NAME:
          return isSetTableName();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTable_args)
        return this.equals((deleteTable_args) that);
      return false;
    }
    
    public boolean equals(deleteTable_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(deleteTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      deleteTable_args typedOther = (deleteTable_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 3: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTable_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class deleteTable_result implements TBase<deleteTable_result,deleteTable_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("deleteTable_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    private static final TField TOPE_FIELD_DESC = new TField("tope", TType.STRUCT, (short) 2);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec"), TOPE((short) 2, "tope");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          case 2: // TOPE
            return TOPE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.TOPE, new FieldMetaData("tope", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(deleteTable_result.class, metaDataMap);
    }
    
    public deleteTable_result() {}
    
    public deleteTable_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this();
      this.sec = sec;
      this.tope = tope;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTable_result(deleteTable_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
      if (other.isSetTope()) {
        this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException(other.tope);
      }
    }
    
    public deleteTable_result deepCopy() {
      return new deleteTable_result(this);
    }
    
    @Deprecated
    public deleteTable_result clone() {
      return new deleteTable_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public deleteTable_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException getTope() {
      return this.tope;
    }
    
    public deleteTable_result setTope(org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this.tope = tope;
      return this;
    }
    
    public void unsetTope() {
      this.tope = null;
    }
    
    /** Returns true if field tope is set (has been asigned a value) and false otherwise */
    public boolean isSetTope() {
      return this.tope != null;
    }
    
    public void setTopeIsSet(boolean value) {
      if (!value) {
        this.tope = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
        
        case TOPE:
          if (value == null) {
            unsetTope();
          } else {
            setTope((org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
        case TOPE:
          return getTope();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
        case TOPE:
          return isSetTope();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTable_result)
        return this.equals((deleteTable_result) that);
      return false;
    }
    
    public boolean equals(deleteTable_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      boolean this_present_tope = true && this.isSetTope();
      boolean that_present_tope = true && that.isSetTope();
      if (this_present_tope || that_present_tope) {
        if (!(this_present_tope && that_present_tope))
          return false;
        if (!this.tope.equals(that.tope))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(deleteTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      deleteTable_result typedOther = (deleteTable_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTope()).compareTo(typedOther.isSetTope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTope()) {
        lastComparison = TBaseHelper.compareTo(this.tope, typedOther.tope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOPE
            if (field.type == TType.STRUCT) {
              this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException();
              this.tope.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTope()) {
        oprot.writeFieldBegin(TOPE_FIELD_DESC);
        this.tope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTable_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(", ");
      sb.append("tope:");
      if (this.tope == null) {
        sb.append("null");
      } else {
        sb.append(this.tope);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class renameTable_args implements TBase<renameTable_args,renameTable_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("renameTable_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 4);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField OLD_TABLE_NAME_FIELD_DESC = new TField("oldTableName", TType.STRING, (short) 2);
    private static final TField NEW_TABLE_NAME_FIELD_DESC = new TField("newTableName", TType.STRING, (short) 3);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String oldTableName;
    public String newTableName;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 4, "tinfo"), CREDENTIALS((short) 1, "credentials"), OLD_TABLE_NAME((short) 2, "oldTableName"), NEW_TABLE_NAME((short) 3, "newTableName");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 4: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // OLD_TABLE_NAME
            return OLD_TABLE_NAME;
          case 3: // NEW_TABLE_NAME
            return NEW_TABLE_NAME;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.OLD_TABLE_NAME, new FieldMetaData("oldTableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.NEW_TABLE_NAME, new FieldMetaData("newTableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(renameTable_args.class, metaDataMap);
    }
    
    public renameTable_args() {}
    
    public renameTable_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String oldTableName,
        String newTableName) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.oldTableName = oldTableName;
      this.newTableName = newTableName;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameTable_args(renameTable_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetOldTableName()) {
        this.oldTableName = other.oldTableName;
      }
      if (other.isSetNewTableName()) {
        this.newTableName = other.newTableName;
      }
    }
    
    public renameTable_args deepCopy() {
      return new renameTable_args(this);
    }
    
    @Deprecated
    public renameTable_args clone() {
      return new renameTable_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public renameTable_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public renameTable_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getOldTableName() {
      return this.oldTableName;
    }
    
    public renameTable_args setOldTableName(String oldTableName) {
      this.oldTableName = oldTableName;
      return this;
    }
    
    public void unsetOldTableName() {
      this.oldTableName = null;
    }
    
    /** Returns true if field oldTableName is set (has been asigned a value) and false otherwise */
    public boolean isSetOldTableName() {
      return this.oldTableName != null;
    }
    
    public void setOldTableNameIsSet(boolean value) {
      if (!value) {
        this.oldTableName = null;
      }
    }
    
    public String getNewTableName() {
      return this.newTableName;
    }
    
    public renameTable_args setNewTableName(String newTableName) {
      this.newTableName = newTableName;
      return this;
    }
    
    public void unsetNewTableName() {
      this.newTableName = null;
    }
    
    /** Returns true if field newTableName is set (has been asigned a value) and false otherwise */
    public boolean isSetNewTableName() {
      return this.newTableName != null;
    }
    
    public void setNewTableNameIsSet(boolean value) {
      if (!value) {
        this.newTableName = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case OLD_TABLE_NAME:
          if (value == null) {
            unsetOldTableName();
          } else {
            setOldTableName((String) value);
          }
          break;
        
        case NEW_TABLE_NAME:
          if (value == null) {
            unsetNewTableName();
          } else {
            setNewTableName((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case OLD_TABLE_NAME:
          return getOldTableName();
          
        case NEW_TABLE_NAME:
          return getNewTableName();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case OLD_TABLE_NAME:
          return isSetOldTableName();
        case NEW_TABLE_NAME:
          return isSetNewTableName();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof renameTable_args)
        return this.equals((renameTable_args) that);
      return false;
    }
    
    public boolean equals(renameTable_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_oldTableName = true && this.isSetOldTableName();
      boolean that_present_oldTableName = true && that.isSetOldTableName();
      if (this_present_oldTableName || that_present_oldTableName) {
        if (!(this_present_oldTableName && that_present_oldTableName))
          return false;
        if (!this.oldTableName.equals(that.oldTableName))
          return false;
      }
      
      boolean this_present_newTableName = true && this.isSetNewTableName();
      boolean that_present_newTableName = true && that.isSetNewTableName();
      if (this_present_newTableName || that_present_newTableName) {
        if (!(this_present_newTableName && that_present_newTableName))
          return false;
        if (!this.newTableName.equals(that.newTableName))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(renameTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      renameTable_args typedOther = (renameTable_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldTableName()).compareTo(typedOther.isSetOldTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldTableName()) {
        lastComparison = TBaseHelper.compareTo(this.oldTableName, typedOther.oldTableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewTableName()).compareTo(typedOther.isSetNewTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewTableName()) {
        lastComparison = TBaseHelper.compareTo(this.newTableName, typedOther.newTableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 4: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // OLD_TABLE_NAME
            if (field.type == TType.STRING) {
              this.oldTableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NEW_TABLE_NAME
            if (field.type == TType.STRING) {
              this.newTableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.oldTableName != null) {
        oprot.writeFieldBegin(OLD_TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.oldTableName);
        oprot.writeFieldEnd();
      }
      if (this.newTableName != null) {
        oprot.writeFieldBegin(NEW_TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.newTableName);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("renameTable_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("oldTableName:");
      if (this.oldTableName == null) {
        sb.append("null");
      } else {
        sb.append(this.oldTableName);
      }
      sb.append(", ");
      sb.append("newTableName:");
      if (this.newTableName == null) {
        sb.append("null");
      } else {
        sb.append(this.newTableName);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class renameTable_result implements TBase<renameTable_result,renameTable_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("renameTable_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    private static final TField TOPE_FIELD_DESC = new TField("tope", TType.STRUCT, (short) 2);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec"), TOPE((short) 2, "tope");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          case 2: // TOPE
            return TOPE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.TOPE, new FieldMetaData("tope", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(renameTable_result.class, metaDataMap);
    }
    
    public renameTable_result() {}
    
    public renameTable_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this();
      this.sec = sec;
      this.tope = tope;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public renameTable_result(renameTable_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
      if (other.isSetTope()) {
        this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException(other.tope);
      }
    }
    
    public renameTable_result deepCopy() {
      return new renameTable_result(this);
    }
    
    @Deprecated
    public renameTable_result clone() {
      return new renameTable_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public renameTable_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException getTope() {
      return this.tope;
    }
    
    public renameTable_result setTope(org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this.tope = tope;
      return this;
    }
    
    public void unsetTope() {
      this.tope = null;
    }
    
    /** Returns true if field tope is set (has been asigned a value) and false otherwise */
    public boolean isSetTope() {
      return this.tope != null;
    }
    
    public void setTopeIsSet(boolean value) {
      if (!value) {
        this.tope = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
        
        case TOPE:
          if (value == null) {
            unsetTope();
          } else {
            setTope((org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
        case TOPE:
          return getTope();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
        case TOPE:
          return isSetTope();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof renameTable_result)
        return this.equals((renameTable_result) that);
      return false;
    }
    
    public boolean equals(renameTable_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      boolean this_present_tope = true && this.isSetTope();
      boolean that_present_tope = true && that.isSetTope();
      if (this_present_tope || that_present_tope) {
        if (!(this_present_tope && that_present_tope))
          return false;
        if (!this.tope.equals(that.tope))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(renameTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      renameTable_result typedOther = (renameTable_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTope()).compareTo(typedOther.isSetTope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTope()) {
        lastComparison = TBaseHelper.compareTo(this.tope, typedOther.tope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOPE
            if (field.type == TType.STRUCT) {
              this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException();
              this.tope.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTope()) {
        oprot.writeFieldBegin(TOPE_FIELD_DESC);
        this.tope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("renameTable_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(", ");
      sb.append("tope:");
      if (this.tope == null) {
        sb.append("null");
      } else {
        sb.append(this.tope);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class offlineTable_args implements TBase<offlineTable_args,offlineTable_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("offlineTable_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 3);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 2);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String tableName;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 3, "tinfo"), CREDENTIALS((short) 1, "credentials"), TABLE_NAME((short) 2, "tableName");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 3: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.TABLE_NAME, new FieldMetaData("tableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(offlineTable_args.class, metaDataMap);
    }
    
    public offlineTable_args() {}
    
    public offlineTable_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.tableName = tableName;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offlineTable_args(offlineTable_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }
    
    public offlineTable_args deepCopy() {
      return new offlineTable_args(this);
    }
    
    @Deprecated
    public offlineTable_args clone() {
      return new offlineTable_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public offlineTable_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public offlineTable_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getTableName() {
      return this.tableName;
    }
    
    public offlineTable_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }
    
    public void unsetTableName() {
      this.tableName = null;
    }
    
    /** Returns true if field tableName is set (has been asigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }
    
    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case TABLE_NAME:
          if (value == null) {
            unsetTableName();
          } else {
            setTableName((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case TABLE_NAME:
          return getTableName();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case TABLE_NAME:
          return isSetTableName();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offlineTable_args)
        return this.equals((offlineTable_args) that);
      return false;
    }
    
    public boolean equals(offlineTable_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(offlineTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      offlineTable_args typedOther = (offlineTable_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 3: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offlineTable_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class offlineTable_result implements TBase<offlineTable_result,offlineTable_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("offlineTable_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    private static final TField TOPE_FIELD_DESC = new TField("tope", TType.STRUCT, (short) 2);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec"), TOPE((short) 2, "tope");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          case 2: // TOPE
            return TOPE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.TOPE, new FieldMetaData("tope", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(offlineTable_result.class, metaDataMap);
    }
    
    public offlineTable_result() {}
    
    public offlineTable_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this();
      this.sec = sec;
      this.tope = tope;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offlineTable_result(offlineTable_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
      if (other.isSetTope()) {
        this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException(other.tope);
      }
    }
    
    public offlineTable_result deepCopy() {
      return new offlineTable_result(this);
    }
    
    @Deprecated
    public offlineTable_result clone() {
      return new offlineTable_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public offlineTable_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException getTope() {
      return this.tope;
    }
    
    public offlineTable_result setTope(org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this.tope = tope;
      return this;
    }
    
    public void unsetTope() {
      this.tope = null;
    }
    
    /** Returns true if field tope is set (has been asigned a value) and false otherwise */
    public boolean isSetTope() {
      return this.tope != null;
    }
    
    public void setTopeIsSet(boolean value) {
      if (!value) {
        this.tope = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
        
        case TOPE:
          if (value == null) {
            unsetTope();
          } else {
            setTope((org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
        case TOPE:
          return getTope();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
        case TOPE:
          return isSetTope();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offlineTable_result)
        return this.equals((offlineTable_result) that);
      return false;
    }
    
    public boolean equals(offlineTable_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      boolean this_present_tope = true && this.isSetTope();
      boolean that_present_tope = true && that.isSetTope();
      if (this_present_tope || that_present_tope) {
        if (!(this_present_tope && that_present_tope))
          return false;
        if (!this.tope.equals(that.tope))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(offlineTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      offlineTable_result typedOther = (offlineTable_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTope()).compareTo(typedOther.isSetTope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTope()) {
        lastComparison = TBaseHelper.compareTo(this.tope, typedOther.tope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOPE
            if (field.type == TType.STRUCT) {
              this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException();
              this.tope.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTope()) {
        oprot.writeFieldBegin(TOPE_FIELD_DESC);
        this.tope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offlineTable_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(", ");
      sb.append("tope:");
      if (this.tope == null) {
        sb.append("null");
      } else {
        sb.append(this.tope);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class onlineTable_args implements TBase<onlineTable_args,onlineTable_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("onlineTable_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 3);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 2);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String tableName;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 3, "tinfo"), CREDENTIALS((short) 1, "credentials"), TABLE_NAME((short) 2, "tableName");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 3: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.TABLE_NAME, new FieldMetaData("tableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(onlineTable_args.class, metaDataMap);
    }
    
    public onlineTable_args() {}
    
    public onlineTable_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.tableName = tableName;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onlineTable_args(onlineTable_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }
    
    public onlineTable_args deepCopy() {
      return new onlineTable_args(this);
    }
    
    @Deprecated
    public onlineTable_args clone() {
      return new onlineTable_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public onlineTable_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public onlineTable_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getTableName() {
      return this.tableName;
    }
    
    public onlineTable_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }
    
    public void unsetTableName() {
      this.tableName = null;
    }
    
    /** Returns true if field tableName is set (has been asigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }
    
    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case TABLE_NAME:
          if (value == null) {
            unsetTableName();
          } else {
            setTableName((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case TABLE_NAME:
          return getTableName();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case TABLE_NAME:
          return isSetTableName();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onlineTable_args)
        return this.equals((onlineTable_args) that);
      return false;
    }
    
    public boolean equals(onlineTable_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(onlineTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      onlineTable_args typedOther = (onlineTable_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 3: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onlineTable_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class onlineTable_result implements TBase<onlineTable_result,onlineTable_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("onlineTable_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    private static final TField TOPE_FIELD_DESC = new TField("tope", TType.STRUCT, (short) 2);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec"), TOPE((short) 2, "tope");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          case 2: // TOPE
            return TOPE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.TOPE, new FieldMetaData("tope", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(onlineTable_result.class, metaDataMap);
    }
    
    public onlineTable_result() {}
    
    public onlineTable_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this();
      this.sec = sec;
      this.tope = tope;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onlineTable_result(onlineTable_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
      if (other.isSetTope()) {
        this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException(other.tope);
      }
    }
    
    public onlineTable_result deepCopy() {
      return new onlineTable_result(this);
    }
    
    @Deprecated
    public onlineTable_result clone() {
      return new onlineTable_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public onlineTable_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException getTope() {
      return this.tope;
    }
    
    public onlineTable_result setTope(org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this.tope = tope;
      return this;
    }
    
    public void unsetTope() {
      this.tope = null;
    }
    
    /** Returns true if field tope is set (has been asigned a value) and false otherwise */
    public boolean isSetTope() {
      return this.tope != null;
    }
    
    public void setTopeIsSet(boolean value) {
      if (!value) {
        this.tope = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
        
        case TOPE:
          if (value == null) {
            unsetTope();
          } else {
            setTope((org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
        case TOPE:
          return getTope();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
        case TOPE:
          return isSetTope();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onlineTable_result)
        return this.equals((onlineTable_result) that);
      return false;
    }
    
    public boolean equals(onlineTable_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      boolean this_present_tope = true && this.isSetTope();
      boolean that_present_tope = true && that.isSetTope();
      if (this_present_tope || that_present_tope) {
        if (!(this_present_tope && that_present_tope))
          return false;
        if (!this.tope.equals(that.tope))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(onlineTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      onlineTable_result typedOther = (onlineTable_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTope()).compareTo(typedOther.isSetTope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTope()) {
        lastComparison = TBaseHelper.compareTo(this.tope, typedOther.tope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOPE
            if (field.type == TType.STRUCT) {
              this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException();
              this.tope.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTope()) {
        oprot.writeFieldBegin(TOPE_FIELD_DESC);
        this.tope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onlineTable_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(", ");
      sb.append("tope:");
      if (this.tope == null) {
        sb.append("null");
      } else {
        sb.append(this.tope);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class flushTable_args implements TBase<flushTable_args,flushTable_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("flushTable_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 3);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 2);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String tableName;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 3, "tinfo"), CREDENTIALS((short) 1, "credentials"), TABLE_NAME((short) 2, "tableName");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 3: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.TABLE_NAME, new FieldMetaData("tableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(flushTable_args.class, metaDataMap);
    }
    
    public flushTable_args() {}
    
    public flushTable_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.tableName = tableName;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flushTable_args(flushTable_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
    }
    
    public flushTable_args deepCopy() {
      return new flushTable_args(this);
    }
    
    @Deprecated
    public flushTable_args clone() {
      return new flushTable_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public flushTable_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public flushTable_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getTableName() {
      return this.tableName;
    }
    
    public flushTable_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }
    
    public void unsetTableName() {
      this.tableName = null;
    }
    
    /** Returns true if field tableName is set (has been asigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }
    
    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case TABLE_NAME:
          if (value == null) {
            unsetTableName();
          } else {
            setTableName((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case TABLE_NAME:
          return getTableName();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case TABLE_NAME:
          return isSetTableName();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flushTable_args)
        return this.equals((flushTable_args) that);
      return false;
    }
    
    public boolean equals(flushTable_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(flushTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      flushTable_args typedOther = (flushTable_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 3: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("flushTable_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class flushTable_result implements TBase<flushTable_result,flushTable_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("flushTable_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    private static final TField TOPE_FIELD_DESC = new TField("tope", TType.STRUCT, (short) 2);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec"), TOPE((short) 2, "tope");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          case 2: // TOPE
            return TOPE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.TOPE, new FieldMetaData("tope", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(flushTable_result.class, metaDataMap);
    }
    
    public flushTable_result() {}
    
    public flushTable_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this();
      this.sec = sec;
      this.tope = tope;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flushTable_result(flushTable_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
      if (other.isSetTope()) {
        this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException(other.tope);
      }
    }
    
    public flushTable_result deepCopy() {
      return new flushTable_result(this);
    }
    
    @Deprecated
    public flushTable_result clone() {
      return new flushTable_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public flushTable_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException getTope() {
      return this.tope;
    }
    
    public flushTable_result setTope(org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this.tope = tope;
      return this;
    }
    
    public void unsetTope() {
      this.tope = null;
    }
    
    /** Returns true if field tope is set (has been asigned a value) and false otherwise */
    public boolean isSetTope() {
      return this.tope != null;
    }
    
    public void setTopeIsSet(boolean value) {
      if (!value) {
        this.tope = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
        
        case TOPE:
          if (value == null) {
            unsetTope();
          } else {
            setTope((org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
        case TOPE:
          return getTope();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
        case TOPE:
          return isSetTope();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flushTable_result)
        return this.equals((flushTable_result) that);
      return false;
    }
    
    public boolean equals(flushTable_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      boolean this_present_tope = true && this.isSetTope();
      boolean that_present_tope = true && that.isSetTope();
      if (this_present_tope || that_present_tope) {
        if (!(this_present_tope && that_present_tope))
          return false;
        if (!this.tope.equals(that.tope))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(flushTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      flushTable_result typedOther = (flushTable_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTope()).compareTo(typedOther.isSetTope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTope()) {
        lastComparison = TBaseHelper.compareTo(this.tope, typedOther.tope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOPE
            if (field.type == TType.STRUCT) {
              this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException();
              this.tope.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTope()) {
        oprot.writeFieldBegin(TOPE_FIELD_DESC);
        this.tope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("flushTable_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(", ");
      sb.append("tope:");
      if (this.tope == null) {
        sb.append("null");
      } else {
        sb.append(this.tope);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class setTableProperty_args implements TBase<setTableProperty_args,setTableProperty_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("setTableProperty_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 5);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 2);
    private static final TField PROPERTY_FIELD_DESC = new TField("property", TType.STRING, (short) 3);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short) 4);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String tableName;
    public String property;
    public String value;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 5, "tinfo"), CREDENTIALS((short) 1, "credentials"), TABLE_NAME((short) 2, "tableName"), PROPERTY((short) 3, "property"), VALUE((short) 4,
          "value");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 5: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // PROPERTY
            return PROPERTY;
          case 4: // VALUE
            return VALUE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.TABLE_NAME, new FieldMetaData("tableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PROPERTY, new FieldMetaData("property", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(setTableProperty_args.class, metaDataMap);
    }
    
    public setTableProperty_args() {}
    
    public setTableProperty_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        String property, String value) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.tableName = tableName;
      this.property = property;
      this.value = value;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTableProperty_args(setTableProperty_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetProperty()) {
        this.property = other.property;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }
    
    public setTableProperty_args deepCopy() {
      return new setTableProperty_args(this);
    }
    
    @Deprecated
    public setTableProperty_args clone() {
      return new setTableProperty_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public setTableProperty_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public setTableProperty_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getTableName() {
      return this.tableName;
    }
    
    public setTableProperty_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }
    
    public void unsetTableName() {
      this.tableName = null;
    }
    
    /** Returns true if field tableName is set (has been asigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }
    
    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }
    
    public String getProperty() {
      return this.property;
    }
    
    public setTableProperty_args setProperty(String property) {
      this.property = property;
      return this;
    }
    
    public void unsetProperty() {
      this.property = null;
    }
    
    /** Returns true if field property is set (has been asigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }
    
    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }
    
    public String getValue() {
      return this.value;
    }
    
    public setTableProperty_args setValue(String value) {
      this.value = value;
      return this;
    }
    
    public void unsetValue() {
      this.value = null;
    }
    
    /** Returns true if field value is set (has been asigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }
    
    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case TABLE_NAME:
          if (value == null) {
            unsetTableName();
          } else {
            setTableName((String) value);
          }
          break;
        
        case PROPERTY:
          if (value == null) {
            unsetProperty();
          } else {
            setProperty((String) value);
          }
          break;
        
        case VALUE:
          if (value == null) {
            unsetValue();
          } else {
            setValue((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case TABLE_NAME:
          return getTableName();
          
        case PROPERTY:
          return getProperty();
          
        case VALUE:
          return getValue();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case TABLE_NAME:
          return isSetTableName();
        case PROPERTY:
          return isSetProperty();
        case VALUE:
          return isSetValue();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setTableProperty_args)
        return this.equals((setTableProperty_args) that);
      return false;
    }
    
    public boolean equals(setTableProperty_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }
      
      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }
      
      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(setTableProperty_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      setTableProperty_args typedOther = (setTableProperty_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(typedOther.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = TBaseHelper.compareTo(this.property, typedOther.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 5: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PROPERTY
            if (field.type == TType.STRING) {
              this.property = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // VALUE
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      if (this.property != null) {
        oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
        oprot.writeString(this.property);
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setTableProperty_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class setTableProperty_result implements TBase<setTableProperty_result,setTableProperty_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("setTableProperty_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    private static final TField TOPE_FIELD_DESC = new TField("tope", TType.STRUCT, (short) 2);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec"), TOPE((short) 2, "tope");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          case 2: // TOPE
            return TOPE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.TOPE, new FieldMetaData("tope", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(setTableProperty_result.class, metaDataMap);
    }
    
    public setTableProperty_result() {}
    
    public setTableProperty_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this();
      this.sec = sec;
      this.tope = tope;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTableProperty_result(setTableProperty_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
      if (other.isSetTope()) {
        this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException(other.tope);
      }
    }
    
    public setTableProperty_result deepCopy() {
      return new setTableProperty_result(this);
    }
    
    @Deprecated
    public setTableProperty_result clone() {
      return new setTableProperty_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public setTableProperty_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException getTope() {
      return this.tope;
    }
    
    public setTableProperty_result setTope(org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this.tope = tope;
      return this;
    }
    
    public void unsetTope() {
      this.tope = null;
    }
    
    /** Returns true if field tope is set (has been asigned a value) and false otherwise */
    public boolean isSetTope() {
      return this.tope != null;
    }
    
    public void setTopeIsSet(boolean value) {
      if (!value) {
        this.tope = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
        
        case TOPE:
          if (value == null) {
            unsetTope();
          } else {
            setTope((org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
        case TOPE:
          return getTope();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
        case TOPE:
          return isSetTope();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setTableProperty_result)
        return this.equals((setTableProperty_result) that);
      return false;
    }
    
    public boolean equals(setTableProperty_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      boolean this_present_tope = true && this.isSetTope();
      boolean that_present_tope = true && that.isSetTope();
      if (this_present_tope || that_present_tope) {
        if (!(this_present_tope && that_present_tope))
          return false;
        if (!this.tope.equals(that.tope))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(setTableProperty_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      setTableProperty_result typedOther = (setTableProperty_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTope()).compareTo(typedOther.isSetTope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTope()) {
        lastComparison = TBaseHelper.compareTo(this.tope, typedOther.tope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOPE
            if (field.type == TType.STRUCT) {
              this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException();
              this.tope.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTope()) {
        oprot.writeFieldBegin(TOPE_FIELD_DESC);
        this.tope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setTableProperty_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(", ");
      sb.append("tope:");
      if (this.tope == null) {
        sb.append("null");
      } else {
        sb.append(this.tope);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class removeTableProperty_args implements TBase<removeTableProperty_args,removeTableProperty_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("removeTableProperty_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 4);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField TABLE_NAME_FIELD_DESC = new TField("tableName", TType.STRING, (short) 2);
    private static final TField PROPERTY_FIELD_DESC = new TField("property", TType.STRING, (short) 3);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String tableName;
    public String property;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 4, "tinfo"), CREDENTIALS((short) 1, "credentials"), TABLE_NAME((short) 2, "tableName"), PROPERTY((short) 3, "property");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 4: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.TABLE_NAME, new FieldMetaData("tableName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.PROPERTY, new FieldMetaData("property", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(removeTableProperty_args.class, metaDataMap);
    }
    
    public removeTableProperty_args() {}
    
    public removeTableProperty_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tableName,
        String property) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.tableName = tableName;
      this.property = property;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTableProperty_args(removeTableProperty_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      if (other.isSetProperty()) {
        this.property = other.property;
      }
    }
    
    public removeTableProperty_args deepCopy() {
      return new removeTableProperty_args(this);
    }
    
    @Deprecated
    public removeTableProperty_args clone() {
      return new removeTableProperty_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public removeTableProperty_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public removeTableProperty_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getTableName() {
      return this.tableName;
    }
    
    public removeTableProperty_args setTableName(String tableName) {
      this.tableName = tableName;
      return this;
    }
    
    public void unsetTableName() {
      this.tableName = null;
    }
    
    /** Returns true if field tableName is set (has been asigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }
    
    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }
    
    public String getProperty() {
      return this.property;
    }
    
    public removeTableProperty_args setProperty(String property) {
      this.property = property;
      return this;
    }
    
    public void unsetProperty() {
      this.property = null;
    }
    
    /** Returns true if field property is set (has been asigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }
    
    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case TABLE_NAME:
          if (value == null) {
            unsetTableName();
          } else {
            setTableName((String) value);
          }
          break;
        
        case PROPERTY:
          if (value == null) {
            unsetProperty();
          } else {
            setProperty((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case TABLE_NAME:
          return getTableName();
          
        case PROPERTY:
          return getProperty();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case TABLE_NAME:
          return isSetTableName();
        case PROPERTY:
          return isSetProperty();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTableProperty_args)
        return this.equals((removeTableProperty_args) that);
      return false;
    }
    
    public boolean equals(removeTableProperty_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }
      
      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(removeTableProperty_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      removeTableProperty_args typedOther = (removeTableProperty_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = TBaseHelper.compareTo(this.tableName, typedOther.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(typedOther.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = TBaseHelper.compareTo(this.property, typedOther.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 4: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == TType.STRING) {
              this.tableName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PROPERTY
            if (field.type == TType.STRING) {
              this.property = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.tableName);
        oprot.writeFieldEnd();
      }
      if (this.property != null) {
        oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
        oprot.writeString(this.property);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTableProperty_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class removeTableProperty_result implements TBase<removeTableProperty_result,removeTableProperty_result._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("removeTableProperty_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    private static final TField TOPE_FIELD_DESC = new TField("tope", TType.STRUCT, (short) 2);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec"), TOPE((short) 2, "tope");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          case 2: // TOPE
            return TOPE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.TOPE, new FieldMetaData("tope", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(removeTableProperty_result.class, metaDataMap);
    }
    
    public removeTableProperty_result() {}
    
    public removeTableProperty_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec,
        org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this();
      this.sec = sec;
      this.tope = tope;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTableProperty_result(removeTableProperty_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
      if (other.isSetTope()) {
        this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException(other.tope);
      }
    }
    
    public removeTableProperty_result deepCopy() {
      return new removeTableProperty_result(this);
    }
    
    @Deprecated
    public removeTableProperty_result clone() {
      return new removeTableProperty_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public removeTableProperty_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException getTope() {
      return this.tope;
    }
    
    public removeTableProperty_result setTope(org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException tope) {
      this.tope = tope;
      return this;
    }
    
    public void unsetTope() {
      this.tope = null;
    }
    
    /** Returns true if field tope is set (has been asigned a value) and false otherwise */
    public boolean isSetTope() {
      return this.tope != null;
    }
    
    public void setTopeIsSet(boolean value) {
      if (!value) {
        this.tope = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
        
        case TOPE:
          if (value == null) {
            unsetTope();
          } else {
            setTope((org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
        case TOPE:
          return getTope();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
        case TOPE:
          return isSetTope();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTableProperty_result)
        return this.equals((removeTableProperty_result) that);
      return false;
    }
    
    public boolean equals(removeTableProperty_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      boolean this_present_tope = true && this.isSetTope();
      boolean that_present_tope = true && that.isSetTope();
      if (this_present_tope || that_present_tope) {
        if (!(this_present_tope && that_present_tope))
          return false;
        if (!this.tope.equals(that.tope))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(removeTableProperty_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      removeTableProperty_result typedOther = (removeTableProperty_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTope()).compareTo(typedOther.isSetTope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTope()) {
        lastComparison = TBaseHelper.compareTo(this.tope, typedOther.tope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOPE
            if (field.type == TType.STRUCT) {
              this.tope = new org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException();
              this.tope.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTope()) {
        oprot.writeFieldBegin(TOPE_FIELD_DESC);
        this.tope.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTableProperty_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(", ");
      sb.append("tope:");
      if (this.tope == null) {
        sb.append("null");
      } else {
        sb.append(this.tope);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class setMasterGoalState_args implements TBase<setMasterGoalState_args,setMasterGoalState_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("setMasterGoalState_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 3);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField STATE_FIELD_DESC = new TField("state", TType.I32, (short) 2);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    /**
     * 
     * @see MasterGoalState
     */
    public MasterGoalState state;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 3, "tinfo"), CREDENTIALS((short) 1, "credentials"),
      /**
       * 
       * @see MasterGoalState
       */
      STATE((short) 2, "state");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 3: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // STATE
            return STATE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.STATE, new FieldMetaData("state", TFieldRequirementType.DEFAULT, new EnumMetaData(TType.ENUM, MasterGoalState.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(setMasterGoalState_args.class, metaDataMap);
    }
    
    public setMasterGoalState_args() {}
    
    public setMasterGoalState_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, MasterGoalState state) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.state = state;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setMasterGoalState_args(setMasterGoalState_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetState()) {
        this.state = other.state;
      }
    }
    
    public setMasterGoalState_args deepCopy() {
      return new setMasterGoalState_args(this);
    }
    
    @Deprecated
    public setMasterGoalState_args clone() {
      return new setMasterGoalState_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public setMasterGoalState_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public setMasterGoalState_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    /**
     * 
     * @see MasterGoalState
     */
    public MasterGoalState getState() {
      return this.state;
    }
    
    /**
     * 
     * @see MasterGoalState
     */
    public setMasterGoalState_args setState(MasterGoalState state) {
      this.state = state;
      return this;
    }
    
    public void unsetState() {
      this.state = null;
    }
    
    /** Returns true if field state is set (has been asigned a value) and false otherwise */
    public boolean isSetState() {
      return this.state != null;
    }
    
    public void setStateIsSet(boolean value) {
      if (!value) {
        this.state = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case STATE:
          if (value == null) {
            unsetState();
          } else {
            setState((MasterGoalState) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case STATE:
          return getState();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case STATE:
          return isSetState();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setMasterGoalState_args)
        return this.equals((setMasterGoalState_args) that);
      return false;
    }
    
    public boolean equals(setMasterGoalState_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_state = true && this.isSetState();
      boolean that_present_state = true && that.isSetState();
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (!this.state.equals(that.state))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(setMasterGoalState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      setMasterGoalState_args typedOther = (setMasterGoalState_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = TBaseHelper.compareTo(this.state, typedOther.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 3: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // STATE
            if (field.type == TType.I32) {
              this.state = MasterGoalState.findByValue(iprot.readI32());
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(this.state.getValue());
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setMasterGoalState_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class setMasterGoalState_result implements TBase<setMasterGoalState_result,setMasterGoalState_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("setMasterGoalState_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(setMasterGoalState_result.class, metaDataMap);
    }
    
    public setMasterGoalState_result() {}
    
    public setMasterGoalState_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setMasterGoalState_result(setMasterGoalState_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public setMasterGoalState_result deepCopy() {
      return new setMasterGoalState_result(this);
    }
    
    @Deprecated
    public setMasterGoalState_result clone() {
      return new setMasterGoalState_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public setMasterGoalState_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setMasterGoalState_result)
        return this.equals((setMasterGoalState_result) that);
      return false;
    }
    
    public boolean equals(setMasterGoalState_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(setMasterGoalState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      setMasterGoalState_result typedOther = (setMasterGoalState_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setMasterGoalState_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class shutdown_args implements TBase<shutdown_args,shutdown_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("shutdown_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 3);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField STOP_TABLET_SERVERS_FIELD_DESC = new TField("stopTabletServers", TType.BOOL, (short) 2);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public boolean stopTabletServers;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 3, "tinfo"), CREDENTIALS((short) 1, "credentials"), STOP_TABLET_SERVERS((short) 2, "stopTabletServers");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 3: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // STOP_TABLET_SERVERS
            return STOP_TABLET_SERVERS;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    private static final int __STOPTABLETSERVERS_ISSET_ID = 0;
    private java.util.BitSet __isset_bit_vector = new java.util.BitSet(1);
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.STOP_TABLET_SERVERS, new FieldMetaData("stopTabletServers", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(shutdown_args.class, metaDataMap);
    }
    
    public shutdown_args() {}
    
    public shutdown_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, boolean stopTabletServers) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.stopTabletServers = stopTabletServers;
      setStopTabletServersIsSet(true);
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdown_args(shutdown_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      this.stopTabletServers = other.stopTabletServers;
    }
    
    public shutdown_args deepCopy() {
      return new shutdown_args(this);
    }
    
    @Deprecated
    public shutdown_args clone() {
      return new shutdown_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public shutdown_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public shutdown_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public boolean isStopTabletServers() {
      return this.stopTabletServers;
    }
    
    public shutdown_args setStopTabletServers(boolean stopTabletServers) {
      this.stopTabletServers = stopTabletServers;
      setStopTabletServersIsSet(true);
      return this;
    }
    
    public void unsetStopTabletServers() {
      __isset_bit_vector.clear(__STOPTABLETSERVERS_ISSET_ID);
    }
    
    /** Returns true if field stopTabletServers is set (has been asigned a value) and false otherwise */
    public boolean isSetStopTabletServers() {
      return __isset_bit_vector.get(__STOPTABLETSERVERS_ISSET_ID);
    }
    
    public void setStopTabletServersIsSet(boolean value) {
      __isset_bit_vector.set(__STOPTABLETSERVERS_ISSET_ID, value);
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case STOP_TABLET_SERVERS:
          if (value == null) {
            unsetStopTabletServers();
          } else {
            setStopTabletServers((Boolean) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case STOP_TABLET_SERVERS:
          return new Boolean(isStopTabletServers());
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case STOP_TABLET_SERVERS:
          return isSetStopTabletServers();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shutdown_args)
        return this.equals((shutdown_args) that);
      return false;
    }
    
    public boolean equals(shutdown_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_stopTabletServers = true;
      boolean that_present_stopTabletServers = true;
      if (this_present_stopTabletServers || that_present_stopTabletServers) {
        if (!(this_present_stopTabletServers && that_present_stopTabletServers))
          return false;
        if (this.stopTabletServers != that.stopTabletServers)
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(shutdown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      shutdown_args typedOther = (shutdown_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStopTabletServers()).compareTo(typedOther.isSetStopTabletServers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStopTabletServers()) {
        lastComparison = TBaseHelper.compareTo(this.stopTabletServers, typedOther.stopTabletServers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 3: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // STOP_TABLET_SERVERS
            if (field.type == TType.BOOL) {
              this.stopTabletServers = iprot.readBool();
              setStopTabletServersIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STOP_TABLET_SERVERS_FIELD_DESC);
      oprot.writeBool(this.stopTabletServers);
      oprot.writeFieldEnd();
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shutdown_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("stopTabletServers:");
      sb.append(this.stopTabletServers);
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class shutdown_result implements TBase<shutdown_result,shutdown_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("shutdown_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(shutdown_result.class, metaDataMap);
    }
    
    public shutdown_result() {}
    
    public shutdown_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdown_result(shutdown_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public shutdown_result deepCopy() {
      return new shutdown_result(this);
    }
    
    @Deprecated
    public shutdown_result clone() {
      return new shutdown_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public shutdown_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shutdown_result)
        return this.equals((shutdown_result) that);
      return false;
    }
    
    public boolean equals(shutdown_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(shutdown_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      shutdown_result typedOther = (shutdown_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shutdown_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class shutdownTabletServer_args implements TBase<shutdownTabletServer_args,shutdownTabletServer_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("shutdownTabletServer_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 3);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField TABLET_SERVER_FIELD_DESC = new TField("tabletServer", TType.STRING, (short) 2);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String tabletServer;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 3, "tinfo"), CREDENTIALS((short) 1, "credentials"), TABLET_SERVER((short) 2, "tabletServer");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 3: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // TABLET_SERVER
            return TABLET_SERVER;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.TABLET_SERVER, new FieldMetaData("tabletServer", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(shutdownTabletServer_args.class, metaDataMap);
    }
    
    public shutdownTabletServer_args() {}
    
    public shutdownTabletServer_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String tabletServer) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.tabletServer = tabletServer;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdownTabletServer_args(shutdownTabletServer_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetTabletServer()) {
        this.tabletServer = other.tabletServer;
      }
    }
    
    public shutdownTabletServer_args deepCopy() {
      return new shutdownTabletServer_args(this);
    }
    
    @Deprecated
    public shutdownTabletServer_args clone() {
      return new shutdownTabletServer_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public shutdownTabletServer_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public shutdownTabletServer_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getTabletServer() {
      return this.tabletServer;
    }
    
    public shutdownTabletServer_args setTabletServer(String tabletServer) {
      this.tabletServer = tabletServer;
      return this;
    }
    
    public void unsetTabletServer() {
      this.tabletServer = null;
    }
    
    /** Returns true if field tabletServer is set (has been asigned a value) and false otherwise */
    public boolean isSetTabletServer() {
      return this.tabletServer != null;
    }
    
    public void setTabletServerIsSet(boolean value) {
      if (!value) {
        this.tabletServer = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case TABLET_SERVER:
          if (value == null) {
            unsetTabletServer();
          } else {
            setTabletServer((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case TABLET_SERVER:
          return getTabletServer();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case TABLET_SERVER:
          return isSetTabletServer();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shutdownTabletServer_args)
        return this.equals((shutdownTabletServer_args) that);
      return false;
    }
    
    public boolean equals(shutdownTabletServer_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_tabletServer = true && this.isSetTabletServer();
      boolean that_present_tabletServer = true && that.isSetTabletServer();
      if (this_present_tabletServer || that_present_tabletServer) {
        if (!(this_present_tabletServer && that_present_tabletServer))
          return false;
        if (!this.tabletServer.equals(that.tabletServer))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(shutdownTabletServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      shutdownTabletServer_args typedOther = (shutdownTabletServer_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTabletServer()).compareTo(typedOther.isSetTabletServer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTabletServer()) {
        lastComparison = TBaseHelper.compareTo(this.tabletServer, typedOther.tabletServer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 3: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLET_SERVER
            if (field.type == TType.STRING) {
              this.tabletServer = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tabletServer != null) {
        oprot.writeFieldBegin(TABLET_SERVER_FIELD_DESC);
        oprot.writeString(this.tabletServer);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shutdownTabletServer_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("tabletServer:");
      if (this.tabletServer == null) {
        sb.append("null");
      } else {
        sb.append(this.tabletServer);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class shutdownTabletServer_result implements TBase<shutdownTabletServer_result,shutdownTabletServer_result._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("shutdownTabletServer_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(shutdownTabletServer_result.class, metaDataMap);
    }
    
    public shutdownTabletServer_result() {}
    
    public shutdownTabletServer_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdownTabletServer_result(shutdownTabletServer_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public shutdownTabletServer_result deepCopy() {
      return new shutdownTabletServer_result(this);
    }
    
    @Deprecated
    public shutdownTabletServer_result clone() {
      return new shutdownTabletServer_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public shutdownTabletServer_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shutdownTabletServer_result)
        return this.equals((shutdownTabletServer_result) that);
      return false;
    }
    
    public boolean equals(shutdownTabletServer_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(shutdownTabletServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      shutdownTabletServer_result typedOther = (shutdownTabletServer_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shutdownTabletServer_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class setSystemProperty_args implements TBase<setSystemProperty_args,setSystemProperty_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("setSystemProperty_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 4);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField PROPERTY_FIELD_DESC = new TField("property", TType.STRING, (short) 2);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short) 3);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String property;
    public String value;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 4, "tinfo"), CREDENTIALS((short) 1, "credentials"), PROPERTY((short) 2, "property"), VALUE((short) 3, "value");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 4: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // PROPERTY
            return PROPERTY;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.PROPERTY, new FieldMetaData("property", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(setSystemProperty_args.class, metaDataMap);
    }
    
    public setSystemProperty_args() {}
    
    public setSystemProperty_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String property, String value) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.property = property;
      this.value = value;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSystemProperty_args(setSystemProperty_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetProperty()) {
        this.property = other.property;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }
    
    public setSystemProperty_args deepCopy() {
      return new setSystemProperty_args(this);
    }
    
    @Deprecated
    public setSystemProperty_args clone() {
      return new setSystemProperty_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public setSystemProperty_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public setSystemProperty_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getProperty() {
      return this.property;
    }
    
    public setSystemProperty_args setProperty(String property) {
      this.property = property;
      return this;
    }
    
    public void unsetProperty() {
      this.property = null;
    }
    
    /** Returns true if field property is set (has been asigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }
    
    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }
    
    public String getValue() {
      return this.value;
    }
    
    public setSystemProperty_args setValue(String value) {
      this.value = value;
      return this;
    }
    
    public void unsetValue() {
      this.value = null;
    }
    
    /** Returns true if field value is set (has been asigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }
    
    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case PROPERTY:
          if (value == null) {
            unsetProperty();
          } else {
            setProperty((String) value);
          }
          break;
        
        case VALUE:
          if (value == null) {
            unsetValue();
          } else {
            setValue((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case PROPERTY:
          return getProperty();
          
        case VALUE:
          return getValue();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case PROPERTY:
          return isSetProperty();
        case VALUE:
          return isSetValue();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSystemProperty_args)
        return this.equals((setSystemProperty_args) that);
      return false;
    }
    
    public boolean equals(setSystemProperty_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }
      
      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(setSystemProperty_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      setSystemProperty_args typedOther = (setSystemProperty_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(typedOther.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = TBaseHelper.compareTo(this.property, typedOther.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 4: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PROPERTY
            if (field.type == TType.STRING) {
              this.property = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VALUE
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.property != null) {
        oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
        oprot.writeString(this.property);
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSystemProperty_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class setSystemProperty_result implements TBase<setSystemProperty_result,setSystemProperty_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("setSystemProperty_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(setSystemProperty_result.class, metaDataMap);
    }
    
    public setSystemProperty_result() {}
    
    public setSystemProperty_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSystemProperty_result(setSystemProperty_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public setSystemProperty_result deepCopy() {
      return new setSystemProperty_result(this);
    }
    
    @Deprecated
    public setSystemProperty_result clone() {
      return new setSystemProperty_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public setSystemProperty_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSystemProperty_result)
        return this.equals((setSystemProperty_result) that);
      return false;
    }
    
    public boolean equals(setSystemProperty_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(setSystemProperty_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      setSystemProperty_result typedOther = (setSystemProperty_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSystemProperty_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class removeSystemProperty_args implements TBase<removeSystemProperty_args,removeSystemProperty_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("removeSystemProperty_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 3);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField PROPERTY_FIELD_DESC = new TField("property", TType.STRING, (short) 2);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String property;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 3, "tinfo"), CREDENTIALS((short) 1, "credentials"), PROPERTY((short) 2, "property");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 3: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // PROPERTY
            return PROPERTY;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.PROPERTY, new FieldMetaData("property", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(removeSystemProperty_args.class, metaDataMap);
    }
    
    public removeSystemProperty_args() {}
    
    public removeSystemProperty_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String property) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.property = property;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSystemProperty_args(removeSystemProperty_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetProperty()) {
        this.property = other.property;
      }
    }
    
    public removeSystemProperty_args deepCopy() {
      return new removeSystemProperty_args(this);
    }
    
    @Deprecated
    public removeSystemProperty_args clone() {
      return new removeSystemProperty_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public removeSystemProperty_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public removeSystemProperty_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getProperty() {
      return this.property;
    }
    
    public removeSystemProperty_args setProperty(String property) {
      this.property = property;
      return this;
    }
    
    public void unsetProperty() {
      this.property = null;
    }
    
    /** Returns true if field property is set (has been asigned a value) and false otherwise */
    public boolean isSetProperty() {
      return this.property != null;
    }
    
    public void setPropertyIsSet(boolean value) {
      if (!value) {
        this.property = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case PROPERTY:
          if (value == null) {
            unsetProperty();
          } else {
            setProperty((String) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case PROPERTY:
          return getProperty();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case PROPERTY:
          return isSetProperty();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSystemProperty_args)
        return this.equals((removeSystemProperty_args) that);
      return false;
    }
    
    public boolean equals(removeSystemProperty_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_property = true && this.isSetProperty();
      boolean that_present_property = true && that.isSetProperty();
      if (this_present_property || that_present_property) {
        if (!(this_present_property && that_present_property))
          return false;
        if (!this.property.equals(that.property))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(removeSystemProperty_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      removeSystemProperty_args typedOther = (removeSystemProperty_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProperty()).compareTo(typedOther.isSetProperty());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProperty()) {
        lastComparison = TBaseHelper.compareTo(this.property, typedOther.property);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 3: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PROPERTY
            if (field.type == TType.STRING) {
              this.property = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.property != null) {
        oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
        oprot.writeString(this.property);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSystemProperty_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("property:");
      if (this.property == null) {
        sb.append("null");
      } else {
        sb.append(this.property);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class removeSystemProperty_result implements TBase<removeSystemProperty_result,removeSystemProperty_result._Fields>, java.io.Serializable,
      Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("removeSystemProperty_result");
    
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(removeSystemProperty_result.class, metaDataMap);
    }
    
    public removeSystemProperty_result() {}
    
    public removeSystemProperty_result(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSystemProperty_result(removeSystemProperty_result other) {
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public removeSystemProperty_result deepCopy() {
      return new removeSystemProperty_result(this);
    }
    
    @Deprecated
    public removeSystemProperty_result clone() {
      return new removeSystemProperty_result(this);
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public removeSystemProperty_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSystemProperty_result)
        return this.equals((removeSystemProperty_result) that);
      return false;
    }
    
    public boolean equals(removeSystemProperty_result that) {
      if (that == null)
        return false;
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(removeSystemProperty_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      removeSystemProperty_result typedOther = (removeSystemProperty_result) other;
      
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSystemProperty_result(");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class getMasterStats_args implements TBase<getMasterStats_args,getMasterStats_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("getMasterStats_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 2);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 2, "tinfo"), CREDENTIALS((short) 1, "credentials");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 2: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getMasterStats_args.class, metaDataMap);
    }
    
    public getMasterStats_args() {}
    
    public getMasterStats_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMasterStats_args(getMasterStats_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
    }
    
    public getMasterStats_args deepCopy() {
      return new getMasterStats_args(this);
    }
    
    @Deprecated
    public getMasterStats_args clone() {
      return new getMasterStats_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public getMasterStats_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public getMasterStats_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMasterStats_args)
        return this.equals((getMasterStats_args) that);
      return false;
    }
    
    public boolean equals(getMasterStats_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(getMasterStats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      getMasterStats_args typedOther = (getMasterStats_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 2: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMasterStats_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class getMasterStats_result implements TBase<getMasterStats_result,getMasterStats_result._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("getMasterStats_result");
    
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
    private static final TField SEC_FIELD_DESC = new TField("sec", TType.STRUCT, (short) 1);
    
    public MasterMonitorInfo success;
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException sec;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short) 0, "success"), SEC((short) 1, "sec");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SEC
            return SEC;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, MasterMonitorInfo.class)));
      tmpMap.put(_Fields.SEC, new FieldMetaData("sec", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getMasterStats_result.class, metaDataMap);
    }
    
    public getMasterStats_result() {}
    
    public getMasterStats_result(MasterMonitorInfo success, org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this();
      this.success = success;
      this.sec = sec;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMasterStats_result(getMasterStats_result other) {
      if (other.isSetSuccess()) {
        this.success = new MasterMonitorInfo(other.success);
      }
      if (other.isSetSec()) {
        this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException(other.sec);
      }
    }
    
    public getMasterStats_result deepCopy() {
      return new getMasterStats_result(this);
    }
    
    @Deprecated
    public getMasterStats_result clone() {
      return new getMasterStats_result(this);
    }
    
    public MasterMonitorInfo getSuccess() {
      return this.success;
    }
    
    public getMasterStats_result setSuccess(MasterMonitorInfo success) {
      this.success = success;
      return this;
    }
    
    public void unsetSuccess() {
      this.success = null;
    }
    
    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }
    
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.ThriftSecurityException getSec() {
      return this.sec;
    }
    
    public getMasterStats_result setSec(org.apache.accumulo.core.security.thrift.ThriftSecurityException sec) {
      this.sec = sec;
      return this;
    }
    
    public void unsetSec() {
      this.sec = null;
    }
    
    /** Returns true if field sec is set (has been asigned a value) and false otherwise */
    public boolean isSetSec() {
      return this.sec != null;
    }
    
    public void setSecIsSet(boolean value) {
      if (!value) {
        this.sec = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((MasterMonitorInfo) value);
          }
          break;
        
        case SEC:
          if (value == null) {
            unsetSec();
          } else {
            setSec((org.apache.accumulo.core.security.thrift.ThriftSecurityException) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
          
        case SEC:
          return getSec();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSetSuccess();
        case SEC:
          return isSetSec();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMasterStats_result)
        return this.equals((getMasterStats_result) that);
      return false;
    }
    
    public boolean equals(getMasterStats_result that) {
      if (that == null)
        return false;
      
      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }
      
      boolean this_present_sec = true && this.isSetSec();
      boolean that_present_sec = true && that.isSetSec();
      if (this_present_sec || that_present_sec) {
        if (!(this_present_sec && that_present_sec))
          return false;
        if (!this.sec.equals(that.sec))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(getMasterStats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      getMasterStats_result typedOther = (getMasterStats_result) other;
      
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSec()).compareTo(typedOther.isSetSec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSec()) {
        lastComparison = TBaseHelper.compareTo(this.sec, typedOther.sec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new MasterMonitorInfo();
              this.success.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // SEC
            if (field.type == TType.STRUCT) {
              this.sec = new org.apache.accumulo.core.security.thrift.ThriftSecurityException();
              this.sec.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      
      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSec()) {
        oprot.writeFieldBegin(SEC_FIELD_DESC);
        this.sec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMasterStats_result(");
      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      sb.append(", ");
      sb.append("sec:");
      if (this.sec == null) {
        sb.append("null");
      } else {
        sb.append(this.sec);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class reportSplitExtent_args implements TBase<reportSplitExtent_args,reportSplitExtent_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("reportSplitExtent_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 4);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField SERVER_NAME_FIELD_DESC = new TField("serverName", TType.STRING, (short) 2);
    private static final TField SPLIT_FIELD_DESC = new TField("split", TType.STRUCT, (short) 3);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String serverName;
    public TabletSplit split;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 4, "tinfo"), CREDENTIALS((short) 1, "credentials"), SERVER_NAME((short) 2, "serverName"), SPLIT((short) 3, "split");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 4: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // SERVER_NAME
            return SERVER_NAME;
          case 3: // SPLIT
            return SPLIT;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.SERVER_NAME, new FieldMetaData("serverName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.SPLIT, new FieldMetaData("split", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, TabletSplit.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(reportSplitExtent_args.class, metaDataMap);
    }
    
    public reportSplitExtent_args() {}
    
    public reportSplitExtent_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String serverName,
        TabletSplit split) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.serverName = serverName;
      this.split = split;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportSplitExtent_args(reportSplitExtent_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetServerName()) {
        this.serverName = other.serverName;
      }
      if (other.isSetSplit()) {
        this.split = new TabletSplit(other.split);
      }
    }
    
    public reportSplitExtent_args deepCopy() {
      return new reportSplitExtent_args(this);
    }
    
    @Deprecated
    public reportSplitExtent_args clone() {
      return new reportSplitExtent_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public reportSplitExtent_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public reportSplitExtent_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getServerName() {
      return this.serverName;
    }
    
    public reportSplitExtent_args setServerName(String serverName) {
      this.serverName = serverName;
      return this;
    }
    
    public void unsetServerName() {
      this.serverName = null;
    }
    
    /** Returns true if field serverName is set (has been asigned a value) and false otherwise */
    public boolean isSetServerName() {
      return this.serverName != null;
    }
    
    public void setServerNameIsSet(boolean value) {
      if (!value) {
        this.serverName = null;
      }
    }
    
    public TabletSplit getSplit() {
      return this.split;
    }
    
    public reportSplitExtent_args setSplit(TabletSplit split) {
      this.split = split;
      return this;
    }
    
    public void unsetSplit() {
      this.split = null;
    }
    
    /** Returns true if field split is set (has been asigned a value) and false otherwise */
    public boolean isSetSplit() {
      return this.split != null;
    }
    
    public void setSplitIsSet(boolean value) {
      if (!value) {
        this.split = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case SERVER_NAME:
          if (value == null) {
            unsetServerName();
          } else {
            setServerName((String) value);
          }
          break;
        
        case SPLIT:
          if (value == null) {
            unsetSplit();
          } else {
            setSplit((TabletSplit) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case SERVER_NAME:
          return getServerName();
          
        case SPLIT:
          return getSplit();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case SERVER_NAME:
          return isSetServerName();
        case SPLIT:
          return isSetSplit();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportSplitExtent_args)
        return this.equals((reportSplitExtent_args) that);
      return false;
    }
    
    public boolean equals(reportSplitExtent_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_serverName = true && this.isSetServerName();
      boolean that_present_serverName = true && that.isSetServerName();
      if (this_present_serverName || that_present_serverName) {
        if (!(this_present_serverName && that_present_serverName))
          return false;
        if (!this.serverName.equals(that.serverName))
          return false;
      }
      
      boolean this_present_split = true && this.isSetSplit();
      boolean that_present_split = true && that.isSetSplit();
      if (this_present_split || that_present_split) {
        if (!(this_present_split && that_present_split))
          return false;
        if (!this.split.equals(that.split))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(reportSplitExtent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      reportSplitExtent_args typedOther = (reportSplitExtent_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerName()).compareTo(typedOther.isSetServerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerName()) {
        lastComparison = TBaseHelper.compareTo(this.serverName, typedOther.serverName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSplit()).compareTo(typedOther.isSetSplit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplit()) {
        lastComparison = TBaseHelper.compareTo(this.split, typedOther.split);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 4: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SERVER_NAME
            if (field.type == TType.STRING) {
              this.serverName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SPLIT
            if (field.type == TType.STRUCT) {
              this.split = new TabletSplit();
              this.split.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.serverName != null) {
        oprot.writeFieldBegin(SERVER_NAME_FIELD_DESC);
        oprot.writeString(this.serverName);
        oprot.writeFieldEnd();
      }
      if (this.split != null) {
        oprot.writeFieldBegin(SPLIT_FIELD_DESC);
        this.split.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportSplitExtent_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("serverName:");
      if (this.serverName == null) {
        sb.append("null");
      } else {
        sb.append(this.serverName);
      }
      sb.append(", ");
      sb.append("split:");
      if (this.split == null) {
        sb.append("null");
      } else {
        sb.append(this.split);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
  @SuppressWarnings("serial")
  public static class reportTabletStatus_args implements TBase<reportTabletStatus_args,reportTabletStatus_args._Fields>, java.io.Serializable, Cloneable {
    private static final TStruct STRUCT_DESC = new TStruct("reportTabletStatus_args");
    
    private static final TField TINFO_FIELD_DESC = new TField("tinfo", TType.STRUCT, (short) 5);
    private static final TField CREDENTIALS_FIELD_DESC = new TField("credentials", TType.STRUCT, (short) 1);
    private static final TField SERVER_NAME_FIELD_DESC = new TField("serverName", TType.STRING, (short) 2);
    private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short) 3);
    private static final TField TABLET_FIELD_DESC = new TField("tablet", TType.STRUCT, (short) 4);
    
    public cloudtrace.thrift.TInfo tinfo;
    public org.apache.accumulo.core.security.thrift.AuthInfo credentials;
    public String serverName;
    /**
     * 
     * @see TabletLoadState
     */
    public TabletLoadState status;
    public org.apache.accumulo.core.data.thrift.TKeyExtent tablet;
    
    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TINFO((short) 5, "tinfo"), CREDENTIALS((short) 1, "credentials"), SERVER_NAME((short) 2, "serverName"),
      /**
       * 
       * @see TabletLoadState
       */
      STATUS((short) 3, "status"), TABLET((short) 4, "tablet");
      
      private static final java.util.Map<String,_Fields> byName = new java.util.HashMap<String,_Fields>();
      
      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 5: // TINFO
            return TINFO;
          case 1: // CREDENTIALS
            return CREDENTIALS;
          case 2: // SERVER_NAME
            return SERVER_NAME;
          case 3: // STATUS
            return STATUS;
          case 4: // TABLET
            return TABLET;
          default:
            return null;
        }
      }
      
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
      
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      
      private final short _thriftId;
      private final String _fieldName;
      
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      
      public short getThriftFieldId() {
        return _thriftId;
      }
      
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    // isset id assignments
    
    public static final java.util.Map<_Fields,FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields,FieldMetaData> tmpMap = new java.util.EnumMap<_Fields,FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TINFO, new FieldMetaData("tinfo", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, cloudtrace.thrift.TInfo.class)));
      tmpMap.put(_Fields.CREDENTIALS, new FieldMetaData("credentials", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.security.thrift.AuthInfo.class)));
      tmpMap.put(_Fields.SERVER_NAME, new FieldMetaData("serverName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, new EnumMetaData(TType.ENUM, TabletLoadState.class)));
      tmpMap.put(_Fields.TABLET, new FieldMetaData("tablet", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT,
          org.apache.accumulo.core.data.thrift.TKeyExtent.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(reportTabletStatus_args.class, metaDataMap);
    }
    
    public reportTabletStatus_args() {}
    
    public reportTabletStatus_args(cloudtrace.thrift.TInfo tinfo, org.apache.accumulo.core.security.thrift.AuthInfo credentials, String serverName,
        TabletLoadState status, org.apache.accumulo.core.data.thrift.TKeyExtent tablet) {
      this();
      this.tinfo = tinfo;
      this.credentials = credentials;
      this.serverName = serverName;
      this.status = status;
      this.tablet = tablet;
    }
    
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportTabletStatus_args(reportTabletStatus_args other) {
      if (other.isSetTinfo()) {
        this.tinfo = new cloudtrace.thrift.TInfo(other.tinfo);
      }
      if (other.isSetCredentials()) {
        this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo(other.credentials);
      }
      if (other.isSetServerName()) {
        this.serverName = other.serverName;
      }
      if (other.isSetStatus()) {
        this.status = other.status;
      }
      if (other.isSetTablet()) {
        this.tablet = new org.apache.accumulo.core.data.thrift.TKeyExtent(other.tablet);
      }
    }
    
    public reportTabletStatus_args deepCopy() {
      return new reportTabletStatus_args(this);
    }
    
    @Deprecated
    public reportTabletStatus_args clone() {
      return new reportTabletStatus_args(this);
    }
    
    public cloudtrace.thrift.TInfo getTinfo() {
      return this.tinfo;
    }
    
    public reportTabletStatus_args setTinfo(cloudtrace.thrift.TInfo tinfo) {
      this.tinfo = tinfo;
      return this;
    }
    
    public void unsetTinfo() {
      this.tinfo = null;
    }
    
    /** Returns true if field tinfo is set (has been asigned a value) and false otherwise */
    public boolean isSetTinfo() {
      return this.tinfo != null;
    }
    
    public void setTinfoIsSet(boolean value) {
      if (!value) {
        this.tinfo = null;
      }
    }
    
    public org.apache.accumulo.core.security.thrift.AuthInfo getCredentials() {
      return this.credentials;
    }
    
    public reportTabletStatus_args setCredentials(org.apache.accumulo.core.security.thrift.AuthInfo credentials) {
      this.credentials = credentials;
      return this;
    }
    
    public void unsetCredentials() {
      this.credentials = null;
    }
    
    /** Returns true if field credentials is set (has been asigned a value) and false otherwise */
    public boolean isSetCredentials() {
      return this.credentials != null;
    }
    
    public void setCredentialsIsSet(boolean value) {
      if (!value) {
        this.credentials = null;
      }
    }
    
    public String getServerName() {
      return this.serverName;
    }
    
    public reportTabletStatus_args setServerName(String serverName) {
      this.serverName = serverName;
      return this;
    }
    
    public void unsetServerName() {
      this.serverName = null;
    }
    
    /** Returns true if field serverName is set (has been asigned a value) and false otherwise */
    public boolean isSetServerName() {
      return this.serverName != null;
    }
    
    public void setServerNameIsSet(boolean value) {
      if (!value) {
        this.serverName = null;
      }
    }
    
    /**
     * 
     * @see TabletLoadState
     */
    public TabletLoadState getStatus() {
      return this.status;
    }
    
    /**
     * 
     * @see TabletLoadState
     */
    public reportTabletStatus_args setStatus(TabletLoadState status) {
      this.status = status;
      return this;
    }
    
    public void unsetStatus() {
      this.status = null;
    }
    
    /** Returns true if field status is set (has been asigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }
    
    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }
    
    public org.apache.accumulo.core.data.thrift.TKeyExtent getTablet() {
      return this.tablet;
    }
    
    public reportTabletStatus_args setTablet(org.apache.accumulo.core.data.thrift.TKeyExtent tablet) {
      this.tablet = tablet;
      return this;
    }
    
    public void unsetTablet() {
      this.tablet = null;
    }
    
    /** Returns true if field tablet is set (has been asigned a value) and false otherwise */
    public boolean isSetTablet() {
      return this.tablet != null;
    }
    
    public void setTabletIsSet(boolean value) {
      if (!value) {
        this.tablet = null;
      }
    }
    
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case TINFO:
          if (value == null) {
            unsetTinfo();
          } else {
            setTinfo((cloudtrace.thrift.TInfo) value);
          }
          break;
        
        case CREDENTIALS:
          if (value == null) {
            unsetCredentials();
          } else {
            setCredentials((org.apache.accumulo.core.security.thrift.AuthInfo) value);
          }
          break;
        
        case SERVER_NAME:
          if (value == null) {
            unsetServerName();
          } else {
            setServerName((String) value);
          }
          break;
        
        case STATUS:
          if (value == null) {
            unsetStatus();
          } else {
            setStatus((TabletLoadState) value);
          }
          break;
        
        case TABLET:
          if (value == null) {
            unsetTablet();
          } else {
            setTablet((org.apache.accumulo.core.data.thrift.TKeyExtent) value);
          }
          break;
      
      }
    }
    
    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }
    
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case TINFO:
          return getTinfo();
          
        case CREDENTIALS:
          return getCredentials();
          
        case SERVER_NAME:
          return getServerName();
          
        case STATUS:
          return getStatus();
          
        case TABLET:
          return getTablet();
          
      }
      throw new IllegalStateException();
    }
    
    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }
    
    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
        case TINFO:
          return isSetTinfo();
        case CREDENTIALS:
          return isSetCredentials();
        case SERVER_NAME:
          return isSetServerName();
        case STATUS:
          return isSetStatus();
        case TABLET:
          return isSetTablet();
      }
      throw new IllegalStateException();
    }
    
    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }
    
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportTabletStatus_args)
        return this.equals((reportTabletStatus_args) that);
      return false;
    }
    
    public boolean equals(reportTabletStatus_args that) {
      if (that == null)
        return false;
      
      boolean this_present_tinfo = true && this.isSetTinfo();
      boolean that_present_tinfo = true && that.isSetTinfo();
      if (this_present_tinfo || that_present_tinfo) {
        if (!(this_present_tinfo && that_present_tinfo))
          return false;
        if (!this.tinfo.equals(that.tinfo))
          return false;
      }
      
      boolean this_present_credentials = true && this.isSetCredentials();
      boolean that_present_credentials = true && that.isSetCredentials();
      if (this_present_credentials || that_present_credentials) {
        if (!(this_present_credentials && that_present_credentials))
          return false;
        if (!this.credentials.equals(that.credentials))
          return false;
      }
      
      boolean this_present_serverName = true && this.isSetServerName();
      boolean that_present_serverName = true && that.isSetServerName();
      if (this_present_serverName || that_present_serverName) {
        if (!(this_present_serverName && that_present_serverName))
          return false;
        if (!this.serverName.equals(that.serverName))
          return false;
      }
      
      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }
      
      boolean this_present_tablet = true && this.isSetTablet();
      boolean that_present_tablet = true && that.isSetTablet();
      if (this_present_tablet || that_present_tablet) {
        if (!(this_present_tablet && that_present_tablet))
          return false;
        if (!this.tablet.equals(that.tablet))
          return false;
      }
      
      return true;
    }
    
    @Override
    public int hashCode() {
      return 0;
    }
    
    public int compareTo(reportTabletStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      
      int lastComparison = 0;
      reportTabletStatus_args typedOther = (reportTabletStatus_args) other;
      
      lastComparison = Boolean.valueOf(isSetTinfo()).compareTo(typedOther.isSetTinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTinfo()) {
        lastComparison = TBaseHelper.compareTo(this.tinfo, typedOther.tinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCredentials()).compareTo(typedOther.isSetCredentials());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCredentials()) {
        lastComparison = TBaseHelper.compareTo(this.credentials, typedOther.credentials);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerName()).compareTo(typedOther.isSetServerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerName()) {
        lastComparison = TBaseHelper.compareTo(this.serverName, typedOther.serverName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTablet()).compareTo(typedOther.isSetTablet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTablet()) {
        lastComparison = TBaseHelper.compareTo(this.tablet, typedOther.tablet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    
    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true) {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id) {
          case 5: // TINFO
            if (field.type == TType.STRUCT) {
              this.tinfo = new cloudtrace.thrift.TInfo();
              this.tinfo.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // CREDENTIALS
            if (field.type == TType.STRUCT) {
              this.credentials = new org.apache.accumulo.core.security.thrift.AuthInfo();
              this.credentials.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SERVER_NAME
            if (field.type == TType.STRING) {
              this.serverName = iprot.readString();
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // STATUS
            if (field.type == TType.I32) {
              this.status = TabletLoadState.findByValue(iprot.readI32());
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // TABLET
            if (field.type == TType.STRUCT) {
              this.tablet = new org.apache.accumulo.core.data.thrift.TKeyExtent();
              this.tablet.read(iprot);
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      
      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
    
    public void write(TProtocol oprot) throws TException {
      validate();
      
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.credentials != null) {
        oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
        this.credentials.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.serverName != null) {
        oprot.writeFieldBegin(SERVER_NAME_FIELD_DESC);
        oprot.writeString(this.serverName);
        oprot.writeFieldEnd();
      }
      if (this.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(this.status.getValue());
        oprot.writeFieldEnd();
      }
      if (this.tablet != null) {
        oprot.writeFieldBegin(TABLET_FIELD_DESC);
        this.tablet.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.tinfo != null) {
        oprot.writeFieldBegin(TINFO_FIELD_DESC);
        this.tinfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportTabletStatus_args(");
      sb.append("tinfo:");
      if (this.tinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tinfo);
      }
      sb.append(", ");
      sb.append("credentials:");
      if (this.credentials == null) {
        sb.append("null");
      } else {
        sb.append(this.credentials);
      }
      sb.append(", ");
      sb.append("serverName:");
      if (this.serverName == null) {
        sb.append("null");
      } else {
        sb.append(this.serverName);
      }
      sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      sb.append(", ");
      sb.append("tablet:");
      if (this.tablet == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet);
      }
      sb.append(")");
      return sb.toString();
    }
    
    public void validate() throws TException {
      // check for required fields
    }
    
  }
  
}
