/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cloudtrace.thrift;



import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

@SuppressWarnings("serial")
public class RemoteSpan implements TBase<RemoteSpan, RemoteSpan._Fields>, java.io.Serializable, Cloneable {
	private static final TStruct STRUCT_DESC = new TStruct("RemoteSpan");

	private static final TField SENDER_FIELD_DESC = new TField("sender", TType.STRING, (short)1);
	private static final TField SVC_FIELD_DESC = new TField("svc", TType.STRING, (short)2);
	private static final TField TRACE_ID_FIELD_DESC = new TField("traceId", TType.I64, (short)3);
	private static final TField SPAN_ID_FIELD_DESC = new TField("spanId", TType.I64, (short)4);
	private static final TField PARENT_ID_FIELD_DESC = new TField("parentId", TType.I64, (short)5);
	private static final TField START_FIELD_DESC = new TField("start", TType.I64, (short)6);
	private static final TField STOP_FIELD_DESC = new TField("stop", TType.I64, (short)7);
	private static final TField DESCRIPTION_FIELD_DESC = new TField("description", TType.STRING, (short)8);
	private static final TField DATA_FIELD_DESC = new TField("data", TType.MAP, (short)9);

	public String sender;
	public String svc;
	public long traceId;
	public long spanId;
	public long parentId;
	public long start;
	public long stop;
	public String description;
	public java.util.Map<String,String> data;

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements TFieldIdEnum {
		SENDER((short)1, "sender"),
		SVC((short)2, "svc"),
		TRACE_ID((short)3, "traceId"),
		SPAN_ID((short)4, "spanId"),
		PARENT_ID((short)5, "parentId"),
		START((short)6, "start"),
		STOP((short)7, "stop"),
		DESCRIPTION((short)8, "description"),
		DATA((short)9, "data");

		private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch(fieldId) {
			case 1: // SENDER
				return SENDER;
			case 2: // SVC
				return SVC;
			case 3: // TRACE_ID
				return TRACE_ID;
			case 4: // SPAN_ID
				return SPAN_ID;
			case 5: // PARENT_ID
				return PARENT_ID;
			case 6: // START
				return START;
			case 7: // STOP
				return STOP;
			case 8: // DESCRIPTION
				return DESCRIPTION;
			case 9: // DATA
				return DATA;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __TRACEID_ISSET_ID = 0;
	private static final int __SPANID_ISSET_ID = 1;
	private static final int __PARENTID_ISSET_ID = 2;
	private static final int __START_ISSET_ID = 3;
	private static final int __STOP_ISSET_ID = 4;
	private java.util.BitSet __isset_bit_vector = new java.util.BitSet(5);

	public static final java.util.Map<_Fields, FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.SENDER, new FieldMetaData("sender", TFieldRequirementType.DEFAULT, 
				new FieldValueMetaData(TType.STRING)));
		tmpMap.put(_Fields.SVC, new FieldMetaData("svc", TFieldRequirementType.DEFAULT, 
				new FieldValueMetaData(TType.STRING)));
		tmpMap.put(_Fields.TRACE_ID, new FieldMetaData("traceId", TFieldRequirementType.DEFAULT, 
				new FieldValueMetaData(TType.I64)));
		tmpMap.put(_Fields.SPAN_ID, new FieldMetaData("spanId", TFieldRequirementType.DEFAULT, 
				new FieldValueMetaData(TType.I64)));
		tmpMap.put(_Fields.PARENT_ID, new FieldMetaData("parentId", TFieldRequirementType.DEFAULT, 
				new FieldValueMetaData(TType.I64)));
		tmpMap.put(_Fields.START, new FieldMetaData("start", TFieldRequirementType.DEFAULT, 
				new FieldValueMetaData(TType.I64)));
		tmpMap.put(_Fields.STOP, new FieldMetaData("stop", TFieldRequirementType.DEFAULT, 
				new FieldValueMetaData(TType.I64)));
		tmpMap.put(_Fields.DESCRIPTION, new FieldMetaData("description", TFieldRequirementType.DEFAULT, 
				new FieldValueMetaData(TType.STRING)));
		tmpMap.put(_Fields.DATA, new FieldMetaData("data", TFieldRequirementType.DEFAULT, 
				new MapMetaData(TType.MAP, 
						new FieldValueMetaData(TType.STRING), 
						new FieldValueMetaData(TType.STRING))));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		FieldMetaData.addStructMetaDataMap(RemoteSpan.class, metaDataMap);
	}

	public RemoteSpan() {
	}

	public RemoteSpan(
			String sender,
			String svc,
			long traceId,
			long spanId,
			long parentId,
			long start,
			long stop,
			String description,
			java.util.Map<String,String> data)
	{
		this();
		this.sender = sender;
		this.svc = svc;
		this.traceId = traceId;
		setTraceIdIsSet(true);
		this.spanId = spanId;
		setSpanIdIsSet(true);
		this.parentId = parentId;
		setParentIdIsSet(true);
		this.start = start;
		setStartIsSet(true);
		this.stop = stop;
		setStopIsSet(true);
		this.description = description;
		this.data = data;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public RemoteSpan(RemoteSpan other) {
		__isset_bit_vector.clear();
		__isset_bit_vector.or(other.__isset_bit_vector);
		if (other.isSetSender()) {
			this.sender = other.sender;
		}
		if (other.isSetSvc()) {
			this.svc = other.svc;
		}
		this.traceId = other.traceId;
		this.spanId = other.spanId;
		this.parentId = other.parentId;
		this.start = other.start;
		this.stop = other.stop;
		if (other.isSetDescription()) {
			this.description = other.description;
		}
		if (other.isSetData()) {
			java.util.Map<String,String> __this__data = new java.util.HashMap<String,String>();
			for (java.util.Map.Entry<String, String> other_element : other.data.entrySet()) {

				String other_element_key = other_element.getKey();
				String other_element_value = other_element.getValue();

				String __this__data_copy_key = other_element_key;

				String __this__data_copy_value = other_element_value;

				__this__data.put(__this__data_copy_key, __this__data_copy_value);
			}
			this.data = __this__data;
		}
	}

	public RemoteSpan deepCopy() {
		return new RemoteSpan(this);
	}

	public String getSender() {
		return this.sender;
	}

	public RemoteSpan setSender(String sender) {
		this.sender = sender;
		return this;
	}

	public void unsetSender() {
		this.sender = null;
	}

	/** Returns true if field sender is set (has been asigned a value) and false otherwise */
	public boolean isSetSender() {
		return this.sender != null;
	}

	public void setSenderIsSet(boolean value) {
		if (!value) {
			this.sender = null;
		}
	}

	public String getSvc() {
		return this.svc;
	}

	public RemoteSpan setSvc(String svc) {
		this.svc = svc;
		return this;
	}

	public void unsetSvc() {
		this.svc = null;
	}

	/** Returns true if field svc is set (has been asigned a value) and false otherwise */
	public boolean isSetSvc() {
		return this.svc != null;
	}

	public void setSvcIsSet(boolean value) {
		if (!value) {
			this.svc = null;
		}
	}

	public long getTraceId() {
		return this.traceId;
	}

	public RemoteSpan setTraceId(long traceId) {
		this.traceId = traceId;
		setTraceIdIsSet(true);
		return this;
	}

	public void unsetTraceId() {
		__isset_bit_vector.clear(__TRACEID_ISSET_ID);
	}

	/** Returns true if field traceId is set (has been asigned a value) and false otherwise */
	public boolean isSetTraceId() {
		return __isset_bit_vector.get(__TRACEID_ISSET_ID);
	}

	public void setTraceIdIsSet(boolean value) {
		__isset_bit_vector.set(__TRACEID_ISSET_ID, value);
	}

	public long getSpanId() {
		return this.spanId;
	}

	public RemoteSpan setSpanId(long spanId) {
		this.spanId = spanId;
		setSpanIdIsSet(true);
		return this;
	}

	public void unsetSpanId() {
		__isset_bit_vector.clear(__SPANID_ISSET_ID);
	}

	/** Returns true if field spanId is set (has been asigned a value) and false otherwise */
	public boolean isSetSpanId() {
		return __isset_bit_vector.get(__SPANID_ISSET_ID);
	}

	public void setSpanIdIsSet(boolean value) {
		__isset_bit_vector.set(__SPANID_ISSET_ID, value);
	}

	public long getParentId() {
		return this.parentId;
	}

	public RemoteSpan setParentId(long parentId) {
		this.parentId = parentId;
		setParentIdIsSet(true);
		return this;
	}

	public void unsetParentId() {
		__isset_bit_vector.clear(__PARENTID_ISSET_ID);
	}

	/** Returns true if field parentId is set (has been asigned a value) and false otherwise */
	public boolean isSetParentId() {
		return __isset_bit_vector.get(__PARENTID_ISSET_ID);
	}

	public void setParentIdIsSet(boolean value) {
		__isset_bit_vector.set(__PARENTID_ISSET_ID, value);
	}

	public long getStart() {
		return this.start;
	}

	public RemoteSpan setStart(long start) {
		this.start = start;
		setStartIsSet(true);
		return this;
	}

	public void unsetStart() {
		__isset_bit_vector.clear(__START_ISSET_ID);
	}

	/** Returns true if field start is set (has been asigned a value) and false otherwise */
	public boolean isSetStart() {
		return __isset_bit_vector.get(__START_ISSET_ID);
	}

	public void setStartIsSet(boolean value) {
		__isset_bit_vector.set(__START_ISSET_ID, value);
	}

	public long getStop() {
		return this.stop;
	}

	public RemoteSpan setStop(long stop) {
		this.stop = stop;
		setStopIsSet(true);
		return this;
	}

	public void unsetStop() {
		__isset_bit_vector.clear(__STOP_ISSET_ID);
	}

	/** Returns true if field stop is set (has been asigned a value) and false otherwise */
	public boolean isSetStop() {
		return __isset_bit_vector.get(__STOP_ISSET_ID);
	}

	public void setStopIsSet(boolean value) {
		__isset_bit_vector.set(__STOP_ISSET_ID, value);
	}

	public String getDescription() {
		return this.description;
	}

	public RemoteSpan setDescription(String description) {
		this.description = description;
		return this;
	}

	public void unsetDescription() {
		this.description = null;
	}

	/** Returns true if field description is set (has been asigned a value) and false otherwise */
	public boolean isSetDescription() {
		return this.description != null;
	}

	public void setDescriptionIsSet(boolean value) {
		if (!value) {
			this.description = null;
		}
	}

	public int getDataSize() {
		return (this.data == null) ? 0 : this.data.size();
	}

	public void putToData(String key, String val) {
		if (this.data == null) {
			this.data = new java.util.HashMap<String,String>();
		}
		this.data.put(key, val);
	}

	public java.util.Map<String,String> getData() {
		return this.data;
	}

	public RemoteSpan setData(java.util.Map<String,String> data) {
		this.data = data;
		return this;
	}

	public void unsetData() {
		this.data = null;
	}

	/** Returns true if field data is set (has been asigned a value) and false otherwise */
	public boolean isSetData() {
		return this.data != null;
	}

	public void setDataIsSet(boolean value) {
		if (!value) {
			this.data = null;
		}
	}

	@SuppressWarnings("unchecked")
	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case SENDER:
			if (value == null) {
				unsetSender();
			} else {
				setSender((String)value);
			}
			break;

		case SVC:
			if (value == null) {
				unsetSvc();
			} else {
				setSvc((String)value);
			}
			break;

		case TRACE_ID:
			if (value == null) {
				unsetTraceId();
			} else {
				setTraceId((Long)value);
			}
			break;

		case SPAN_ID:
			if (value == null) {
				unsetSpanId();
			} else {
				setSpanId((Long)value);
			}
			break;

		case PARENT_ID:
			if (value == null) {
				unsetParentId();
			} else {
				setParentId((Long)value);
			}
			break;

		case START:
			if (value == null) {
				unsetStart();
			} else {
				setStart((Long)value);
			}
			break;

		case STOP:
			if (value == null) {
				unsetStop();
			} else {
				setStop((Long)value);
			}
			break;

		case DESCRIPTION:
			if (value == null) {
				unsetDescription();
			} else {
				setDescription((String)value);
			}
			break;

		case DATA:
			if (value == null) {
				unsetData();
			} else {
				setData((java.util.Map<String,String>)value);
			}
			break;

		}
	}

	public void setFieldValue(int fieldID, Object value) {
		setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case SENDER:
			return getSender();

		case SVC:
			return getSvc();

		case TRACE_ID:
			return new Long(getTraceId());

		case SPAN_ID:
			return new Long(getSpanId());

		case PARENT_ID:
			return new Long(getParentId());

		case START:
			return new Long(getStart());

		case STOP:
			return new Long(getStop());

		case DESCRIPTION:
			return getDescription();

		case DATA:
			return getData();

		}
		throw new IllegalStateException();
	}

	public Object getFieldValue(int fieldId) {
		return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
	}

	/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		switch (field) {
		case SENDER:
			return isSetSender();
		case SVC:
			return isSetSvc();
		case TRACE_ID:
			return isSetTraceId();
		case SPAN_ID:
			return isSetSpanId();
		case PARENT_ID:
			return isSetParentId();
		case START:
			return isSetStart();
		case STOP:
			return isSetStop();
		case DESCRIPTION:
			return isSetDescription();
		case DATA:
			return isSetData();
		}
		throw new IllegalStateException();
	}

	public boolean isSet(int fieldID) {
		return isSet(_Fields.findByThriftIdOrThrow(fieldID));
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof RemoteSpan)
			return this.equals((RemoteSpan)that);
		return false;
	}

	public boolean equals(RemoteSpan that) {
		if (that == null)
			return false;

		boolean this_present_sender = true && this.isSetSender();
		boolean that_present_sender = true && that.isSetSender();
		if (this_present_sender || that_present_sender) {
			if (!(this_present_sender && that_present_sender))
				return false;
			if (!this.sender.equals(that.sender))
				return false;
		}

		boolean this_present_svc = true && this.isSetSvc();
		boolean that_present_svc = true && that.isSetSvc();
		if (this_present_svc || that_present_svc) {
			if (!(this_present_svc && that_present_svc))
				return false;
			if (!this.svc.equals(that.svc))
				return false;
		}

		boolean this_present_traceId = true;
		boolean that_present_traceId = true;
		if (this_present_traceId || that_present_traceId) {
			if (!(this_present_traceId && that_present_traceId))
				return false;
			if (this.traceId != that.traceId)
				return false;
		}

		boolean this_present_spanId = true;
		boolean that_present_spanId = true;
		if (this_present_spanId || that_present_spanId) {
			if (!(this_present_spanId && that_present_spanId))
				return false;
			if (this.spanId != that.spanId)
				return false;
		}

		boolean this_present_parentId = true;
		boolean that_present_parentId = true;
		if (this_present_parentId || that_present_parentId) {
			if (!(this_present_parentId && that_present_parentId))
				return false;
			if (this.parentId != that.parentId)
				return false;
		}

		boolean this_present_start = true;
		boolean that_present_start = true;
		if (this_present_start || that_present_start) {
			if (!(this_present_start && that_present_start))
				return false;
			if (this.start != that.start)
				return false;
		}

		boolean this_present_stop = true;
		boolean that_present_stop = true;
		if (this_present_stop || that_present_stop) {
			if (!(this_present_stop && that_present_stop))
				return false;
			if (this.stop != that.stop)
				return false;
		}

		boolean this_present_description = true && this.isSetDescription();
		boolean that_present_description = true && that.isSetDescription();
		if (this_present_description || that_present_description) {
			if (!(this_present_description && that_present_description))
				return false;
			if (!this.description.equals(that.description))
				return false;
		}

		boolean this_present_data = true && this.isSetData();
		boolean that_present_data = true && that.isSetData();
		if (this_present_data || that_present_data) {
			if (!(this_present_data && that_present_data))
				return false;
			if (!this.data.equals(that.data))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(RemoteSpan other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		RemoteSpan typedOther = (RemoteSpan)other;

		lastComparison = Boolean.valueOf(isSetSender()).compareTo(typedOther.isSetSender());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSender()) {      lastComparison = TBaseHelper.compareTo(this.sender, typedOther.sender);
		if (lastComparison != 0) {
			return lastComparison;
		}
		}
		lastComparison = Boolean.valueOf(isSetSvc()).compareTo(typedOther.isSetSvc());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSvc()) {      lastComparison = TBaseHelper.compareTo(this.svc, typedOther.svc);
		if (lastComparison != 0) {
			return lastComparison;
		}
		}
		lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(typedOther.isSetTraceId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTraceId()) {      lastComparison = TBaseHelper.compareTo(this.traceId, typedOther.traceId);
		if (lastComparison != 0) {
			return lastComparison;
		}
		}
		lastComparison = Boolean.valueOf(isSetSpanId()).compareTo(typedOther.isSetSpanId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSpanId()) {      lastComparison = TBaseHelper.compareTo(this.spanId, typedOther.spanId);
		if (lastComparison != 0) {
			return lastComparison;
		}
		}
		lastComparison = Boolean.valueOf(isSetParentId()).compareTo(typedOther.isSetParentId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetParentId()) {      lastComparison = TBaseHelper.compareTo(this.parentId, typedOther.parentId);
		if (lastComparison != 0) {
			return lastComparison;
		}
		}
		lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStart()) {      lastComparison = TBaseHelper.compareTo(this.start, typedOther.start);
		if (lastComparison != 0) {
			return lastComparison;
		}
		}
		lastComparison = Boolean.valueOf(isSetStop()).compareTo(typedOther.isSetStop());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStop()) {      lastComparison = TBaseHelper.compareTo(this.stop, typedOther.stop);
		if (lastComparison != 0) {
			return lastComparison;
		}
		}
		lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDescription()) {      lastComparison = TBaseHelper.compareTo(this.description, typedOther.description);
		if (lastComparison != 0) {
			return lastComparison;
		}
		}
		lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetData()) {      lastComparison = TBaseHelper.compareTo(this.data, typedOther.data);
		if (lastComparison != 0) {
			return lastComparison;
		}
		}
		return 0;
	}

	public void read(TProtocol iprot) throws TException {
		TField field;
		iprot.readStructBegin();
		while (true)
		{
			field = iprot.readFieldBegin();
			if (field.type == TType.STOP) { 
				break;
			}
			switch (field.id) {
			case 1: // SENDER
			if (field.type == TType.STRING) {
				this.sender = iprot.readString();
			} else { 
				TProtocolUtil.skip(iprot, field.type);
			}
			break;
			case 2: // SVC
			if (field.type == TType.STRING) {
				this.svc = iprot.readString();
			} else { 
				TProtocolUtil.skip(iprot, field.type);
			}
			break;
			case 3: // TRACE_ID
			if (field.type == TType.I64) {
				this.traceId = iprot.readI64();
				setTraceIdIsSet(true);
			} else { 
				TProtocolUtil.skip(iprot, field.type);
			}
			break;
			case 4: // SPAN_ID
				if (field.type == TType.I64) {
					this.spanId = iprot.readI64();
					setSpanIdIsSet(true);
				} else { 
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 5: // PARENT_ID
				if (field.type == TType.I64) {
					this.parentId = iprot.readI64();
					setParentIdIsSet(true);
				} else { 
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 6: // START
				if (field.type == TType.I64) {
					this.start = iprot.readI64();
					setStartIsSet(true);
				} else { 
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 7: // STOP
				if (field.type == TType.I64) {
					this.stop = iprot.readI64();
					setStopIsSet(true);
				} else { 
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 8: // DESCRIPTION
				if (field.type == TType.STRING) {
					this.description = iprot.readString();
				} else { 
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 9: // DATA
				if (field.type == TType.MAP) {
					{
						TMap _map0 = iprot.readMapBegin();
						this.data = new java.util.HashMap<String,String>(2*_map0.size);
						for (int _i1 = 0; _i1 < _map0.size; ++_i1)
						{
							String _key2;
							String _val3;
							_key2 = iprot.readString();
							_val3 = iprot.readString();
							this.data.put(_key2, _val3);
						}
						iprot.readMapEnd();
					}
				} else { 
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			default:
				TProtocolUtil.skip(iprot, field.type);
			}
			iprot.readFieldEnd();
		}
		iprot.readStructEnd();

		// check for required fields of primitive type, which can't be checked in the validate method
		validate();
	}

	public void write(TProtocol oprot) throws TException {
		validate();

		oprot.writeStructBegin(STRUCT_DESC);
		if (this.sender != null) {
			oprot.writeFieldBegin(SENDER_FIELD_DESC);
			oprot.writeString(this.sender);
			oprot.writeFieldEnd();
		}
		if (this.svc != null) {
			oprot.writeFieldBegin(SVC_FIELD_DESC);
			oprot.writeString(this.svc);
			oprot.writeFieldEnd();
		}
		oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
		oprot.writeI64(this.traceId);
		oprot.writeFieldEnd();
		oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
		oprot.writeI64(this.spanId);
		oprot.writeFieldEnd();
		oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
		oprot.writeI64(this.parentId);
		oprot.writeFieldEnd();
		oprot.writeFieldBegin(START_FIELD_DESC);
		oprot.writeI64(this.start);
		oprot.writeFieldEnd();
		oprot.writeFieldBegin(STOP_FIELD_DESC);
		oprot.writeI64(this.stop);
		oprot.writeFieldEnd();
		if (this.description != null) {
			oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
			oprot.writeString(this.description);
			oprot.writeFieldEnd();
		}
		if (this.data != null) {
			oprot.writeFieldBegin(DATA_FIELD_DESC);
			{
				oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.data.size()));
				for (java.util.Map.Entry<String, String> _iter4 : this.data.entrySet())
				{
					oprot.writeString(_iter4.getKey());
					oprot.writeString(_iter4.getValue());
				}
				oprot.writeMapEnd();
			}
			oprot.writeFieldEnd();
		}
		oprot.writeFieldStop();
		oprot.writeStructEnd();
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("RemoteSpan(");
		sb.append("sender:");
		if (this.sender == null) {
			sb.append("null");
		} else {
			sb.append(this.sender);
		}
		sb.append(", ");
		sb.append("svc:");
		if (this.svc == null) {
			sb.append("null");
		} else {
			sb.append(this.svc);
		}
		sb.append(", ");
		sb.append("traceId:");
		sb.append(this.traceId);
		sb.append(", ");
		sb.append("spanId:");
		sb.append(this.spanId);
		sb.append(", ");
		sb.append("parentId:");
		sb.append(this.parentId);
		sb.append(", ");
		sb.append("start:");
		sb.append(this.start);
		sb.append(", ");
		sb.append("stop:");
		sb.append(this.stop);
		sb.append(", ");
		sb.append("description:");
		if (this.description == null) {
			sb.append("null");
		} else {
			sb.append(this.description);
		}
		sb.append(", ");
		sb.append("data:");
		if (this.data == null) {
			sb.append("null");
		} else {
			sb.append(this.data);
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws TException {
		// check for required fields
	}

}

